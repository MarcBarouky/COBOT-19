
Cobot_final_mod_pump_servo_obstacle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005148  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08005254  08005254  00015254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052b8  080052b8  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080052b8  080052b8  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080052b8  080052b8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052b8  080052b8  000152b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052bc  080052bc  000152bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080052c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f4  20000068  08005328  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  08005328  0002045c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a762  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c52  00000000  00000000  0002a836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c80  00000000  00000000  0002c488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009d3  00000000  00000000  0002d108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001790f  00000000  00000000  0002dadb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d3c3  00000000  00000000  000453ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a1d4  00000000  00000000  000527ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000039c4  00000000  00000000  000dc984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000e0348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	0800523c 	.word	0x0800523c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	0800523c 	.word	0x0800523c

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2iz>:
 8000608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30f      	bcc.n	8000632 <__aeabi_f2iz+0x2a>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d90d      	bls.n	8000638 <__aeabi_f2iz+0x30>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	bf18      	it	ne
 800062e:	4240      	negne	r0, r0
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr
 8000638:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800063c:	d101      	bne.n	8000642 <__aeabi_f2iz+0x3a>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	d105      	bne.n	800064e <__aeabi_f2iz+0x46>
 8000642:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000646:	bf08      	it	eq
 8000648:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <LEDFCN>:
int obstaclemode=0;
char direction[2];


void LEDFCN()
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
	if(LEDMODE == 0)
 8000658:	4b45      	ldr	r3, [pc, #276]	; (8000770 <LEDFCN+0x11c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d10c      	bne.n	800067a <LEDFCN+0x26>
	{
		htim4.Instance->CCR1 = 0;	// Red
 8000660:	4b44      	ldr	r3, [pc, #272]	; (8000774 <LEDFCN+0x120>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	; 0x34
		htim4.Instance->CCR2 = 0;
 8000668:	4b42      	ldr	r3, [pc, #264]	; (8000774 <LEDFCN+0x120>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2200      	movs	r2, #0
 800066e:	639a      	str	r2, [r3, #56]	; 0x38
		htim4.Instance->CCR3 = 0;
 8000670:	4b40      	ldr	r3, [pc, #256]	; (8000774 <LEDFCN+0x120>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2200      	movs	r2, #0
 8000676:	63da      	str	r2, [r3, #60]	; 0x3c
		}		
		htim4.Instance->CCR1 = LEDR;
		htim4.Instance->CCR2 = LEDG;
		htim4.Instance->CCR3 = LEDB;
	}
}
 8000678:	e075      	b.n	8000766 <LEDFCN+0x112>
	else if(LEDMODE == 1)
 800067a:	4b3d      	ldr	r3, [pc, #244]	; (8000770 <LEDFCN+0x11c>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	2b01      	cmp	r3, #1
 8000680:	d10d      	bne.n	800069e <LEDFCN+0x4a>
		htim4.Instance->CCR1 = 7100;	//Blue
 8000682:	4b3c      	ldr	r3, [pc, #240]	; (8000774 <LEDFCN+0x120>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f641 32bc 	movw	r2, #7100	; 0x1bbc
 800068a:	635a      	str	r2, [r3, #52]	; 0x34
		htim4.Instance->CCR2 = 0;
 800068c:	4b39      	ldr	r3, [pc, #228]	; (8000774 <LEDFCN+0x120>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2200      	movs	r2, #0
 8000692:	639a      	str	r2, [r3, #56]	; 0x38
		htim4.Instance->CCR3 = 0;
 8000694:	4b37      	ldr	r3, [pc, #220]	; (8000774 <LEDFCN+0x120>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2200      	movs	r2, #0
 800069a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800069c:	e063      	b.n	8000766 <LEDFCN+0x112>
	else if(LEDMODE == 2)				//Green
 800069e:	4b34      	ldr	r3, [pc, #208]	; (8000770 <LEDFCN+0x11c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2b02      	cmp	r3, #2
 80006a4:	d10d      	bne.n	80006c2 <LEDFCN+0x6e>
		htim4.Instance->CCR1 = 0;
 80006a6:	4b33      	ldr	r3, [pc, #204]	; (8000774 <LEDFCN+0x120>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2200      	movs	r2, #0
 80006ac:	635a      	str	r2, [r3, #52]	; 0x34
		htim4.Instance->CCR2 = 7100;
 80006ae:	4b31      	ldr	r3, [pc, #196]	; (8000774 <LEDFCN+0x120>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f641 32bc 	movw	r2, #7100	; 0x1bbc
 80006b6:	639a      	str	r2, [r3, #56]	; 0x38
		htim4.Instance->CCR3 = 0;
 80006b8:	4b2e      	ldr	r3, [pc, #184]	; (8000774 <LEDFCN+0x120>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2200      	movs	r2, #0
 80006be:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80006c0:	e051      	b.n	8000766 <LEDFCN+0x112>
	else if(LEDMODE == 3)			//Multicolor
 80006c2:	4b2b      	ldr	r3, [pc, #172]	; (8000770 <LEDFCN+0x11c>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2b03      	cmp	r3, #3
 80006c8:	d10d      	bne.n	80006e6 <LEDFCN+0x92>
		htim4.Instance->CCR1 = 0;
 80006ca:	4b2a      	ldr	r3, [pc, #168]	; (8000774 <LEDFCN+0x120>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2200      	movs	r2, #0
 80006d0:	635a      	str	r2, [r3, #52]	; 0x34
		htim4.Instance->CCR2 = 0;
 80006d2:	4b28      	ldr	r3, [pc, #160]	; (8000774 <LEDFCN+0x120>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2200      	movs	r2, #0
 80006d8:	639a      	str	r2, [r3, #56]	; 0x38
		htim4.Instance->CCR3 = 7100;
 80006da:	4b26      	ldr	r3, [pc, #152]	; (8000774 <LEDFCN+0x120>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f641 32bc 	movw	r2, #7100	; 0x1bbc
 80006e2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80006e4:	e03f      	b.n	8000766 <LEDFCN+0x112>
	else if(LEDMODE == 4)
 80006e6:	4b22      	ldr	r3, [pc, #136]	; (8000770 <LEDFCN+0x11c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2b04      	cmp	r3, #4
 80006ec:	d13b      	bne.n	8000766 <LEDFCN+0x112>
		LEDR = LEDR+ LEDSTEP;
 80006ee:	4b22      	ldr	r3, [pc, #136]	; (8000778 <LEDFCN+0x124>)
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	4b22      	ldr	r3, [pc, #136]	; (800077c <LEDFCN+0x128>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4413      	add	r3, r2
 80006f8:	4a1f      	ldr	r2, [pc, #124]	; (8000778 <LEDFCN+0x124>)
 80006fa:	6013      	str	r3, [r2, #0]
		if(LEDR >=7200)
 80006fc:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <LEDFCN+0x124>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8000704:	db20      	blt.n	8000748 <LEDFCN+0xf4>
			LEDR = 0;
 8000706:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <LEDFCN+0x124>)
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
			LEDG = LEDG + LEDSTEP;
 800070c:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <LEDFCN+0x12c>)
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	4b1a      	ldr	r3, [pc, #104]	; (800077c <LEDFCN+0x128>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4413      	add	r3, r2
 8000716:	4a1a      	ldr	r2, [pc, #104]	; (8000780 <LEDFCN+0x12c>)
 8000718:	6013      	str	r3, [r2, #0]
			if(LEDG >=7200)
 800071a:	4b19      	ldr	r3, [pc, #100]	; (8000780 <LEDFCN+0x12c>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8000722:	db11      	blt.n	8000748 <LEDFCN+0xf4>
				LEDG = 0;
 8000724:	4b16      	ldr	r3, [pc, #88]	; (8000780 <LEDFCN+0x12c>)
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
				LEDB = LEDB + LEDSTEP;
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <LEDFCN+0x130>)
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	4b13      	ldr	r3, [pc, #76]	; (800077c <LEDFCN+0x128>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4413      	add	r3, r2
 8000734:	4a13      	ldr	r2, [pc, #76]	; (8000784 <LEDFCN+0x130>)
 8000736:	6013      	str	r3, [r2, #0]
				if(LEDB >= 7200)
 8000738:	4b12      	ldr	r3, [pc, #72]	; (8000784 <LEDFCN+0x130>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8000740:	db02      	blt.n	8000748 <LEDFCN+0xf4>
					LEDB = 0;
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <LEDFCN+0x130>)
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
		htim4.Instance->CCR1 = LEDR;
 8000748:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <LEDFCN+0x124>)
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <LEDFCN+0x120>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	635a      	str	r2, [r3, #52]	; 0x34
		htim4.Instance->CCR2 = LEDG;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <LEDFCN+0x12c>)
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	4b07      	ldr	r3, [pc, #28]	; (8000774 <LEDFCN+0x120>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	639a      	str	r2, [r3, #56]	; 0x38
		htim4.Instance->CCR3 = LEDB;
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <LEDFCN+0x130>)
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	4b04      	ldr	r3, [pc, #16]	; (8000774 <LEDFCN+0x120>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	200002e8 	.word	0x200002e8
 8000774:	200001c4 	.word	0x200001c4
 8000778:	200002ec 	.word	0x200002ec
 800077c:	20000004 	.word	0x20000004
 8000780:	200002f0 	.word	0x200002f0
 8000784:	200002f4 	.word	0x200002f4

08000788 <PumpFCN>:


void PumpFCN(){
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0

	if( pump == 1)									//function that toggles the state of the pump through a digital pin
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <PumpFCN+0x20>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d107      	bne.n	80007a4 <PumpFCN+0x1c>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8000794:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000798:	4804      	ldr	r0, [pc, #16]	; (80007ac <PumpFCN+0x24>)
 800079a:	f001 ffb8 	bl	800270e <HAL_GPIO_TogglePin>

		pump=0;
 800079e:	4b02      	ldr	r3, [pc, #8]	; (80007a8 <PumpFCN+0x20>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]

	}
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	200002f8 	.word	0x200002f8
 80007ac:	40010c00 	.word	0x40010c00

080007b0 <ReceiveWref>:
		
void ReceiveWref()									//function that receives the commands from the MIT app
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&huart1,w,1,0x0005);
 80007b4:	2305      	movs	r3, #5
 80007b6:	2201      	movs	r2, #1
 80007b8:	498b      	ldr	r1, [pc, #556]	; (80009e8 <ReceiveWref+0x238>)
 80007ba:	488c      	ldr	r0, [pc, #560]	; (80009ec <ReceiveWref+0x23c>)
 80007bc:	f003 fbf1 	bl	8003fa2 <HAL_UART_Receive>

	if(cntW==0)
 80007c0:	4b8b      	ldr	r3, [pc, #556]	; (80009f0 <ReceiveWref+0x240>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d14b      	bne.n	8000860 <ReceiveWref+0xb0>
	{	
		if(w[0]=='F')
 80007c8:	4b87      	ldr	r3, [pc, #540]	; (80009e8 <ReceiveWref+0x238>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b46      	cmp	r3, #70	; 0x46
 80007ce:	d103      	bne.n	80007d8 <ReceiveWref+0x28>
			cntW=100;
 80007d0:	4b87      	ldr	r3, [pc, #540]	; (80009f0 <ReceiveWref+0x240>)
 80007d2:	2264      	movs	r2, #100	; 0x64
 80007d4:	601a      	str	r2, [r3, #0]


	else
		cntW=0;
	
}
 80007d6:	e22d      	b.n	8000c34 <ReceiveWref+0x484>
		else if(w[0]=='B')		// depending on the first letter received cntW takes a value
 80007d8:	4b83      	ldr	r3, [pc, #524]	; (80009e8 <ReceiveWref+0x238>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b42      	cmp	r3, #66	; 0x42
 80007de:	d103      	bne.n	80007e8 <ReceiveWref+0x38>
			cntW = 110;
 80007e0:	4b83      	ldr	r3, [pc, #524]	; (80009f0 <ReceiveWref+0x240>)
 80007e2:	226e      	movs	r2, #110	; 0x6e
 80007e4:	601a      	str	r2, [r3, #0]
}
 80007e6:	e225      	b.n	8000c34 <ReceiveWref+0x484>
		else if(w[0]=='R')
 80007e8:	4b7f      	ldr	r3, [pc, #508]	; (80009e8 <ReceiveWref+0x238>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b52      	cmp	r3, #82	; 0x52
 80007ee:	d103      	bne.n	80007f8 <ReceiveWref+0x48>
			cntW = 120;
 80007f0:	4b7f      	ldr	r3, [pc, #508]	; (80009f0 <ReceiveWref+0x240>)
 80007f2:	2278      	movs	r2, #120	; 0x78
 80007f4:	601a      	str	r2, [r3, #0]
}
 80007f6:	e21d      	b.n	8000c34 <ReceiveWref+0x484>
		else if(w[0]=='S')
 80007f8:	4b7b      	ldr	r3, [pc, #492]	; (80009e8 <ReceiveWref+0x238>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b53      	cmp	r3, #83	; 0x53
 80007fe:	d103      	bne.n	8000808 <ReceiveWref+0x58>
			cntW = 130;
 8000800:	4b7b      	ldr	r3, [pc, #492]	; (80009f0 <ReceiveWref+0x240>)
 8000802:	2282      	movs	r2, #130	; 0x82
 8000804:	601a      	str	r2, [r3, #0]
}
 8000806:	e215      	b.n	8000c34 <ReceiveWref+0x484>
		else if(w[0]=='L')
 8000808:	4b77      	ldr	r3, [pc, #476]	; (80009e8 <ReceiveWref+0x238>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b4c      	cmp	r3, #76	; 0x4c
 800080e:	d103      	bne.n	8000818 <ReceiveWref+0x68>
			cntW = 140;
 8000810:	4b77      	ldr	r3, [pc, #476]	; (80009f0 <ReceiveWref+0x240>)
 8000812:	228c      	movs	r2, #140	; 0x8c
 8000814:	601a      	str	r2, [r3, #0]
}
 8000816:	e20d      	b.n	8000c34 <ReceiveWref+0x484>
		else if(w[0]=='C')
 8000818:	4b73      	ldr	r3, [pc, #460]	; (80009e8 <ReceiveWref+0x238>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b43      	cmp	r3, #67	; 0x43
 800081e:	d103      	bne.n	8000828 <ReceiveWref+0x78>
			cntW = 150;
 8000820:	4b73      	ldr	r3, [pc, #460]	; (80009f0 <ReceiveWref+0x240>)
 8000822:	2296      	movs	r2, #150	; 0x96
 8000824:	601a      	str	r2, [r3, #0]
}
 8000826:	e205      	b.n	8000c34 <ReceiveWref+0x484>
		else if(w[0]=='V')
 8000828:	4b6f      	ldr	r3, [pc, #444]	; (80009e8 <ReceiveWref+0x238>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b56      	cmp	r3, #86	; 0x56
 800082e:	d103      	bne.n	8000838 <ReceiveWref+0x88>
			cntW = 160;
 8000830:	4b6f      	ldr	r3, [pc, #444]	; (80009f0 <ReceiveWref+0x240>)
 8000832:	22a0      	movs	r2, #160	; 0xa0
 8000834:	601a      	str	r2, [r3, #0]
}
 8000836:	e1fd      	b.n	8000c34 <ReceiveWref+0x484>
		else if(w[0]=='Y')
 8000838:	4b6b      	ldr	r3, [pc, #428]	; (80009e8 <ReceiveWref+0x238>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2b59      	cmp	r3, #89	; 0x59
 800083e:	d103      	bne.n	8000848 <ReceiveWref+0x98>
			cntW=170;
 8000840:	4b6b      	ldr	r3, [pc, #428]	; (80009f0 <ReceiveWref+0x240>)
 8000842:	22aa      	movs	r2, #170	; 0xaa
 8000844:	601a      	str	r2, [r3, #0]
}
 8000846:	e1f5      	b.n	8000c34 <ReceiveWref+0x484>
		else if(w[0]=='N')
 8000848:	4b67      	ldr	r3, [pc, #412]	; (80009e8 <ReceiveWref+0x238>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b4e      	cmp	r3, #78	; 0x4e
 800084e:	d103      	bne.n	8000858 <ReceiveWref+0xa8>
			cntW=180;
 8000850:	4b67      	ldr	r3, [pc, #412]	; (80009f0 <ReceiveWref+0x240>)
 8000852:	22b4      	movs	r2, #180	; 0xb4
 8000854:	601a      	str	r2, [r3, #0]
}
 8000856:	e1ed      	b.n	8000c34 <ReceiveWref+0x484>
			cntW = 0;
 8000858:	4b65      	ldr	r3, [pc, #404]	; (80009f0 <ReceiveWref+0x240>)
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
}
 800085e:	e1e9      	b.n	8000c34 <ReceiveWref+0x484>
	else if(cntW == 100) 	//cntW=100 meaning the first letter received is F
 8000860:	4b63      	ldr	r3, [pc, #396]	; (80009f0 <ReceiveWref+0x240>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b64      	cmp	r3, #100	; 0x64
 8000866:	d15d      	bne.n	8000924 <ReceiveWref+0x174>
		if(w[0]=='F') 	//second letter is F so FF is received
 8000868:	4b5f      	ldr	r3, [pc, #380]	; (80009e8 <ReceiveWref+0x238>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b46      	cmp	r3, #70	; 0x46
 800086e:	d11c      	bne.n	80008aa <ReceiveWref+0xfa>
			wref1 = VRmax + 64;					//wref1 & wref2 are the speeds of the motors
 8000870:	4b60      	ldr	r3, [pc, #384]	; (80009f4 <ReceiveWref+0x244>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	b2db      	uxtb	r3, r3
 8000876:	3340      	adds	r3, #64	; 0x40
 8000878:	b2da      	uxtb	r2, r3
 800087a:	4b5f      	ldr	r3, [pc, #380]	; (80009f8 <ReceiveWref+0x248>)
 800087c:	701a      	strb	r2, [r3, #0]
			wref2 = -VRmax  + 64;
 800087e:	4b5d      	ldr	r3, [pc, #372]	; (80009f4 <ReceiveWref+0x244>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	b2db      	uxtb	r3, r3
 8000884:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000888:	b2da      	uxtb	r2, r3
 800088a:	4b5c      	ldr	r3, [pc, #368]	; (80009fc <ReceiveWref+0x24c>)
 800088c:	701a      	strb	r2, [r3, #0]
			htim3.Instance->CNT=1;
 800088e:	4b5c      	ldr	r3, [pc, #368]	; (8000a00 <ReceiveWref+0x250>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2201      	movs	r2, #1
 8000894:	625a      	str	r2, [r3, #36]	; 0x24
			cntW = 0;
 8000896:	4b56      	ldr	r3, [pc, #344]	; (80009f0 <ReceiveWref+0x240>)
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
			direction[0]='F';				//in all this function direction is a variable to stock the direction of the cobot's movement
 800089c:	4b59      	ldr	r3, [pc, #356]	; (8000a04 <ReceiveWref+0x254>)
 800089e:	2246      	movs	r2, #70	; 0x46
 80008a0:	701a      	strb	r2, [r3, #0]
			direction[1]='F';				// the purpose of stocking this direction is to use it in the External interrupt of the digital pins code
 80008a2:	4b58      	ldr	r3, [pc, #352]	; (8000a04 <ReceiveWref+0x254>)
 80008a4:	2246      	movs	r2, #70	; 0x46
 80008a6:	705a      	strb	r2, [r3, #1]
}
 80008a8:	e1c4      	b.n	8000c34 <ReceiveWref+0x484>
		else if(w[0]=='R')
 80008aa:	4b4f      	ldr	r3, [pc, #316]	; (80009e8 <ReceiveWref+0x238>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b52      	cmp	r3, #82	; 0x52
 80008b0:	d117      	bne.n	80008e2 <ReceiveWref+0x132>
			wref1 = VRmax + 64;
 80008b2:	4b50      	ldr	r3, [pc, #320]	; (80009f4 <ReceiveWref+0x244>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	3340      	adds	r3, #64	; 0x40
 80008ba:	b2da      	uxtb	r2, r3
 80008bc:	4b4e      	ldr	r3, [pc, #312]	; (80009f8 <ReceiveWref+0x248>)
 80008be:	701a      	strb	r2, [r3, #0]
			wref2 = -5  + 64;
 80008c0:	4b4e      	ldr	r3, [pc, #312]	; (80009fc <ReceiveWref+0x24c>)
 80008c2:	223b      	movs	r2, #59	; 0x3b
 80008c4:	701a      	strb	r2, [r3, #0]
			htim3.Instance->CNT=1;
 80008c6:	4b4e      	ldr	r3, [pc, #312]	; (8000a00 <ReceiveWref+0x250>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2201      	movs	r2, #1
 80008cc:	625a      	str	r2, [r3, #36]	; 0x24
			cntW = 0;
 80008ce:	4b48      	ldr	r3, [pc, #288]	; (80009f0 <ReceiveWref+0x240>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
			direction[0]='F';
 80008d4:	4b4b      	ldr	r3, [pc, #300]	; (8000a04 <ReceiveWref+0x254>)
 80008d6:	2246      	movs	r2, #70	; 0x46
 80008d8:	701a      	strb	r2, [r3, #0]
			direction[1]='R';
 80008da:	4b4a      	ldr	r3, [pc, #296]	; (8000a04 <ReceiveWref+0x254>)
 80008dc:	2252      	movs	r2, #82	; 0x52
 80008de:	705a      	strb	r2, [r3, #1]
}
 80008e0:	e1a8      	b.n	8000c34 <ReceiveWref+0x484>
		else if(w[0]=='L')
 80008e2:	4b41      	ldr	r3, [pc, #260]	; (80009e8 <ReceiveWref+0x238>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b4c      	cmp	r3, #76	; 0x4c
 80008e8:	d118      	bne.n	800091c <ReceiveWref+0x16c>
			wref1 = 5 + 64;
 80008ea:	4b43      	ldr	r3, [pc, #268]	; (80009f8 <ReceiveWref+0x248>)
 80008ec:	2245      	movs	r2, #69	; 0x45
 80008ee:	701a      	strb	r2, [r3, #0]
			wref2 = -VRmax  + 64;
 80008f0:	4b40      	ldr	r3, [pc, #256]	; (80009f4 <ReceiveWref+0x244>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	4b3f      	ldr	r3, [pc, #252]	; (80009fc <ReceiveWref+0x24c>)
 80008fe:	701a      	strb	r2, [r3, #0]
			htim3.Instance->CNT=1;
 8000900:	4b3f      	ldr	r3, [pc, #252]	; (8000a00 <ReceiveWref+0x250>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2201      	movs	r2, #1
 8000906:	625a      	str	r2, [r3, #36]	; 0x24
			cntW = 0;
 8000908:	4b39      	ldr	r3, [pc, #228]	; (80009f0 <ReceiveWref+0x240>)
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
			direction[0]='F';
 800090e:	4b3d      	ldr	r3, [pc, #244]	; (8000a04 <ReceiveWref+0x254>)
 8000910:	2246      	movs	r2, #70	; 0x46
 8000912:	701a      	strb	r2, [r3, #0]
			direction[1]='L';
 8000914:	4b3b      	ldr	r3, [pc, #236]	; (8000a04 <ReceiveWref+0x254>)
 8000916:	224c      	movs	r2, #76	; 0x4c
 8000918:	705a      	strb	r2, [r3, #1]
}
 800091a:	e18b      	b.n	8000c34 <ReceiveWref+0x484>
			cntW = 0;
 800091c:	4b34      	ldr	r3, [pc, #208]	; (80009f0 <ReceiveWref+0x240>)
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
}
 8000922:	e187      	b.n	8000c34 <ReceiveWref+0x484>
	else if(cntW == 110)
 8000924:	4b32      	ldr	r3, [pc, #200]	; (80009f0 <ReceiveWref+0x240>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2b6e      	cmp	r3, #110	; 0x6e
 800092a:	d16d      	bne.n	8000a08 <ReceiveWref+0x258>
		if(w[0]=='B')
 800092c:	4b2e      	ldr	r3, [pc, #184]	; (80009e8 <ReceiveWref+0x238>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b42      	cmp	r3, #66	; 0x42
 8000932:	d11c      	bne.n	800096e <ReceiveWref+0x1be>
			wref1 = -VRmax + 64;
 8000934:	4b2f      	ldr	r3, [pc, #188]	; (80009f4 <ReceiveWref+0x244>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800093e:	b2da      	uxtb	r2, r3
 8000940:	4b2d      	ldr	r3, [pc, #180]	; (80009f8 <ReceiveWref+0x248>)
 8000942:	701a      	strb	r2, [r3, #0]
			wref2 = VRmax  + 64;
 8000944:	4b2b      	ldr	r3, [pc, #172]	; (80009f4 <ReceiveWref+0x244>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	b2db      	uxtb	r3, r3
 800094a:	3340      	adds	r3, #64	; 0x40
 800094c:	b2da      	uxtb	r2, r3
 800094e:	4b2b      	ldr	r3, [pc, #172]	; (80009fc <ReceiveWref+0x24c>)
 8000950:	701a      	strb	r2, [r3, #0]
			htim3.Instance->CNT=1;
 8000952:	4b2b      	ldr	r3, [pc, #172]	; (8000a00 <ReceiveWref+0x250>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2201      	movs	r2, #1
 8000958:	625a      	str	r2, [r3, #36]	; 0x24
			cntW = 0;
 800095a:	4b25      	ldr	r3, [pc, #148]	; (80009f0 <ReceiveWref+0x240>)
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
			direction[0]='B';
 8000960:	4b28      	ldr	r3, [pc, #160]	; (8000a04 <ReceiveWref+0x254>)
 8000962:	2242      	movs	r2, #66	; 0x42
 8000964:	701a      	strb	r2, [r3, #0]
			direction[1]='B';
 8000966:	4b27      	ldr	r3, [pc, #156]	; (8000a04 <ReceiveWref+0x254>)
 8000968:	2242      	movs	r2, #66	; 0x42
 800096a:	705a      	strb	r2, [r3, #1]
}
 800096c:	e162      	b.n	8000c34 <ReceiveWref+0x484>
		else if(w[0]=='R')
 800096e:	4b1e      	ldr	r3, [pc, #120]	; (80009e8 <ReceiveWref+0x238>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b52      	cmp	r3, #82	; 0x52
 8000974:	d118      	bne.n	80009a8 <ReceiveWref+0x1f8>
			wref1 = -VRmax + 64;
 8000976:	4b1f      	ldr	r3, [pc, #124]	; (80009f4 <ReceiveWref+0x244>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	b2db      	uxtb	r3, r3
 800097c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000980:	b2da      	uxtb	r2, r3
 8000982:	4b1d      	ldr	r3, [pc, #116]	; (80009f8 <ReceiveWref+0x248>)
 8000984:	701a      	strb	r2, [r3, #0]
			wref2 = 5  + 64;
 8000986:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <ReceiveWref+0x24c>)
 8000988:	2245      	movs	r2, #69	; 0x45
 800098a:	701a      	strb	r2, [r3, #0]
			htim3.Instance->CNT=1;
 800098c:	4b1c      	ldr	r3, [pc, #112]	; (8000a00 <ReceiveWref+0x250>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2201      	movs	r2, #1
 8000992:	625a      	str	r2, [r3, #36]	; 0x24
			cntW = 0;
 8000994:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <ReceiveWref+0x240>)
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
			direction[0]='B';
 800099a:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <ReceiveWref+0x254>)
 800099c:	2242      	movs	r2, #66	; 0x42
 800099e:	701a      	strb	r2, [r3, #0]
			direction[1]='R';
 80009a0:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <ReceiveWref+0x254>)
 80009a2:	2252      	movs	r2, #82	; 0x52
 80009a4:	705a      	strb	r2, [r3, #1]
}
 80009a6:	e145      	b.n	8000c34 <ReceiveWref+0x484>
		else if(w[0]=='L')
 80009a8:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <ReceiveWref+0x238>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b4c      	cmp	r3, #76	; 0x4c
 80009ae:	d117      	bne.n	80009e0 <ReceiveWref+0x230>
			wref1 = -5 + 64;
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <ReceiveWref+0x248>)
 80009b2:	223b      	movs	r2, #59	; 0x3b
 80009b4:	701a      	strb	r2, [r3, #0]
			wref2 = VRmax  + 64;
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <ReceiveWref+0x244>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	3340      	adds	r3, #64	; 0x40
 80009be:	b2da      	uxtb	r2, r3
 80009c0:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <ReceiveWref+0x24c>)
 80009c2:	701a      	strb	r2, [r3, #0]
			htim3.Instance->CNT=1;
 80009c4:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <ReceiveWref+0x250>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2201      	movs	r2, #1
 80009ca:	625a      	str	r2, [r3, #36]	; 0x24
			cntW = 0;
 80009cc:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <ReceiveWref+0x240>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
			direction[0]='B';
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <ReceiveWref+0x254>)
 80009d4:	2242      	movs	r2, #66	; 0x42
 80009d6:	701a      	strb	r2, [r3, #0]
			direction[1]='L';
 80009d8:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <ReceiveWref+0x254>)
 80009da:	224c      	movs	r2, #76	; 0x4c
 80009dc:	705a      	strb	r2, [r3, #1]
}
 80009de:	e129      	b.n	8000c34 <ReceiveWref+0x484>
			cntW = 0;
 80009e0:	4b03      	ldr	r3, [pc, #12]	; (80009f0 <ReceiveWref+0x240>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
}
 80009e6:	e125      	b.n	8000c34 <ReceiveWref+0x484>
 80009e8:	200002dc 	.word	0x200002dc
 80009ec:	2000020c 	.word	0x2000020c
 80009f0:	200002d8 	.word	0x200002d8
 80009f4:	20000008 	.word	0x20000008
 80009f8:	20000000 	.word	0x20000000
 80009fc:	20000001 	.word	0x20000001
 8000a00:	2000017c 	.word	0x2000017c
 8000a04:	20000308 	.word	0x20000308
	else if(cntW == 120)
 8000a08:	4b8b      	ldr	r3, [pc, #556]	; (8000c38 <ReceiveWref+0x488>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b78      	cmp	r3, #120	; 0x78
 8000a0e:	d123      	bne.n	8000a58 <ReceiveWref+0x2a8>
		if(w[0]=='R')
 8000a10:	4b8a      	ldr	r3, [pc, #552]	; (8000c3c <ReceiveWref+0x48c>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b52      	cmp	r3, #82	; 0x52
 8000a16:	d11b      	bne.n	8000a50 <ReceiveWref+0x2a0>
			wref1 = VRmax + 64;
 8000a18:	4b89      	ldr	r3, [pc, #548]	; (8000c40 <ReceiveWref+0x490>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	3340      	adds	r3, #64	; 0x40
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	4b88      	ldr	r3, [pc, #544]	; (8000c44 <ReceiveWref+0x494>)
 8000a24:	701a      	strb	r2, [r3, #0]
			wref2 = VRmax  + 64;
 8000a26:	4b86      	ldr	r3, [pc, #536]	; (8000c40 <ReceiveWref+0x490>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	3340      	adds	r3, #64	; 0x40
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	4b85      	ldr	r3, [pc, #532]	; (8000c48 <ReceiveWref+0x498>)
 8000a32:	701a      	strb	r2, [r3, #0]
			htim3.Instance->CNT=1;
 8000a34:	4b85      	ldr	r3, [pc, #532]	; (8000c4c <ReceiveWref+0x49c>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2201      	movs	r2, #1
 8000a3a:	625a      	str	r2, [r3, #36]	; 0x24
			cntW = 0;
 8000a3c:	4b7e      	ldr	r3, [pc, #504]	; (8000c38 <ReceiveWref+0x488>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
			direction[0]='R';
 8000a42:	4b83      	ldr	r3, [pc, #524]	; (8000c50 <ReceiveWref+0x4a0>)
 8000a44:	2252      	movs	r2, #82	; 0x52
 8000a46:	701a      	strb	r2, [r3, #0]
			direction[1]='R';
 8000a48:	4b81      	ldr	r3, [pc, #516]	; (8000c50 <ReceiveWref+0x4a0>)
 8000a4a:	2252      	movs	r2, #82	; 0x52
 8000a4c:	705a      	strb	r2, [r3, #1]
}
 8000a4e:	e0f1      	b.n	8000c34 <ReceiveWref+0x484>
			cntW = 0;
 8000a50:	4b79      	ldr	r3, [pc, #484]	; (8000c38 <ReceiveWref+0x488>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
}
 8000a56:	e0ed      	b.n	8000c34 <ReceiveWref+0x484>
	else if(cntW == 130)
 8000a58:	4b77      	ldr	r3, [pc, #476]	; (8000c38 <ReceiveWref+0x488>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b82      	cmp	r3, #130	; 0x82
 8000a5e:	d115      	bne.n	8000a8c <ReceiveWref+0x2dc>
		if(w[0]=='S')
 8000a60:	4b76      	ldr	r3, [pc, #472]	; (8000c3c <ReceiveWref+0x48c>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b53      	cmp	r3, #83	; 0x53
 8000a66:	d10d      	bne.n	8000a84 <ReceiveWref+0x2d4>
			wref1 = 0 + 64;
 8000a68:	4b76      	ldr	r3, [pc, #472]	; (8000c44 <ReceiveWref+0x494>)
 8000a6a:	2240      	movs	r2, #64	; 0x40
 8000a6c:	701a      	strb	r2, [r3, #0]
			wref2 = 0  + 64;
 8000a6e:	4b76      	ldr	r3, [pc, #472]	; (8000c48 <ReceiveWref+0x498>)
 8000a70:	2240      	movs	r2, #64	; 0x40
 8000a72:	701a      	strb	r2, [r3, #0]
			htim3.Instance->CNT=1;
 8000a74:	4b75      	ldr	r3, [pc, #468]	; (8000c4c <ReceiveWref+0x49c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2201      	movs	r2, #1
 8000a7a:	625a      	str	r2, [r3, #36]	; 0x24
			cntW = 0;
 8000a7c:	4b6e      	ldr	r3, [pc, #440]	; (8000c38 <ReceiveWref+0x488>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
}
 8000a82:	e0d7      	b.n	8000c34 <ReceiveWref+0x484>
			cntW = 0;
 8000a84:	4b6c      	ldr	r3, [pc, #432]	; (8000c38 <ReceiveWref+0x488>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
}
 8000a8a:	e0d3      	b.n	8000c34 <ReceiveWref+0x484>
	else if(cntW == 140)
 8000a8c:	4b6a      	ldr	r3, [pc, #424]	; (8000c38 <ReceiveWref+0x488>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b8c      	cmp	r3, #140	; 0x8c
 8000a92:	d125      	bne.n	8000ae0 <ReceiveWref+0x330>
		if(w[0]=='L')
 8000a94:	4b69      	ldr	r3, [pc, #420]	; (8000c3c <ReceiveWref+0x48c>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b4c      	cmp	r3, #76	; 0x4c
 8000a9a:	d11d      	bne.n	8000ad8 <ReceiveWref+0x328>
			wref1 = -VRmax + 64;
 8000a9c:	4b68      	ldr	r3, [pc, #416]	; (8000c40 <ReceiveWref+0x490>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	4b66      	ldr	r3, [pc, #408]	; (8000c44 <ReceiveWref+0x494>)
 8000aaa:	701a      	strb	r2, [r3, #0]
			wref2 = -VRmax  + 64;
 8000aac:	4b64      	ldr	r3, [pc, #400]	; (8000c40 <ReceiveWref+0x490>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	4b63      	ldr	r3, [pc, #396]	; (8000c48 <ReceiveWref+0x498>)
 8000aba:	701a      	strb	r2, [r3, #0]
			htim3.Instance->CNT=1;
 8000abc:	4b63      	ldr	r3, [pc, #396]	; (8000c4c <ReceiveWref+0x49c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	625a      	str	r2, [r3, #36]	; 0x24
			cntW = 0;
 8000ac4:	4b5c      	ldr	r3, [pc, #368]	; (8000c38 <ReceiveWref+0x488>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
			direction[0]='L';
 8000aca:	4b61      	ldr	r3, [pc, #388]	; (8000c50 <ReceiveWref+0x4a0>)
 8000acc:	224c      	movs	r2, #76	; 0x4c
 8000ace:	701a      	strb	r2, [r3, #0]
			direction[1]='L';
 8000ad0:	4b5f      	ldr	r3, [pc, #380]	; (8000c50 <ReceiveWref+0x4a0>)
 8000ad2:	224c      	movs	r2, #76	; 0x4c
 8000ad4:	705a      	strb	r2, [r3, #1]
}
 8000ad6:	e0ad      	b.n	8000c34 <ReceiveWref+0x484>
			cntW = 0;
 8000ad8:	4b57      	ldr	r3, [pc, #348]	; (8000c38 <ReceiveWref+0x488>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
}
 8000ade:	e0a9      	b.n	8000c34 <ReceiveWref+0x484>
	else if(cntW == 150)
 8000ae0:	4b55      	ldr	r3, [pc, #340]	; (8000c38 <ReceiveWref+0x488>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b96      	cmp	r3, #150	; 0x96
 8000ae6:	d148      	bne.n	8000b7a <ReceiveWref+0x3ca>
		if(w[0]=='O')
 8000ae8:	4b54      	ldr	r3, [pc, #336]	; (8000c3c <ReceiveWref+0x48c>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b4f      	cmp	r3, #79	; 0x4f
 8000aee:	d106      	bne.n	8000afe <ReceiveWref+0x34e>
			LEDMODE = 0;
 8000af0:	4b58      	ldr	r3, [pc, #352]	; (8000c54 <ReceiveWref+0x4a4>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
			cntW = 0;
 8000af6:	4b50      	ldr	r3, [pc, #320]	; (8000c38 <ReceiveWref+0x488>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
}
 8000afc:	e09a      	b.n	8000c34 <ReceiveWref+0x484>
		else if(w[0]=='R')
 8000afe:	4b4f      	ldr	r3, [pc, #316]	; (8000c3c <ReceiveWref+0x48c>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b52      	cmp	r3, #82	; 0x52
 8000b04:	d109      	bne.n	8000b1a <ReceiveWref+0x36a>
			LEDMODE = 1;
 8000b06:	4b53      	ldr	r3, [pc, #332]	; (8000c54 <ReceiveWref+0x4a4>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	601a      	str	r2, [r3, #0]
			arm=1;
 8000b0c:	4b52      	ldr	r3, [pc, #328]	; (8000c58 <ReceiveWref+0x4a8>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	601a      	str	r2, [r3, #0]
			cntW = 0;
 8000b12:	4b49      	ldr	r3, [pc, #292]	; (8000c38 <ReceiveWref+0x488>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
}
 8000b18:	e08c      	b.n	8000c34 <ReceiveWref+0x484>
		else if(w[0]=='G')
 8000b1a:	4b48      	ldr	r3, [pc, #288]	; (8000c3c <ReceiveWref+0x48c>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	2b47      	cmp	r3, #71	; 0x47
 8000b20:	d106      	bne.n	8000b30 <ReceiveWref+0x380>
			LEDMODE = 2;
 8000b22:	4b4c      	ldr	r3, [pc, #304]	; (8000c54 <ReceiveWref+0x4a4>)
 8000b24:	2202      	movs	r2, #2
 8000b26:	601a      	str	r2, [r3, #0]
			cntW = 0;
 8000b28:	4b43      	ldr	r3, [pc, #268]	; (8000c38 <ReceiveWref+0x488>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
}
 8000b2e:	e081      	b.n	8000c34 <ReceiveWref+0x484>
		else if(w[0]=='B')
 8000b30:	4b42      	ldr	r3, [pc, #264]	; (8000c3c <ReceiveWref+0x48c>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b42      	cmp	r3, #66	; 0x42
 8000b36:	d106      	bne.n	8000b46 <ReceiveWref+0x396>
			LEDMODE = 3;
 8000b38:	4b46      	ldr	r3, [pc, #280]	; (8000c54 <ReceiveWref+0x4a4>)
 8000b3a:	2203      	movs	r2, #3
 8000b3c:	601a      	str	r2, [r3, #0]
			cntW = 0;
 8000b3e:	4b3e      	ldr	r3, [pc, #248]	; (8000c38 <ReceiveWref+0x488>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
}
 8000b44:	e076      	b.n	8000c34 <ReceiveWref+0x484>
		else if(w[0]=='A')
 8000b46:	4b3d      	ldr	r3, [pc, #244]	; (8000c3c <ReceiveWref+0x48c>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b41      	cmp	r3, #65	; 0x41
 8000b4c:	d106      	bne.n	8000b5c <ReceiveWref+0x3ac>
			LEDMODE = 4;
 8000b4e:	4b41      	ldr	r3, [pc, #260]	; (8000c54 <ReceiveWref+0x4a4>)
 8000b50:	2204      	movs	r2, #4
 8000b52:	601a      	str	r2, [r3, #0]
			cntW = 0;
 8000b54:	4b38      	ldr	r3, [pc, #224]	; (8000c38 <ReceiveWref+0x488>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
}
 8000b5a:	e06b      	b.n	8000c34 <ReceiveWref+0x484>
		else if(w[0]=='Z')
 8000b5c:	4b37      	ldr	r3, [pc, #220]	; (8000c3c <ReceiveWref+0x48c>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b5a      	cmp	r3, #90	; 0x5a
 8000b62:	d106      	bne.n	8000b72 <ReceiveWref+0x3c2>
			pump = 1;
 8000b64:	4b3d      	ldr	r3, [pc, #244]	; (8000c5c <ReceiveWref+0x4ac>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	601a      	str	r2, [r3, #0]
			cntW = 0;
 8000b6a:	4b33      	ldr	r3, [pc, #204]	; (8000c38 <ReceiveWref+0x488>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
}
 8000b70:	e060      	b.n	8000c34 <ReceiveWref+0x484>
			cntW = 0;
 8000b72:	4b31      	ldr	r3, [pc, #196]	; (8000c38 <ReceiveWref+0x488>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
}
 8000b78:	e05c      	b.n	8000c34 <ReceiveWref+0x484>
	else if(cntW == 160)
 8000b7a:	4b2f      	ldr	r3, [pc, #188]	; (8000c38 <ReceiveWref+0x488>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2ba0      	cmp	r3, #160	; 0xa0
 8000b80:	d129      	bne.n	8000bd6 <ReceiveWref+0x426>
		VRmax = (unsigned int)(w[0])*64.f/100.f; // info slider(app) maximum value = 100 
 8000b82:	4b2e      	ldr	r3, [pc, #184]	; (8000c3c <ReceiveWref+0x48c>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff fb96 	bl	80002b8 <__aeabi_ui2f>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	f04f 4185 	mov.w	r1, #1115684864	; 0x42800000
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff fbe8 	bl	8000368 <__aeabi_fmul>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	4931      	ldr	r1, [pc, #196]	; (8000c60 <ReceiveWref+0x4b0>)
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff fc97 	bl	80004d0 <__aeabi_fdiv>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fd2f 	bl	8000608 <__aeabi_f2iz>
 8000baa:	4603      	mov	r3, r0
 8000bac:	4a24      	ldr	r2, [pc, #144]	; (8000c40 <ReceiveWref+0x490>)
 8000bae:	6013      	str	r3, [r2, #0]
		if(VRmax>64)
 8000bb0:	4b23      	ldr	r3, [pc, #140]	; (8000c40 <ReceiveWref+0x490>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b40      	cmp	r3, #64	; 0x40
 8000bb6:	dd03      	ble.n	8000bc0 <ReceiveWref+0x410>
			VRmax = 64;
 8000bb8:	4b21      	ldr	r3, [pc, #132]	; (8000c40 <ReceiveWref+0x490>)
 8000bba:	2240      	movs	r2, #64	; 0x40
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	e006      	b.n	8000bce <ReceiveWref+0x41e>
		else if(VRmax<0)
 8000bc0:	4b1f      	ldr	r3, [pc, #124]	; (8000c40 <ReceiveWref+0x490>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	da02      	bge.n	8000bce <ReceiveWref+0x41e>
			VRmax = 0;
 8000bc8:	4b1d      	ldr	r3, [pc, #116]	; (8000c40 <ReceiveWref+0x490>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
		cntW = 0;
 8000bce:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <ReceiveWref+0x488>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
}
 8000bd4:	e02e      	b.n	8000c34 <ReceiveWref+0x484>
	else if(cntW == 170)
 8000bd6:	4b18      	ldr	r3, [pc, #96]	; (8000c38 <ReceiveWref+0x488>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2baa      	cmp	r3, #170	; 0xaa
 8000bdc:	d111      	bne.n	8000c02 <ReceiveWref+0x452>
		if(w[0]=='E')
 8000bde:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <ReceiveWref+0x48c>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b45      	cmp	r3, #69	; 0x45
 8000be4:	d109      	bne.n	8000bfa <ReceiveWref+0x44a>
			obstaclemode=1;
 8000be6:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <ReceiveWref+0x4b4>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000bec:	2201      	movs	r2, #1
 8000bee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bf2:	481d      	ldr	r0, [pc, #116]	; (8000c68 <ReceiveWref+0x4b8>)
 8000bf4:	f001 fd73 	bl	80026de <HAL_GPIO_WritePin>
}
 8000bf8:	e01c      	b.n	8000c34 <ReceiveWref+0x484>
			cntW = 0;
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <ReceiveWref+0x488>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
}
 8000c00:	e018      	b.n	8000c34 <ReceiveWref+0x484>
	else if(cntW == 180)
 8000c02:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <ReceiveWref+0x488>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2bb4      	cmp	r3, #180	; 0xb4
 8000c08:	d111      	bne.n	8000c2e <ReceiveWref+0x47e>
		if(w[0]=='O')
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <ReceiveWref+0x48c>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2b4f      	cmp	r3, #79	; 0x4f
 8000c10:	d109      	bne.n	8000c26 <ReceiveWref+0x476>
			obstaclemode=0;
 8000c12:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <ReceiveWref+0x4b4>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c1e:	4812      	ldr	r0, [pc, #72]	; (8000c68 <ReceiveWref+0x4b8>)
 8000c20:	f001 fd5d 	bl	80026de <HAL_GPIO_WritePin>
}
 8000c24:	e006      	b.n	8000c34 <ReceiveWref+0x484>
			cntW = 0;
 8000c26:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <ReceiveWref+0x488>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
}
 8000c2c:	e002      	b.n	8000c34 <ReceiveWref+0x484>
		cntW=0;
 8000c2e:	4b02      	ldr	r3, [pc, #8]	; (8000c38 <ReceiveWref+0x488>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	200002d8 	.word	0x200002d8
 8000c3c:	200002dc 	.word	0x200002dc
 8000c40:	20000008 	.word	0x20000008
 8000c44:	20000000 	.word	0x20000000
 8000c48:	20000001 	.word	0x20000001
 8000c4c:	2000017c 	.word	0x2000017c
 8000c50:	20000308 	.word	0x20000308
 8000c54:	200002e8 	.word	0x200002e8
 8000c58:	200002fc 	.word	0x200002fc
 8000c5c:	200002f8 	.word	0x200002f8
 8000c60:	42c80000 	.word	0x42c80000
 8000c64:	20000304 	.word	0x20000304
 8000c68:	40010c00 	.word	0x40010c00

08000c6c <TransmitWref>:

void TransmitWref()								//function that transfers the wref1 & wref2 via uart 2 to the STMs
{																// that control the motors
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
		len = sprintf(m,"sss");
 8000c70:	496a      	ldr	r1, [pc, #424]	; (8000e1c <TransmitWref+0x1b0>)
 8000c72:	486b      	ldr	r0, [pc, #428]	; (8000e20 <TransmitWref+0x1b4>)
 8000c74:	f003 fe30 	bl	80048d8 <siprintf>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	4a6a      	ldr	r2, [pc, #424]	; (8000e24 <TransmitWref+0x1b8>)
 8000c7c:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2,m,len,0xFFFF);
 8000c7e:	4b69      	ldr	r3, [pc, #420]	; (8000e24 <TransmitWref+0x1b8>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c88:	4965      	ldr	r1, [pc, #404]	; (8000e20 <TransmitWref+0x1b4>)
 8000c8a:	4867      	ldr	r0, [pc, #412]	; (8000e28 <TransmitWref+0x1bc>)
 8000c8c:	f003 f8f7 	bl	8003e7e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2,&ID1,1,0xFFFF);
 8000c90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c94:	2201      	movs	r2, #1
 8000c96:	4965      	ldr	r1, [pc, #404]	; (8000e2c <TransmitWref+0x1c0>)
 8000c98:	4863      	ldr	r0, [pc, #396]	; (8000e28 <TransmitWref+0x1bc>)
 8000c9a:	f003 f8f0 	bl	8003e7e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2,&wref1,1,0xFFFF);
 8000c9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	4962      	ldr	r1, [pc, #392]	; (8000e30 <TransmitWref+0x1c4>)
 8000ca6:	4860      	ldr	r0, [pc, #384]	; (8000e28 <TransmitWref+0x1bc>)
 8000ca8:	f003 f8e9 	bl	8003e7e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2,&wref2,1,0xFFFF);
 8000cac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	4960      	ldr	r1, [pc, #384]	; (8000e34 <TransmitWref+0x1c8>)
 8000cb4:	485c      	ldr	r0, [pc, #368]	; (8000e28 <TransmitWref+0x1bc>)
 8000cb6:	f003 f8e2 	bl	8003e7e <HAL_UART_Transmit>
		len = sprintf(m,"eee");
 8000cba:	495f      	ldr	r1, [pc, #380]	; (8000e38 <TransmitWref+0x1cc>)
 8000cbc:	4858      	ldr	r0, [pc, #352]	; (8000e20 <TransmitWref+0x1b4>)
 8000cbe:	f003 fe0b 	bl	80048d8 <siprintf>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	4a57      	ldr	r2, [pc, #348]	; (8000e24 <TransmitWref+0x1b8>)
 8000cc6:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2,m,len,0xFFFF);
 8000cc8:	4b56      	ldr	r3, [pc, #344]	; (8000e24 <TransmitWref+0x1b8>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	b29a      	uxth	r2, r3
 8000cce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cd2:	4953      	ldr	r1, [pc, #332]	; (8000e20 <TransmitWref+0x1b4>)
 8000cd4:	4854      	ldr	r0, [pc, #336]	; (8000e28 <TransmitWref+0x1bc>)
 8000cd6:	f003 f8d2 	bl	8003e7e <HAL_UART_Transmit>
		
		
		len = sprintf(m,"sss");
 8000cda:	4950      	ldr	r1, [pc, #320]	; (8000e1c <TransmitWref+0x1b0>)
 8000cdc:	4850      	ldr	r0, [pc, #320]	; (8000e20 <TransmitWref+0x1b4>)
 8000cde:	f003 fdfb 	bl	80048d8 <siprintf>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	4a4f      	ldr	r2, [pc, #316]	; (8000e24 <TransmitWref+0x1b8>)
 8000ce6:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2,m,len,0xFFFF);
 8000ce8:	4b4e      	ldr	r3, [pc, #312]	; (8000e24 <TransmitWref+0x1b8>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cf2:	494b      	ldr	r1, [pc, #300]	; (8000e20 <TransmitWref+0x1b4>)
 8000cf4:	484c      	ldr	r0, [pc, #304]	; (8000e28 <TransmitWref+0x1bc>)
 8000cf6:	f003 f8c2 	bl	8003e7e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2,&ID2,1,0xFFFF);
 8000cfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cfe:	2201      	movs	r2, #1
 8000d00:	494e      	ldr	r1, [pc, #312]	; (8000e3c <TransmitWref+0x1d0>)
 8000d02:	4849      	ldr	r0, [pc, #292]	; (8000e28 <TransmitWref+0x1bc>)
 8000d04:	f003 f8bb 	bl	8003e7e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2,&wref1,1,0xFFFF);
 8000d08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	4948      	ldr	r1, [pc, #288]	; (8000e30 <TransmitWref+0x1c4>)
 8000d10:	4845      	ldr	r0, [pc, #276]	; (8000e28 <TransmitWref+0x1bc>)
 8000d12:	f003 f8b4 	bl	8003e7e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2,&wref2,1,0xFFFF);
 8000d16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	4945      	ldr	r1, [pc, #276]	; (8000e34 <TransmitWref+0x1c8>)
 8000d1e:	4842      	ldr	r0, [pc, #264]	; (8000e28 <TransmitWref+0x1bc>)
 8000d20:	f003 f8ad 	bl	8003e7e <HAL_UART_Transmit>
		len = sprintf(m,"eee");
 8000d24:	4944      	ldr	r1, [pc, #272]	; (8000e38 <TransmitWref+0x1cc>)
 8000d26:	483e      	ldr	r0, [pc, #248]	; (8000e20 <TransmitWref+0x1b4>)
 8000d28:	f003 fdd6 	bl	80048d8 <siprintf>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	4a3d      	ldr	r2, [pc, #244]	; (8000e24 <TransmitWref+0x1b8>)
 8000d30:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2,m,len,0xFFFF);
 8000d32:	4b3c      	ldr	r3, [pc, #240]	; (8000e24 <TransmitWref+0x1b8>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d3c:	4938      	ldr	r1, [pc, #224]	; (8000e20 <TransmitWref+0x1b4>)
 8000d3e:	483a      	ldr	r0, [pc, #232]	; (8000e28 <TransmitWref+0x1bc>)
 8000d40:	f003 f89d 	bl	8003e7e <HAL_UART_Transmit>
	
	
		len = sprintf(m,"sss");
 8000d44:	4935      	ldr	r1, [pc, #212]	; (8000e1c <TransmitWref+0x1b0>)
 8000d46:	4836      	ldr	r0, [pc, #216]	; (8000e20 <TransmitWref+0x1b4>)
 8000d48:	f003 fdc6 	bl	80048d8 <siprintf>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	4a35      	ldr	r2, [pc, #212]	; (8000e24 <TransmitWref+0x1b8>)
 8000d50:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart1,m,len,0xFFFF);
 8000d52:	4b34      	ldr	r3, [pc, #208]	; (8000e24 <TransmitWref+0x1b8>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d5c:	4930      	ldr	r1, [pc, #192]	; (8000e20 <TransmitWref+0x1b4>)
 8000d5e:	4838      	ldr	r0, [pc, #224]	; (8000e40 <TransmitWref+0x1d4>)
 8000d60:	f003 f88d 	bl	8003e7e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,&ID1,1,0xFFFF);
 8000d64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d68:	2201      	movs	r2, #1
 8000d6a:	4930      	ldr	r1, [pc, #192]	; (8000e2c <TransmitWref+0x1c0>)
 8000d6c:	4834      	ldr	r0, [pc, #208]	; (8000e40 <TransmitWref+0x1d4>)
 8000d6e:	f003 f886 	bl	8003e7e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,&wref1,1,0xFFFF);
 8000d72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d76:	2201      	movs	r2, #1
 8000d78:	492d      	ldr	r1, [pc, #180]	; (8000e30 <TransmitWref+0x1c4>)
 8000d7a:	4831      	ldr	r0, [pc, #196]	; (8000e40 <TransmitWref+0x1d4>)
 8000d7c:	f003 f87f 	bl	8003e7e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,&wref2,1,0xFFFF);
 8000d80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d84:	2201      	movs	r2, #1
 8000d86:	492b      	ldr	r1, [pc, #172]	; (8000e34 <TransmitWref+0x1c8>)
 8000d88:	482d      	ldr	r0, [pc, #180]	; (8000e40 <TransmitWref+0x1d4>)
 8000d8a:	f003 f878 	bl	8003e7e <HAL_UART_Transmit>
		len = sprintf(m,"eee");
 8000d8e:	492a      	ldr	r1, [pc, #168]	; (8000e38 <TransmitWref+0x1cc>)
 8000d90:	4823      	ldr	r0, [pc, #140]	; (8000e20 <TransmitWref+0x1b4>)
 8000d92:	f003 fda1 	bl	80048d8 <siprintf>
 8000d96:	4603      	mov	r3, r0
 8000d98:	4a22      	ldr	r2, [pc, #136]	; (8000e24 <TransmitWref+0x1b8>)
 8000d9a:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart1,m,len,0xFFFF);
 8000d9c:	4b21      	ldr	r3, [pc, #132]	; (8000e24 <TransmitWref+0x1b8>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	b29a      	uxth	r2, r3
 8000da2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000da6:	491e      	ldr	r1, [pc, #120]	; (8000e20 <TransmitWref+0x1b4>)
 8000da8:	4825      	ldr	r0, [pc, #148]	; (8000e40 <TransmitWref+0x1d4>)
 8000daa:	f003 f868 	bl	8003e7e <HAL_UART_Transmit>
		
		
		len = sprintf(m,"sss");
 8000dae:	491b      	ldr	r1, [pc, #108]	; (8000e1c <TransmitWref+0x1b0>)
 8000db0:	481b      	ldr	r0, [pc, #108]	; (8000e20 <TransmitWref+0x1b4>)
 8000db2:	f003 fd91 	bl	80048d8 <siprintf>
 8000db6:	4603      	mov	r3, r0
 8000db8:	4a1a      	ldr	r2, [pc, #104]	; (8000e24 <TransmitWref+0x1b8>)
 8000dba:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart1,m,len,0xFFFF);
 8000dbc:	4b19      	ldr	r3, [pc, #100]	; (8000e24 <TransmitWref+0x1b8>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dc6:	4916      	ldr	r1, [pc, #88]	; (8000e20 <TransmitWref+0x1b4>)
 8000dc8:	481d      	ldr	r0, [pc, #116]	; (8000e40 <TransmitWref+0x1d4>)
 8000dca:	f003 f858 	bl	8003e7e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,&ID2,1,0xFFFF);
 8000dce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	4919      	ldr	r1, [pc, #100]	; (8000e3c <TransmitWref+0x1d0>)
 8000dd6:	481a      	ldr	r0, [pc, #104]	; (8000e40 <TransmitWref+0x1d4>)
 8000dd8:	f003 f851 	bl	8003e7e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,&wref1,1,0xFFFF);
 8000ddc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000de0:	2201      	movs	r2, #1
 8000de2:	4913      	ldr	r1, [pc, #76]	; (8000e30 <TransmitWref+0x1c4>)
 8000de4:	4816      	ldr	r0, [pc, #88]	; (8000e40 <TransmitWref+0x1d4>)
 8000de6:	f003 f84a 	bl	8003e7e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,&wref2,1,0xFFFF);
 8000dea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dee:	2201      	movs	r2, #1
 8000df0:	4910      	ldr	r1, [pc, #64]	; (8000e34 <TransmitWref+0x1c8>)
 8000df2:	4813      	ldr	r0, [pc, #76]	; (8000e40 <TransmitWref+0x1d4>)
 8000df4:	f003 f843 	bl	8003e7e <HAL_UART_Transmit>
		len = sprintf(m,"eee");
 8000df8:	490f      	ldr	r1, [pc, #60]	; (8000e38 <TransmitWref+0x1cc>)
 8000dfa:	4809      	ldr	r0, [pc, #36]	; (8000e20 <TransmitWref+0x1b4>)
 8000dfc:	f003 fd6c 	bl	80048d8 <siprintf>
 8000e00:	4603      	mov	r3, r0
 8000e02:	4a08      	ldr	r2, [pc, #32]	; (8000e24 <TransmitWref+0x1b8>)
 8000e04:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart1,m,len,0xFFFF);
 8000e06:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <TransmitWref+0x1b8>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e10:	4903      	ldr	r1, [pc, #12]	; (8000e20 <TransmitWref+0x1b4>)
 8000e12:	480b      	ldr	r0, [pc, #44]	; (8000e40 <TransmitWref+0x1d4>)
 8000e14:	f003 f833 	bl	8003e7e <HAL_UART_Transmit>
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	08005254 	.word	0x08005254
 8000e20:	20000088 	.word	0x20000088
 8000e24:	20000084 	.word	0x20000084
 8000e28:	20000250 	.word	0x20000250
 8000e2c:	20000002 	.word	0x20000002
 8000e30:	20000000 	.word	0x20000000
 8000e34:	20000001 	.word	0x20000001
 8000e38:	08005258 	.word	0x08005258
 8000e3c:	20000003 	.word	0x20000003
 8000e40:	2000020c 	.word	0x2000020c

08000e44 <ReceiveTablet>:



void ReceiveTablet()						// function that receives the orders from the Tablet
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&huart3,t,1,0x0005);
 8000e48:	2305      	movs	r3, #5
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	4913      	ldr	r1, [pc, #76]	; (8000e9c <ReceiveTablet+0x58>)
 8000e4e:	4814      	ldr	r0, [pc, #80]	; (8000ea0 <ReceiveTablet+0x5c>)
 8000e50:	f003 f8a7 	bl	8003fa2 <HAL_UART_Receive>

	if(cntT==0)
 8000e54:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <ReceiveTablet+0x60>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d10b      	bne.n	8000e74 <ReceiveTablet+0x30>
	{
		if(t[0]=='H')
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <ReceiveTablet+0x58>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b48      	cmp	r3, #72	; 0x48
 8000e62:	d103      	bne.n	8000e6c <ReceiveTablet+0x28>
			cntT=100;
 8000e64:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <ReceiveTablet+0x60>)
 8000e66:	2264      	movs	r2, #100	; 0x64
 8000e68:	601a      	str	r2, [r3, #0]
	}

	else
		cntT=0;

}
 8000e6a:	e014      	b.n	8000e96 <ReceiveTablet+0x52>
			cntT = 0;
 8000e6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ea4 <ReceiveTablet+0x60>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
}
 8000e72:	e010      	b.n	8000e96 <ReceiveTablet+0x52>
	else if(cntT == 100)
 8000e74:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <ReceiveTablet+0x60>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b64      	cmp	r3, #100	; 0x64
 8000e7a:	d109      	bne.n	8000e90 <ReceiveTablet+0x4c>
		arm=1;
 8000e7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <ReceiveTablet+0x64>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	601a      	str	r2, [r3, #0]
		LEDMODE = 3;
 8000e82:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <ReceiveTablet+0x68>)
 8000e84:	2203      	movs	r2, #3
 8000e86:	601a      	str	r2, [r3, #0]
		cntT=0;
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <ReceiveTablet+0x60>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
}
 8000e8e:	e002      	b.n	8000e96 <ReceiveTablet+0x52>
		cntT=0;
 8000e90:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <ReceiveTablet+0x60>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	200002e0 	.word	0x200002e0
 8000ea0:	20000294 	.word	0x20000294
 8000ea4:	200002e4 	.word	0x200002e4
 8000ea8:	200002fc 	.word	0x200002fc
 8000eac:	200002e8 	.word	0x200002e8

08000eb0 <DelayTwoSeconds>:

void DelayTwoSeconds(){						//Delay that was created using a timer to avoid HAL_Delays
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
											//that might cause problems in the interruptions
	cnt=0;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <DelayTwoSeconds+0x20>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]

	while ( cnt<100 ){
 8000eba:	bf00      	nop
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <DelayTwoSeconds+0x20>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b63      	cmp	r3, #99	; 0x63
 8000ec2:	ddfb      	ble.n	8000ebc <DelayTwoSeconds+0xc>


	}


}
 8000ec4:	bf00      	nop
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000300 	.word	0x20000300

08000ed4 <ActivateArm>:

void ActivateArm(){							//Function that Activates the movement of the arm by sending a PWM signal to the Servo
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0

	if (arm==1){
 8000ed8:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <ActivateArm+0x30>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d10e      	bne.n	8000efe <ActivateArm+0x2a>

	htim2.Instance->CCR2=125;				// Servo to position 180 degrees
 8000ee0:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <ActivateArm+0x34>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	227d      	movs	r2, #125	; 0x7d
 8000ee6:	639a      	str	r2, [r3, #56]	; 0x38
	DelayTwoSeconds();
 8000ee8:	f7ff ffe2 	bl	8000eb0 <DelayTwoSeconds>
	htim2.Instance->CCR2=25;				//Servo to position 0	degrees
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <ActivateArm+0x34>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2219      	movs	r2, #25
 8000ef2:	639a      	str	r2, [r3, #56]	; 0x38
	DelayTwoSeconds();
 8000ef4:	f7ff ffdc 	bl	8000eb0 <DelayTwoSeconds>

	arm=0;
 8000ef8:	4b02      	ldr	r3, [pc, #8]	; (8000f04 <ActivateArm+0x30>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]

	}



}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	200002fc 	.word	0x200002fc
 8000f08:	20000134 	.word	0x20000134

08000f0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f10:	f001 f806 	bl	8001f20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f14:	f000 f966 	bl	80011e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f18:	f000 fbd4 	bl	80016c4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000f1c:	f000 f9a8 	bl	8001270 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000f20:	f000 fb52 	bl	80015c8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000f24:	f000 fb7a 	bl	800161c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000f28:	f000 fa74 	bl	8001414 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f2c:	f000 fac0 	bl	80014b0 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8000f30:	f000 fb9e 	bl	8001670 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000f34:	f000 f9ec 	bl	8001310 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	// UART
__HAL_UART_ENABLE(&huart1);
 8000f38:	4b95      	ldr	r3, [pc, #596]	; (8001190 <main+0x284>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	68da      	ldr	r2, [r3, #12]
 8000f3e:	4b94      	ldr	r3, [pc, #592]	; (8001190 <main+0x284>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000f46:	60da      	str	r2, [r3, #12]
__HAL_UART_ENABLE_IT(&huart1,UART_IT_RXNE);
 8000f48:	4b91      	ldr	r3, [pc, #580]	; (8001190 <main+0x284>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	68da      	ldr	r2, [r3, #12]
 8000f4e:	4b90      	ldr	r3, [pc, #576]	; (8001190 <main+0x284>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f042 0220 	orr.w	r2, r2, #32
 8000f56:	60da      	str	r2, [r3, #12]

__HAL_UART_ENABLE(&huart3);
 8000f58:	4b8e      	ldr	r3, [pc, #568]	; (8001194 <main+0x288>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	68da      	ldr	r2, [r3, #12]
 8000f5e:	4b8d      	ldr	r3, [pc, #564]	; (8001194 <main+0x288>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000f66:	60da      	str	r2, [r3, #12]
__HAL_UART_ENABLE_IT(&huart3,UART_IT_RXNE);
 8000f68:	4b8a      	ldr	r3, [pc, #552]	; (8001194 <main+0x288>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	68da      	ldr	r2, [r3, #12]
 8000f6e:	4b89      	ldr	r3, [pc, #548]	; (8001194 <main+0x288>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f042 0220 	orr.w	r2, r2, #32
 8000f76:	60da      	str	r2, [r3, #12]


//Timer 2

__HAL_TIM_ENABLE(&htim2);
 8000f78:	4b87      	ldr	r3, [pc, #540]	; (8001198 <main+0x28c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	4b86      	ldr	r3, [pc, #536]	; (8001198 <main+0x28c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f042 0201 	orr.w	r2, r2, #1
 8000f86:	601a      	str	r2, [r3, #0]
__HAL_TIM_ENABLE_IT(&htim2,TIM_IT_UPDATE);
 8000f88:	4b83      	ldr	r3, [pc, #524]	; (8001198 <main+0x28c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	68da      	ldr	r2, [r3, #12]
 8000f8e:	4b82      	ldr	r3, [pc, #520]	; (8001198 <main+0x28c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f042 0201 	orr.w	r2, r2, #1
 8000f96:	60da      	str	r2, [r3, #12]
HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000f98:	2104      	movs	r1, #4
 8000f9a:	487f      	ldr	r0, [pc, #508]	; (8001198 <main+0x28c>)
 8000f9c:	f002 f8b4 	bl	8003108 <HAL_TIM_PWM_Start>



// Timer 1  
// for inner loop and pwm
	htim1.Instance->ARR = 7200;
 8000fa0:	4b7e      	ldr	r3, [pc, #504]	; (800119c <main+0x290>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8000fa8:	62da      	str	r2, [r3, #44]	; 0x2c
	htim1.Instance->PSC = 5000;
 8000faa:	4b7c      	ldr	r3, [pc, #496]	; (800119c <main+0x290>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fb2:	629a      	str	r2, [r3, #40]	; 0x28
	htim1.Instance->CNT=0;
 8000fb4:	4b79      	ldr	r3, [pc, #484]	; (800119c <main+0x290>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	625a      	str	r2, [r3, #36]	; 0x24
__HAL_TIM_ENABLE(&htim1);
 8000fbc:	4b77      	ldr	r3, [pc, #476]	; (800119c <main+0x290>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	4b76      	ldr	r3, [pc, #472]	; (800119c <main+0x290>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f042 0201 	orr.w	r2, r2, #1
 8000fca:	601a      	str	r2, [r3, #0]
__HAL_TIM_ENABLE_IT(&htim1,TIM_IT_UPDATE);
 8000fcc:	4b73      	ldr	r3, [pc, #460]	; (800119c <main+0x290>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	68da      	ldr	r2, [r3, #12]
 8000fd2:	4b72      	ldr	r3, [pc, #456]	; (800119c <main+0x290>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f042 0201 	orr.w	r2, r2, #1
 8000fda:	60da      	str	r2, [r3, #12]

// Timer 4
	htim4.Instance->ARR = 7200;
 8000fdc:	4b70      	ldr	r3, [pc, #448]	; (80011a0 <main+0x294>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8000fe4:	62da      	str	r2, [r3, #44]	; 0x2c
	htim4.Instance->PSC = 1;
 8000fe6:	4b6e      	ldr	r3, [pc, #440]	; (80011a0 <main+0x294>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2201      	movs	r2, #1
 8000fec:	629a      	str	r2, [r3, #40]	; 0x28
	htim4.Instance->CNT=0;
 8000fee:	4b6c      	ldr	r3, [pc, #432]	; (80011a0 <main+0x294>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	625a      	str	r2, [r3, #36]	; 0x24
__HAL_TIM_ENABLE(&htim4);
 8000ff6:	4b6a      	ldr	r3, [pc, #424]	; (80011a0 <main+0x294>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b68      	ldr	r3, [pc, #416]	; (80011a0 <main+0x294>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f042 0201 	orr.w	r2, r2, #1
 8001004:	601a      	str	r2, [r3, #0]
__HAL_TIM_ENABLE_IT(&htim4,TIM_IT_UPDATE);
 8001006:	4b66      	ldr	r3, [pc, #408]	; (80011a0 <main+0x294>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	68da      	ldr	r2, [r3, #12]
 800100c:	4b64      	ldr	r3, [pc, #400]	; (80011a0 <main+0x294>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f042 0201 	orr.w	r2, r2, #1
 8001014:	60da      	str	r2, [r3, #12]

	htim4.Instance->CCER |= (uint32_t)(TIM_CCx_ENABLE << TIM_CHANNEL_1);
 8001016:	4b62      	ldr	r3, [pc, #392]	; (80011a0 <main+0x294>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	6a1a      	ldr	r2, [r3, #32]
 800101c:	4b60      	ldr	r3, [pc, #384]	; (80011a0 <main+0x294>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f042 0201 	orr.w	r2, r2, #1
 8001024:	621a      	str	r2, [r3, #32]
	htim4.Instance->CCER |= (uint32_t)(TIM_CCx_ENABLE << TIM_CHANNEL_2);
 8001026:	4b5e      	ldr	r3, [pc, #376]	; (80011a0 <main+0x294>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	6a1a      	ldr	r2, [r3, #32]
 800102c:	4b5c      	ldr	r3, [pc, #368]	; (80011a0 <main+0x294>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f042 0210 	orr.w	r2, r2, #16
 8001034:	621a      	str	r2, [r3, #32]
	htim4.Instance->CCER |= (uint32_t)(TIM_CCx_ENABLE << TIM_CHANNEL_3);
 8001036:	4b5a      	ldr	r3, [pc, #360]	; (80011a0 <main+0x294>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	6a1a      	ldr	r2, [r3, #32]
 800103c:	4b58      	ldr	r3, [pc, #352]	; (80011a0 <main+0x294>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001044:	621a      	str	r2, [r3, #32]
	htim4.Instance->CCER |= (uint32_t)(TIM_CCx_ENABLE << TIM_CHANNEL_4);
 8001046:	4b56      	ldr	r3, [pc, #344]	; (80011a0 <main+0x294>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	6a1a      	ldr	r2, [r3, #32]
 800104c:	4b54      	ldr	r3, [pc, #336]	; (80011a0 <main+0x294>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001054:	621a      	str	r2, [r3, #32]
	
	htim4.Instance->CCR1 = 0;
 8001056:	4b52      	ldr	r3, [pc, #328]	; (80011a0 <main+0x294>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2200      	movs	r2, #0
 800105c:	635a      	str	r2, [r3, #52]	; 0x34
	htim4.Instance->CCR2 = 0;
 800105e:	4b50      	ldr	r3, [pc, #320]	; (80011a0 <main+0x294>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2200      	movs	r2, #0
 8001064:	639a      	str	r2, [r3, #56]	; 0x38
	htim4.Instance->CCR3 = 0;
 8001066:	4b4e      	ldr	r3, [pc, #312]	; (80011a0 <main+0x294>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2200      	movs	r2, #0
 800106c:	63da      	str	r2, [r3, #60]	; 0x3c
	htim4.Instance->CCR4 = 0;
 800106e:	4b4c      	ldr	r3, [pc, #304]	; (80011a0 <main+0x294>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2200      	movs	r2, #0
 8001074:	641a      	str	r2, [r3, #64]	; 0x40

// Timer 3 
	htim3.Instance->ARR = 7200;
 8001076:	4b4b      	ldr	r3, [pc, #300]	; (80011a4 <main+0x298>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 800107e:	62da      	str	r2, [r3, #44]	; 0x2c
	htim3.Instance->PSC = 50000;
 8001080:	4b48      	ldr	r3, [pc, #288]	; (80011a4 <main+0x298>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001088:	629a      	str	r2, [r3, #40]	; 0x28
	htim3.Instance->CNT=0;
 800108a:	4b46      	ldr	r3, [pc, #280]	; (80011a4 <main+0x298>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2200      	movs	r2, #0
 8001090:	625a      	str	r2, [r3, #36]	; 0x24
__HAL_TIM_ENABLE(&htim3);
 8001092:	4b44      	ldr	r3, [pc, #272]	; (80011a4 <main+0x298>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b42      	ldr	r3, [pc, #264]	; (80011a4 <main+0x298>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f042 0201 	orr.w	r2, r2, #1
 80010a0:	601a      	str	r2, [r3, #0]
__HAL_TIM_ENABLE_IT(&htim3,TIM_IT_UPDATE);
 80010a2:	4b40      	ldr	r3, [pc, #256]	; (80011a4 <main+0x298>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	68da      	ldr	r2, [r3, #12]
 80010a8:	4b3e      	ldr	r3, [pc, #248]	; (80011a4 <main+0x298>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f042 0201 	orr.w	r2, r2, #1
 80010b0:	60da      	str	r2, [r3, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {		
		if(__HAL_UART_GET_FLAG(&huart1,UART_FLAG_ORE )==1  || __HAL_UART_GET_FLAG(&huart1,UART_FLAG_NE )==1  ||__HAL_UART_GET_FLAG(&huart1,UART_FLAG_FE )==1  ||__HAL_UART_GET_FLAG(&huart1,UART_FLAG_PE )==1)
 80010b2:	4b37      	ldr	r3, [pc, #220]	; (8001190 <main+0x284>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 0308 	and.w	r3, r3, #8
 80010bc:	2b08      	cmp	r3, #8
 80010be:	d014      	beq.n	80010ea <main+0x1de>
 80010c0:	4b33      	ldr	r3, [pc, #204]	; (8001190 <main+0x284>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0304 	and.w	r3, r3, #4
 80010ca:	2b04      	cmp	r3, #4
 80010cc:	d00d      	beq.n	80010ea <main+0x1de>
 80010ce:	4b30      	ldr	r3, [pc, #192]	; (8001190 <main+0x284>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d006      	beq.n	80010ea <main+0x1de>
 80010dc:	4b2c      	ldr	r3, [pc, #176]	; (8001190 <main+0x284>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d125      	bne.n	8001136 <main+0x22a>
			{
				__HAL_UART_CLEAR_FLAG(&huart1, UART_FLAG_ORE);
 80010ea:	4b29      	ldr	r3, [pc, #164]	; (8001190 <main+0x284>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f06f 0208 	mvn.w	r2, #8
 80010f2:	601a      	str	r2, [r3, #0]
				__HAL_UART_CLEAR_FLAG(&huart1, UART_FLAG_NE);
 80010f4:	4b26      	ldr	r3, [pc, #152]	; (8001190 <main+0x284>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f06f 0204 	mvn.w	r2, #4
 80010fc:	601a      	str	r2, [r3, #0]
				__HAL_UART_CLEAR_FLAG(&huart1, UART_FLAG_FE);
 80010fe:	4b24      	ldr	r3, [pc, #144]	; (8001190 <main+0x284>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f06f 0202 	mvn.w	r2, #2
 8001106:	601a      	str	r2, [r3, #0]
				__HAL_UART_CLEAR_FLAG(&huart1, UART_FLAG_PE);
 8001108:	4b21      	ldr	r3, [pc, #132]	; (8001190 <main+0x284>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f06f 0201 	mvn.w	r2, #1
 8001110:	601a      	str	r2, [r3, #0]
				
				MX_USART1_UART_Init();
 8001112:	f000 fa59 	bl	80015c8 <MX_USART1_UART_Init>
						// UART
				__HAL_UART_ENABLE(&huart1);
 8001116:	4b1e      	ldr	r3, [pc, #120]	; (8001190 <main+0x284>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	68da      	ldr	r2, [r3, #12]
 800111c:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <main+0x284>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001124:	60da      	str	r2, [r3, #12]
				__HAL_UART_ENABLE_IT(&huart1,UART_IT_RXNE);
 8001126:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <main+0x284>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	68da      	ldr	r2, [r3, #12]
 800112c:	4b18      	ldr	r3, [pc, #96]	; (8001190 <main+0x284>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f042 0220 	orr.w	r2, r2, #32
 8001134:	60da      	str	r2, [r3, #12]
			}
		if(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_ORE )==1  || __HAL_UART_GET_FLAG(&huart3,UART_FLAG_NE )==1  ||__HAL_UART_GET_FLAG(&huart3,UART_FLAG_FE )==1  ||__HAL_UART_GET_FLAG(&huart3,UART_FLAG_PE )==1)
 8001136:	4b17      	ldr	r3, [pc, #92]	; (8001194 <main+0x288>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0308 	and.w	r3, r3, #8
 8001140:	2b08      	cmp	r3, #8
 8001142:	d014      	beq.n	800116e <main+0x262>
 8001144:	4b13      	ldr	r3, [pc, #76]	; (8001194 <main+0x288>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0304 	and.w	r3, r3, #4
 800114e:	2b04      	cmp	r3, #4
 8001150:	d00d      	beq.n	800116e <main+0x262>
 8001152:	4b10      	ldr	r3, [pc, #64]	; (8001194 <main+0x288>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0302 	and.w	r3, r3, #2
 800115c:	2b02      	cmp	r3, #2
 800115e:	d006      	beq.n	800116e <main+0x262>
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <main+0x288>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	2b01      	cmp	r3, #1
 800116c:	d133      	bne.n	80011d6 <main+0x2ca>
					{
						__HAL_UART_CLEAR_FLAG(&huart3, UART_FLAG_ORE);
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <main+0x288>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f06f 0208 	mvn.w	r2, #8
 8001176:	601a      	str	r2, [r3, #0]
						__HAL_UART_CLEAR_FLAG(&huart3, UART_FLAG_NE);
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <main+0x288>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f06f 0204 	mvn.w	r2, #4
 8001180:	601a      	str	r2, [r3, #0]
						__HAL_UART_CLEAR_FLAG(&huart3, UART_FLAG_FE);
 8001182:	4b04      	ldr	r3, [pc, #16]	; (8001194 <main+0x288>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f06f 0202 	mvn.w	r2, #2
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	e00c      	b.n	80011a8 <main+0x29c>
 800118e:	bf00      	nop
 8001190:	2000020c 	.word	0x2000020c
 8001194:	20000294 	.word	0x20000294
 8001198:	20000134 	.word	0x20000134
 800119c:	200000ec 	.word	0x200000ec
 80011a0:	200001c4 	.word	0x200001c4
 80011a4:	2000017c 	.word	0x2000017c
						__HAL_UART_CLEAR_FLAG(&huart3, UART_FLAG_PE);
 80011a8:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <main+0x2d4>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f06f 0201 	mvn.w	r2, #1
 80011b0:	601a      	str	r2, [r3, #0]

						MX_USART3_UART_Init();
 80011b2:	f000 fa5d 	bl	8001670 <MX_USART3_UART_Init>
								// UART
						__HAL_UART_ENABLE(&huart3);
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <main+0x2d4>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	68da      	ldr	r2, [r3, #12]
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <main+0x2d4>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80011c4:	60da      	str	r2, [r3, #12]
						__HAL_UART_ENABLE_IT(&huart3,UART_IT_RXNE);
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <main+0x2d4>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	68da      	ldr	r2, [r3, #12]
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <main+0x2d4>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f042 0220 	orr.w	r2, r2, #32
 80011d4:	60da      	str	r2, [r3, #12]
					}
			
		HAL_Delay(500);
 80011d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011da:	f000 ff03 	bl	8001fe4 <HAL_Delay>
		if(__HAL_UART_GET_FLAG(&huart1,UART_FLAG_ORE )==1  || __HAL_UART_GET_FLAG(&huart1,UART_FLAG_NE )==1  ||__HAL_UART_GET_FLAG(&huart1,UART_FLAG_FE )==1  ||__HAL_UART_GET_FLAG(&huart1,UART_FLAG_PE )==1)
 80011de:	e768      	b.n	80010b2 <main+0x1a6>
 80011e0:	20000294 	.word	0x20000294

080011e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b090      	sub	sp, #64	; 0x40
 80011e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ea:	f107 0318 	add.w	r3, r7, #24
 80011ee:	2228      	movs	r2, #40	; 0x28
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f003 fb90 	bl	8004918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001206:	2301      	movs	r3, #1
 8001208:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800120a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800120e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001210:	2300      	movs	r3, #0
 8001212:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001214:	2301      	movs	r3, #1
 8001216:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001218:	2302      	movs	r3, #2
 800121a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800121c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001220:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001222:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001226:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001228:	f107 0318 	add.w	r3, r7, #24
 800122c:	4618      	mov	r0, r3
 800122e:	f001 faa9 	bl	8002784 <HAL_RCC_OscConfig>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001238:	f000 fac4 	bl	80017c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800123c:	230f      	movs	r3, #15
 800123e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001240:	2302      	movs	r3, #2
 8001242:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001248:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800124c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	2102      	movs	r1, #2
 8001256:	4618      	mov	r0, r3
 8001258:	f001 fd16 	bl	8002c88 <HAL_RCC_ClockConfig>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001262:	f000 faaf 	bl	80017c4 <Error_Handler>
  }
}
 8001266:	bf00      	nop
 8001268:	3740      	adds	r7, #64	; 0x40
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001276:	f107 0308 	add.w	r3, r7, #8
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001284:	463b      	mov	r3, r7
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800128c:	4b1e      	ldr	r3, [pc, #120]	; (8001308 <MX_TIM1_Init+0x98>)
 800128e:	4a1f      	ldr	r2, [pc, #124]	; (800130c <MX_TIM1_Init+0x9c>)
 8001290:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001292:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <MX_TIM1_Init+0x98>)
 8001294:	2200      	movs	r2, #0
 8001296:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001298:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <MX_TIM1_Init+0x98>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800129e:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <MX_TIM1_Init+0x98>)
 80012a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a6:	4b18      	ldr	r3, [pc, #96]	; (8001308 <MX_TIM1_Init+0x98>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012ac:	4b16      	ldr	r3, [pc, #88]	; (8001308 <MX_TIM1_Init+0x98>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b2:	4b15      	ldr	r3, [pc, #84]	; (8001308 <MX_TIM1_Init+0x98>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012b8:	4813      	ldr	r0, [pc, #76]	; (8001308 <MX_TIM1_Init+0x98>)
 80012ba:	f001 fe7d 	bl	8002fb8 <HAL_TIM_Base_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80012c4:	f000 fa7e 	bl	80017c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012ce:	f107 0308 	add.w	r3, r7, #8
 80012d2:	4619      	mov	r1, r3
 80012d4:	480c      	ldr	r0, [pc, #48]	; (8001308 <MX_TIM1_Init+0x98>)
 80012d6:	f002 f97f 	bl	80035d8 <HAL_TIM_ConfigClockSource>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80012e0:	f000 fa70 	bl	80017c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e4:	2300      	movs	r3, #0
 80012e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e8:	2300      	movs	r3, #0
 80012ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012ec:	463b      	mov	r3, r7
 80012ee:	4619      	mov	r1, r3
 80012f0:	4805      	ldr	r0, [pc, #20]	; (8001308 <MX_TIM1_Init+0x98>)
 80012f2:	f002 fd07 	bl	8003d04 <HAL_TIMEx_MasterConfigSynchronization>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80012fc:	f000 fa62 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001300:	bf00      	nop
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	200000ec 	.word	0x200000ec
 800130c:	40012c00 	.word	0x40012c00

08001310 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08e      	sub	sp, #56	; 0x38
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001316:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001324:	f107 0320 	add.w	r3, r7, #32
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
 800133c:	615a      	str	r2, [r3, #20]
 800133e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001340:	4b33      	ldr	r3, [pc, #204]	; (8001410 <MX_TIM2_Init+0x100>)
 8001342:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001346:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1440-1;
 8001348:	4b31      	ldr	r3, [pc, #196]	; (8001410 <MX_TIM2_Init+0x100>)
 800134a:	f240 529f 	movw	r2, #1439	; 0x59f
 800134e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001350:	4b2f      	ldr	r3, [pc, #188]	; (8001410 <MX_TIM2_Init+0x100>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001356:	4b2e      	ldr	r3, [pc, #184]	; (8001410 <MX_TIM2_Init+0x100>)
 8001358:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800135c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135e:	4b2c      	ldr	r3, [pc, #176]	; (8001410 <MX_TIM2_Init+0x100>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001364:	4b2a      	ldr	r3, [pc, #168]	; (8001410 <MX_TIM2_Init+0x100>)
 8001366:	2200      	movs	r2, #0
 8001368:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800136a:	4829      	ldr	r0, [pc, #164]	; (8001410 <MX_TIM2_Init+0x100>)
 800136c:	f001 fe24 	bl	8002fb8 <HAL_TIM_Base_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001376:	f000 fa25 	bl	80017c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800137a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800137e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001380:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001384:	4619      	mov	r1, r3
 8001386:	4822      	ldr	r0, [pc, #136]	; (8001410 <MX_TIM2_Init+0x100>)
 8001388:	f002 f926 	bl	80035d8 <HAL_TIM_ConfigClockSource>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001392:	f000 fa17 	bl	80017c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001396:	481e      	ldr	r0, [pc, #120]	; (8001410 <MX_TIM2_Init+0x100>)
 8001398:	f001 fe5d 	bl	8003056 <HAL_TIM_PWM_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80013a2:	f000 fa0f 	bl	80017c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a6:	2300      	movs	r3, #0
 80013a8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013ae:	f107 0320 	add.w	r3, r7, #32
 80013b2:	4619      	mov	r1, r3
 80013b4:	4816      	ldr	r0, [pc, #88]	; (8001410 <MX_TIM2_Init+0x100>)
 80013b6:	f002 fca5 	bl	8003d04 <HAL_TIMEx_MasterConfigSynchronization>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80013c0:	f000 fa00 	bl	80017c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013c4:	2360      	movs	r3, #96	; 0x60
 80013c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	2200      	movs	r2, #0
 80013d8:	4619      	mov	r1, r3
 80013da:	480d      	ldr	r0, [pc, #52]	; (8001410 <MX_TIM2_Init+0x100>)
 80013dc:	f002 f83e 	bl	800345c <HAL_TIM_PWM_ConfigChannel>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80013e6:	f000 f9ed 	bl	80017c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	2204      	movs	r2, #4
 80013ee:	4619      	mov	r1, r3
 80013f0:	4807      	ldr	r0, [pc, #28]	; (8001410 <MX_TIM2_Init+0x100>)
 80013f2:	f002 f833 	bl	800345c <HAL_TIM_PWM_ConfigChannel>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80013fc:	f000 f9e2 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001400:	4803      	ldr	r0, [pc, #12]	; (8001410 <MX_TIM2_Init+0x100>)
 8001402:	f000 fa8f 	bl	8001924 <HAL_TIM_MspPostInit>

}
 8001406:	bf00      	nop
 8001408:	3738      	adds	r7, #56	; 0x38
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000134 	.word	0x20000134

08001414 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800141a:	f107 0308 	add.w	r3, r7, #8
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001428:	463b      	mov	r3, r7
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001430:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <MX_TIM3_Init+0x94>)
 8001432:	4a1e      	ldr	r2, [pc, #120]	; (80014ac <MX_TIM3_Init+0x98>)
 8001434:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001436:	4b1c      	ldr	r3, [pc, #112]	; (80014a8 <MX_TIM3_Init+0x94>)
 8001438:	2200      	movs	r2, #0
 800143a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143c:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <MX_TIM3_Init+0x94>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001442:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <MX_TIM3_Init+0x94>)
 8001444:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001448:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144a:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <MX_TIM3_Init+0x94>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001450:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <MX_TIM3_Init+0x94>)
 8001452:	2200      	movs	r2, #0
 8001454:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001456:	4814      	ldr	r0, [pc, #80]	; (80014a8 <MX_TIM3_Init+0x94>)
 8001458:	f001 fdae 	bl	8002fb8 <HAL_TIM_Base_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001462:	f000 f9af 	bl	80017c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001466:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800146a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800146c:	f107 0308 	add.w	r3, r7, #8
 8001470:	4619      	mov	r1, r3
 8001472:	480d      	ldr	r0, [pc, #52]	; (80014a8 <MX_TIM3_Init+0x94>)
 8001474:	f002 f8b0 	bl	80035d8 <HAL_TIM_ConfigClockSource>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800147e:	f000 f9a1 	bl	80017c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001482:	2300      	movs	r3, #0
 8001484:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001486:	2300      	movs	r3, #0
 8001488:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800148a:	463b      	mov	r3, r7
 800148c:	4619      	mov	r1, r3
 800148e:	4806      	ldr	r0, [pc, #24]	; (80014a8 <MX_TIM3_Init+0x94>)
 8001490:	f002 fc38 	bl	8003d04 <HAL_TIMEx_MasterConfigSynchronization>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800149a:	f000 f993 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800149e:	bf00      	nop
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	2000017c 	.word	0x2000017c
 80014ac:	40000400 	.word	0x40000400

080014b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08e      	sub	sp, #56	; 0x38
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c4:	f107 0320 	add.w	r3, r7, #32
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
 80014dc:	615a      	str	r2, [r3, #20]
 80014de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014e0:	4b37      	ldr	r3, [pc, #220]	; (80015c0 <MX_TIM4_Init+0x110>)
 80014e2:	4a38      	ldr	r2, [pc, #224]	; (80015c4 <MX_TIM4_Init+0x114>)
 80014e4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80014e6:	4b36      	ldr	r3, [pc, #216]	; (80015c0 <MX_TIM4_Init+0x110>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ec:	4b34      	ldr	r3, [pc, #208]	; (80015c0 <MX_TIM4_Init+0x110>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80014f2:	4b33      	ldr	r3, [pc, #204]	; (80015c0 <MX_TIM4_Init+0x110>)
 80014f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014f8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014fa:	4b31      	ldr	r3, [pc, #196]	; (80015c0 <MX_TIM4_Init+0x110>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001500:	4b2f      	ldr	r3, [pc, #188]	; (80015c0 <MX_TIM4_Init+0x110>)
 8001502:	2200      	movs	r2, #0
 8001504:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001506:	482e      	ldr	r0, [pc, #184]	; (80015c0 <MX_TIM4_Init+0x110>)
 8001508:	f001 fd56 	bl	8002fb8 <HAL_TIM_Base_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001512:	f000 f957 	bl	80017c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001516:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800151c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001520:	4619      	mov	r1, r3
 8001522:	4827      	ldr	r0, [pc, #156]	; (80015c0 <MX_TIM4_Init+0x110>)
 8001524:	f002 f858 	bl	80035d8 <HAL_TIM_ConfigClockSource>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800152e:	f000 f949 	bl	80017c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001532:	4823      	ldr	r0, [pc, #140]	; (80015c0 <MX_TIM4_Init+0x110>)
 8001534:	f001 fd8f 	bl	8003056 <HAL_TIM_PWM_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800153e:	f000 f941 	bl	80017c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001542:	2300      	movs	r3, #0
 8001544:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001546:	2300      	movs	r3, #0
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800154a:	f107 0320 	add.w	r3, r7, #32
 800154e:	4619      	mov	r1, r3
 8001550:	481b      	ldr	r0, [pc, #108]	; (80015c0 <MX_TIM4_Init+0x110>)
 8001552:	f002 fbd7 	bl	8003d04 <HAL_TIMEx_MasterConfigSynchronization>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800155c:	f000 f932 	bl	80017c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001560:	2360      	movs	r3, #96	; 0x60
 8001562:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	2200      	movs	r2, #0
 8001574:	4619      	mov	r1, r3
 8001576:	4812      	ldr	r0, [pc, #72]	; (80015c0 <MX_TIM4_Init+0x110>)
 8001578:	f001 ff70 	bl	800345c <HAL_TIM_PWM_ConfigChannel>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001582:	f000 f91f 	bl	80017c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	2204      	movs	r2, #4
 800158a:	4619      	mov	r1, r3
 800158c:	480c      	ldr	r0, [pc, #48]	; (80015c0 <MX_TIM4_Init+0x110>)
 800158e:	f001 ff65 	bl	800345c <HAL_TIM_PWM_ConfigChannel>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001598:	f000 f914 	bl	80017c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	2208      	movs	r2, #8
 80015a0:	4619      	mov	r1, r3
 80015a2:	4807      	ldr	r0, [pc, #28]	; (80015c0 <MX_TIM4_Init+0x110>)
 80015a4:	f001 ff5a 	bl	800345c <HAL_TIM_PWM_ConfigChannel>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 80015ae:	f000 f909 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80015b2:	4803      	ldr	r0, [pc, #12]	; (80015c0 <MX_TIM4_Init+0x110>)
 80015b4:	f000 f9b6 	bl	8001924 <HAL_TIM_MspPostInit>

}
 80015b8:	bf00      	nop
 80015ba:	3738      	adds	r7, #56	; 0x38
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	200001c4 	.word	0x200001c4
 80015c4:	40000800 	.word	0x40000800

080015c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015cc:	4b11      	ldr	r3, [pc, #68]	; (8001614 <MX_USART1_UART_Init+0x4c>)
 80015ce:	4a12      	ldr	r2, [pc, #72]	; (8001618 <MX_USART1_UART_Init+0x50>)
 80015d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80015d2:	4b10      	ldr	r3, [pc, #64]	; (8001614 <MX_USART1_UART_Init+0x4c>)
 80015d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015da:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <MX_USART1_UART_Init+0x4c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <MX_USART1_UART_Init+0x4c>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015e6:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <MX_USART1_UART_Init+0x4c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015ec:	4b09      	ldr	r3, [pc, #36]	; (8001614 <MX_USART1_UART_Init+0x4c>)
 80015ee:	220c      	movs	r2, #12
 80015f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015f2:	4b08      	ldr	r3, [pc, #32]	; (8001614 <MX_USART1_UART_Init+0x4c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <MX_USART1_UART_Init+0x4c>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015fe:	4805      	ldr	r0, [pc, #20]	; (8001614 <MX_USART1_UART_Init+0x4c>)
 8001600:	f002 fbf0 	bl	8003de4 <HAL_UART_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800160a:	f000 f8db 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	2000020c 	.word	0x2000020c
 8001618:	40013800 	.word	0x40013800

0800161c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001620:	4b11      	ldr	r3, [pc, #68]	; (8001668 <MX_USART2_UART_Init+0x4c>)
 8001622:	4a12      	ldr	r2, [pc, #72]	; (800166c <MX_USART2_UART_Init+0x50>)
 8001624:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <MX_USART2_UART_Init+0x4c>)
 8001628:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800162c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <MX_USART2_UART_Init+0x4c>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <MX_USART2_UART_Init+0x4c>)
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <MX_USART2_UART_Init+0x4c>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001640:	4b09      	ldr	r3, [pc, #36]	; (8001668 <MX_USART2_UART_Init+0x4c>)
 8001642:	220c      	movs	r2, #12
 8001644:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001646:	4b08      	ldr	r3, [pc, #32]	; (8001668 <MX_USART2_UART_Init+0x4c>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <MX_USART2_UART_Init+0x4c>)
 800164e:	2200      	movs	r2, #0
 8001650:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001652:	4805      	ldr	r0, [pc, #20]	; (8001668 <MX_USART2_UART_Init+0x4c>)
 8001654:	f002 fbc6 	bl	8003de4 <HAL_UART_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800165e:	f000 f8b1 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000250 	.word	0x20000250
 800166c:	40004400 	.word	0x40004400

08001670 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001674:	4b11      	ldr	r3, [pc, #68]	; (80016bc <MX_USART3_UART_Init+0x4c>)
 8001676:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <MX_USART3_UART_Init+0x50>)
 8001678:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <MX_USART3_UART_Init+0x4c>)
 800167c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001680:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <MX_USART3_UART_Init+0x4c>)
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <MX_USART3_UART_Init+0x4c>)
 800168a:	2200      	movs	r2, #0
 800168c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800168e:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <MX_USART3_UART_Init+0x4c>)
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001694:	4b09      	ldr	r3, [pc, #36]	; (80016bc <MX_USART3_UART_Init+0x4c>)
 8001696:	220c      	movs	r2, #12
 8001698:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169a:	4b08      	ldr	r3, [pc, #32]	; (80016bc <MX_USART3_UART_Init+0x4c>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <MX_USART3_UART_Init+0x4c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016a6:	4805      	ldr	r0, [pc, #20]	; (80016bc <MX_USART3_UART_Init+0x4c>)
 80016a8:	f002 fb9c 	bl	8003de4 <HAL_UART_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80016b2:	f000 f887 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000294 	.word	0x20000294
 80016c0:	40004800 	.word	0x40004800

080016c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b088      	sub	sp, #32
 80016c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ca:	f107 0310 	add.w	r3, r7, #16
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d8:	4b36      	ldr	r3, [pc, #216]	; (80017b4 <MX_GPIO_Init+0xf0>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	4a35      	ldr	r2, [pc, #212]	; (80017b4 <MX_GPIO_Init+0xf0>)
 80016de:	f043 0310 	orr.w	r3, r3, #16
 80016e2:	6193      	str	r3, [r2, #24]
 80016e4:	4b33      	ldr	r3, [pc, #204]	; (80017b4 <MX_GPIO_Init+0xf0>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f003 0310 	and.w	r3, r3, #16
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016f0:	4b30      	ldr	r3, [pc, #192]	; (80017b4 <MX_GPIO_Init+0xf0>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	4a2f      	ldr	r2, [pc, #188]	; (80017b4 <MX_GPIO_Init+0xf0>)
 80016f6:	f043 0320 	orr.w	r3, r3, #32
 80016fa:	6193      	str	r3, [r2, #24]
 80016fc:	4b2d      	ldr	r3, [pc, #180]	; (80017b4 <MX_GPIO_Init+0xf0>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f003 0320 	and.w	r3, r3, #32
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001708:	4b2a      	ldr	r3, [pc, #168]	; (80017b4 <MX_GPIO_Init+0xf0>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	4a29      	ldr	r2, [pc, #164]	; (80017b4 <MX_GPIO_Init+0xf0>)
 800170e:	f043 0304 	orr.w	r3, r3, #4
 8001712:	6193      	str	r3, [r2, #24]
 8001714:	4b27      	ldr	r3, [pc, #156]	; (80017b4 <MX_GPIO_Init+0xf0>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001720:	4b24      	ldr	r3, [pc, #144]	; (80017b4 <MX_GPIO_Init+0xf0>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	4a23      	ldr	r2, [pc, #140]	; (80017b4 <MX_GPIO_Init+0xf0>)
 8001726:	f043 0308 	orr.w	r3, r3, #8
 800172a:	6193      	str	r3, [r2, #24]
 800172c:	4b21      	ldr	r3, [pc, #132]	; (80017b4 <MX_GPIO_Init+0xf0>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	f003 0308 	and.w	r3, r3, #8
 8001734:	603b      	str	r3, [r7, #0]
 8001736:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8001738:	2200      	movs	r2, #0
 800173a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800173e:	481e      	ldr	r0, [pc, #120]	; (80017b8 <MX_GPIO_Init+0xf4>)
 8001740:	f000 ffcd 	bl	80026de <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001744:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800174a:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <MX_GPIO_Init+0xf8>)
 800174c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800174e:	2302      	movs	r3, #2
 8001750:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001752:	f107 0310 	add.w	r3, r7, #16
 8001756:	4619      	mov	r1, r3
 8001758:	4819      	ldr	r0, [pc, #100]	; (80017c0 <MX_GPIO_Init+0xfc>)
 800175a:	f000 fe25 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800175e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001762:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001764:	2301      	movs	r3, #1
 8001766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001768:	2302      	movs	r3, #2
 800176a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176c:	2302      	movs	r3, #2
 800176e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001770:	f107 0310 	add.w	r3, r7, #16
 8001774:	4619      	mov	r1, r3
 8001776:	4810      	ldr	r0, [pc, #64]	; (80017b8 <MX_GPIO_Init+0xf4>)
 8001778:	f000 fe16 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800177c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001780:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001782:	2301      	movs	r3, #1
 8001784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178a:	2302      	movs	r3, #2
 800178c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178e:	f107 0310 	add.w	r3, r7, #16
 8001792:	4619      	mov	r1, r3
 8001794:	4808      	ldr	r0, [pc, #32]	; (80017b8 <MX_GPIO_Init+0xf4>)
 8001796:	f000 fe07 	bl	80023a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2101      	movs	r1, #1
 800179e:	2017      	movs	r0, #23
 80017a0:	f000 fd1b 	bl	80021da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017a4:	2017      	movs	r0, #23
 80017a6:	f000 fd34 	bl	8002212 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017aa:	bf00      	nop
 80017ac:	3720      	adds	r7, #32
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40010c00 	.word	0x40010c00
 80017bc:	10110000 	.word	0x10110000
 80017c0:	40010800 	.word	0x40010800

080017c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c8:	b672      	cpsid	i
}
 80017ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017cc:	e7fe      	b.n	80017cc <Error_Handler+0x8>
	...

080017d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <HAL_MspInit+0x5c>)
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	4a14      	ldr	r2, [pc, #80]	; (800182c <HAL_MspInit+0x5c>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	6193      	str	r3, [r2, #24]
 80017e2:	4b12      	ldr	r3, [pc, #72]	; (800182c <HAL_MspInit+0x5c>)
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ee:	4b0f      	ldr	r3, [pc, #60]	; (800182c <HAL_MspInit+0x5c>)
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	4a0e      	ldr	r2, [pc, #56]	; (800182c <HAL_MspInit+0x5c>)
 80017f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f8:	61d3      	str	r3, [r2, #28]
 80017fa:	4b0c      	ldr	r3, [pc, #48]	; (800182c <HAL_MspInit+0x5c>)
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001806:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <HAL_MspInit+0x60>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	4a04      	ldr	r2, [pc, #16]	; (8001830 <HAL_MspInit+0x60>)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001822:	bf00      	nop
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr
 800182c:	40021000 	.word	0x40021000
 8001830:	40010000 	.word	0x40010000

08001834 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a34      	ldr	r2, [pc, #208]	; (8001914 <HAL_TIM_Base_MspInit+0xe0>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d114      	bne.n	8001870 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001846:	4b34      	ldr	r3, [pc, #208]	; (8001918 <HAL_TIM_Base_MspInit+0xe4>)
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	4a33      	ldr	r2, [pc, #204]	; (8001918 <HAL_TIM_Base_MspInit+0xe4>)
 800184c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001850:	6193      	str	r3, [r2, #24]
 8001852:	4b31      	ldr	r3, [pc, #196]	; (8001918 <HAL_TIM_Base_MspInit+0xe4>)
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 1, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	2101      	movs	r1, #1
 8001862:	2019      	movs	r0, #25
 8001864:	f000 fcb9 	bl	80021da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001868:	2019      	movs	r0, #25
 800186a:	f000 fcd2 	bl	8002212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800186e:	e04c      	b.n	800190a <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM2)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001878:	d114      	bne.n	80018a4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800187a:	4b27      	ldr	r3, [pc, #156]	; (8001918 <HAL_TIM_Base_MspInit+0xe4>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	4a26      	ldr	r2, [pc, #152]	; (8001918 <HAL_TIM_Base_MspInit+0xe4>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	61d3      	str	r3, [r2, #28]
 8001886:	4b24      	ldr	r3, [pc, #144]	; (8001918 <HAL_TIM_Base_MspInit+0xe4>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001892:	2200      	movs	r2, #0
 8001894:	2100      	movs	r1, #0
 8001896:	201c      	movs	r0, #28
 8001898:	f000 fc9f 	bl	80021da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800189c:	201c      	movs	r0, #28
 800189e:	f000 fcb8 	bl	8002212 <HAL_NVIC_EnableIRQ>
}
 80018a2:	e032      	b.n	800190a <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a1c      	ldr	r2, [pc, #112]	; (800191c <HAL_TIM_Base_MspInit+0xe8>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d114      	bne.n	80018d8 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018ae:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <HAL_TIM_Base_MspInit+0xe4>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	4a19      	ldr	r2, [pc, #100]	; (8001918 <HAL_TIM_Base_MspInit+0xe4>)
 80018b4:	f043 0302 	orr.w	r3, r3, #2
 80018b8:	61d3      	str	r3, [r2, #28]
 80018ba:	4b17      	ldr	r3, [pc, #92]	; (8001918 <HAL_TIM_Base_MspInit+0xe4>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2101      	movs	r1, #1
 80018ca:	201d      	movs	r0, #29
 80018cc:	f000 fc85 	bl	80021da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018d0:	201d      	movs	r0, #29
 80018d2:	f000 fc9e 	bl	8002212 <HAL_NVIC_EnableIRQ>
}
 80018d6:	e018      	b.n	800190a <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM4)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a10      	ldr	r2, [pc, #64]	; (8001920 <HAL_TIM_Base_MspInit+0xec>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d113      	bne.n	800190a <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018e2:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <HAL_TIM_Base_MspInit+0xe4>)
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	4a0c      	ldr	r2, [pc, #48]	; (8001918 <HAL_TIM_Base_MspInit+0xe4>)
 80018e8:	f043 0304 	orr.w	r3, r3, #4
 80018ec:	61d3      	str	r3, [r2, #28]
 80018ee:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <HAL_TIM_Base_MspInit+0xe4>)
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	f003 0304 	and.w	r3, r3, #4
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 80018fa:	2200      	movs	r2, #0
 80018fc:	2101      	movs	r1, #1
 80018fe:	201e      	movs	r0, #30
 8001900:	f000 fc6b 	bl	80021da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001904:	201e      	movs	r0, #30
 8001906:	f000 fc84 	bl	8002212 <HAL_NVIC_EnableIRQ>
}
 800190a:	bf00      	nop
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40012c00 	.word	0x40012c00
 8001918:	40021000 	.word	0x40021000
 800191c:	40000400 	.word	0x40000400
 8001920:	40000800 	.word	0x40000800

08001924 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	f107 0310 	add.w	r3, r7, #16
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001942:	d118      	bne.n	8001976 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001944:	4b1d      	ldr	r3, [pc, #116]	; (80019bc <HAL_TIM_MspPostInit+0x98>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	4a1c      	ldr	r2, [pc, #112]	; (80019bc <HAL_TIM_MspPostInit+0x98>)
 800194a:	f043 0304 	orr.w	r3, r3, #4
 800194e:	6193      	str	r3, [r2, #24]
 8001950:	4b1a      	ldr	r3, [pc, #104]	; (80019bc <HAL_TIM_MspPostInit+0x98>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800195c:	2303      	movs	r3, #3
 800195e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001960:	2302      	movs	r3, #2
 8001962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001964:	2302      	movs	r3, #2
 8001966:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001968:	f107 0310 	add.w	r3, r7, #16
 800196c:	4619      	mov	r1, r3
 800196e:	4814      	ldr	r0, [pc, #80]	; (80019c0 <HAL_TIM_MspPostInit+0x9c>)
 8001970:	f000 fd1a 	bl	80023a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001974:	e01d      	b.n	80019b2 <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM4)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a12      	ldr	r2, [pc, #72]	; (80019c4 <HAL_TIM_MspPostInit+0xa0>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d118      	bne.n	80019b2 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001980:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <HAL_TIM_MspPostInit+0x98>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	4a0d      	ldr	r2, [pc, #52]	; (80019bc <HAL_TIM_MspPostInit+0x98>)
 8001986:	f043 0308 	orr.w	r3, r3, #8
 800198a:	6193      	str	r3, [r2, #24]
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <HAL_TIM_MspPostInit+0x98>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	f003 0308 	and.w	r3, r3, #8
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001998:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800199c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	2302      	movs	r3, #2
 80019a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a2:	2302      	movs	r3, #2
 80019a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a6:	f107 0310 	add.w	r3, r7, #16
 80019aa:	4619      	mov	r1, r3
 80019ac:	4806      	ldr	r0, [pc, #24]	; (80019c8 <HAL_TIM_MspPostInit+0xa4>)
 80019ae:	f000 fcfb 	bl	80023a8 <HAL_GPIO_Init>
}
 80019b2:	bf00      	nop
 80019b4:	3720      	adds	r7, #32
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40021000 	.word	0x40021000
 80019c0:	40010800 	.word	0x40010800
 80019c4:	40000800 	.word	0x40000800
 80019c8:	40010c00 	.word	0x40010c00

080019cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08c      	sub	sp, #48	; 0x30
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	f107 0320 	add.w	r3, r7, #32
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a5f      	ldr	r2, [pc, #380]	; (8001b64 <HAL_UART_MspInit+0x198>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d13a      	bne.n	8001a62 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019ec:	4b5e      	ldr	r3, [pc, #376]	; (8001b68 <HAL_UART_MspInit+0x19c>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	4a5d      	ldr	r2, [pc, #372]	; (8001b68 <HAL_UART_MspInit+0x19c>)
 80019f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f6:	6193      	str	r3, [r2, #24]
 80019f8:	4b5b      	ldr	r3, [pc, #364]	; (8001b68 <HAL_UART_MspInit+0x19c>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a00:	61fb      	str	r3, [r7, #28]
 8001a02:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a04:	4b58      	ldr	r3, [pc, #352]	; (8001b68 <HAL_UART_MspInit+0x19c>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	4a57      	ldr	r2, [pc, #348]	; (8001b68 <HAL_UART_MspInit+0x19c>)
 8001a0a:	f043 0304 	orr.w	r3, r3, #4
 8001a0e:	6193      	str	r3, [r2, #24]
 8001a10:	4b55      	ldr	r3, [pc, #340]	; (8001b68 <HAL_UART_MspInit+0x19c>)
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	61bb      	str	r3, [r7, #24]
 8001a1a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a22:	2302      	movs	r3, #2
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a26:	2303      	movs	r3, #3
 8001a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2a:	f107 0320 	add.w	r3, r7, #32
 8001a2e:	4619      	mov	r1, r3
 8001a30:	484e      	ldr	r0, [pc, #312]	; (8001b6c <HAL_UART_MspInit+0x1a0>)
 8001a32:	f000 fcb9 	bl	80023a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a44:	f107 0320 	add.w	r3, r7, #32
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4848      	ldr	r0, [pc, #288]	; (8001b6c <HAL_UART_MspInit+0x1a0>)
 8001a4c:	f000 fcac 	bl	80023a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001a50:	2200      	movs	r2, #0
 8001a52:	2101      	movs	r1, #1
 8001a54:	2025      	movs	r0, #37	; 0x25
 8001a56:	f000 fbc0 	bl	80021da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a5a:	2025      	movs	r0, #37	; 0x25
 8001a5c:	f000 fbd9 	bl	8002212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a60:	e07c      	b.n	8001b5c <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART2)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a42      	ldr	r2, [pc, #264]	; (8001b70 <HAL_UART_MspInit+0x1a4>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d138      	bne.n	8001ade <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a6c:	4b3e      	ldr	r3, [pc, #248]	; (8001b68 <HAL_UART_MspInit+0x19c>)
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	4a3d      	ldr	r2, [pc, #244]	; (8001b68 <HAL_UART_MspInit+0x19c>)
 8001a72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a76:	61d3      	str	r3, [r2, #28]
 8001a78:	4b3b      	ldr	r3, [pc, #236]	; (8001b68 <HAL_UART_MspInit+0x19c>)
 8001a7a:	69db      	ldr	r3, [r3, #28]
 8001a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a84:	4b38      	ldr	r3, [pc, #224]	; (8001b68 <HAL_UART_MspInit+0x19c>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	4a37      	ldr	r2, [pc, #220]	; (8001b68 <HAL_UART_MspInit+0x19c>)
 8001a8a:	f043 0304 	orr.w	r3, r3, #4
 8001a8e:	6193      	str	r3, [r2, #24]
 8001a90:	4b35      	ldr	r3, [pc, #212]	; (8001b68 <HAL_UART_MspInit+0x19c>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a9c:	2304      	movs	r3, #4
 8001a9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa8:	f107 0320 	add.w	r3, r7, #32
 8001aac:	4619      	mov	r1, r3
 8001aae:	482f      	ldr	r0, [pc, #188]	; (8001b6c <HAL_UART_MspInit+0x1a0>)
 8001ab0:	f000 fc7a 	bl	80023a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ab4:	2308      	movs	r3, #8
 8001ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac0:	f107 0320 	add.w	r3, r7, #32
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4829      	ldr	r0, [pc, #164]	; (8001b6c <HAL_UART_MspInit+0x1a0>)
 8001ac8:	f000 fc6e 	bl	80023a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8001acc:	2200      	movs	r2, #0
 8001ace:	2101      	movs	r1, #1
 8001ad0:	2026      	movs	r0, #38	; 0x26
 8001ad2:	f000 fb82 	bl	80021da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ad6:	2026      	movs	r0, #38	; 0x26
 8001ad8:	f000 fb9b 	bl	8002212 <HAL_NVIC_EnableIRQ>
}
 8001adc:	e03e      	b.n	8001b5c <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART3)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a24      	ldr	r2, [pc, #144]	; (8001b74 <HAL_UART_MspInit+0x1a8>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d139      	bne.n	8001b5c <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ae8:	4b1f      	ldr	r3, [pc, #124]	; (8001b68 <HAL_UART_MspInit+0x19c>)
 8001aea:	69db      	ldr	r3, [r3, #28]
 8001aec:	4a1e      	ldr	r2, [pc, #120]	; (8001b68 <HAL_UART_MspInit+0x19c>)
 8001aee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001af2:	61d3      	str	r3, [r2, #28]
 8001af4:	4b1c      	ldr	r3, [pc, #112]	; (8001b68 <HAL_UART_MspInit+0x19c>)
 8001af6:	69db      	ldr	r3, [r3, #28]
 8001af8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b00:	4b19      	ldr	r3, [pc, #100]	; (8001b68 <HAL_UART_MspInit+0x19c>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	4a18      	ldr	r2, [pc, #96]	; (8001b68 <HAL_UART_MspInit+0x19c>)
 8001b06:	f043 0308 	orr.w	r3, r3, #8
 8001b0a:	6193      	str	r3, [r2, #24]
 8001b0c:	4b16      	ldr	r3, [pc, #88]	; (8001b68 <HAL_UART_MspInit+0x19c>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f003 0308 	and.w	r3, r3, #8
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b22:	2303      	movs	r3, #3
 8001b24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b26:	f107 0320 	add.w	r3, r7, #32
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4812      	ldr	r0, [pc, #72]	; (8001b78 <HAL_UART_MspInit+0x1ac>)
 8001b2e:	f000 fc3b 	bl	80023a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b40:	f107 0320 	add.w	r3, r7, #32
 8001b44:	4619      	mov	r1, r3
 8001b46:	480c      	ldr	r0, [pc, #48]	; (8001b78 <HAL_UART_MspInit+0x1ac>)
 8001b48:	f000 fc2e 	bl	80023a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2101      	movs	r1, #1
 8001b50:	2027      	movs	r0, #39	; 0x27
 8001b52:	f000 fb42 	bl	80021da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b56:	2027      	movs	r0, #39	; 0x27
 8001b58:	f000 fb5b 	bl	8002212 <HAL_NVIC_EnableIRQ>
}
 8001b5c:	bf00      	nop
 8001b5e:	3730      	adds	r7, #48	; 0x30
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40013800 	.word	0x40013800
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40010800 	.word	0x40010800
 8001b70:	40004400 	.word	0x40004400
 8001b74:	40004800 	.word	0x40004800
 8001b78:	40010c00 	.word	0x40010c00

08001b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b80:	e7fe      	b.n	8001b80 <NMI_Handler+0x4>

08001b82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b86:	e7fe      	b.n	8001b86 <HardFault_Handler+0x4>

08001b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b8c:	e7fe      	b.n	8001b8c <MemManage_Handler+0x4>

08001b8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b92:	e7fe      	b.n	8001b92 <BusFault_Handler+0x4>

08001b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b98:	e7fe      	b.n	8001b98 <UsageFault_Handler+0x4>

08001b9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr

08001ba6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr

08001bb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr

08001bbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bc2:	f000 f9f3 	bl	8001fac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
														// Interruption code for the pins the digital pins coming from the arduino detecting obstacles
	int F=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5);			// Every pin is associated to a zone (front , left , right , back)
 8001bd2:	2120      	movs	r1, #32
 8001bd4:	486a      	ldr	r0, [pc, #424]	; (8001d80 <EXTI9_5_IRQHandler+0x1b4>)
 8001bd6:	f000 fd6b 	bl	80026b0 <HAL_GPIO_ReadPin>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	60fb      	str	r3, [r7, #12]
	int L=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6);
 8001bde:	2140      	movs	r1, #64	; 0x40
 8001be0:	4867      	ldr	r0, [pc, #412]	; (8001d80 <EXTI9_5_IRQHandler+0x1b4>)
 8001be2:	f000 fd65 	bl	80026b0 <HAL_GPIO_ReadPin>
 8001be6:	4603      	mov	r3, r0
 8001be8:	60bb      	str	r3, [r7, #8]
	int B=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_7);
 8001bea:	2180      	movs	r1, #128	; 0x80
 8001bec:	4864      	ldr	r0, [pc, #400]	; (8001d80 <EXTI9_5_IRQHandler+0x1b4>)
 8001bee:	f000 fd5f 	bl	80026b0 <HAL_GPIO_ReadPin>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	607b      	str	r3, [r7, #4]
	int R=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8);
 8001bf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bfa:	4861      	ldr	r0, [pc, #388]	; (8001d80 <EXTI9_5_IRQHandler+0x1b4>)
 8001bfc:	f000 fd58 	bl	80026b0 <HAL_GPIO_ReadPin>
 8001c00:	4603      	mov	r3, r0
 8001c02:	603b      	str	r3, [r7, #0]

if (obstaclemode==1){		//obstacle mode =1 means it is activated through the MIT App
 8001c04:	4b5f      	ldr	r3, [pc, #380]	; (8001d84 <EXTI9_5_IRQHandler+0x1b8>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	f040 80a7 	bne.w	8001d5c <EXTI9_5_IRQHandler+0x190>

	if (direction[0]=='F'){
 8001c0e:	4b5e      	ldr	r3, [pc, #376]	; (8001d88 <EXTI9_5_IRQHandler+0x1bc>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b46      	cmp	r3, #70	; 0x46
 8001c14:	d139      	bne.n	8001c8a <EXTI9_5_IRQHandler+0xbe>
		if (direction[1]=='F'){			// if the robot is moving forward and an obstacle is detected in front then stop
 8001c16:	4b5c      	ldr	r3, [pc, #368]	; (8001d88 <EXTI9_5_IRQHandler+0x1bc>)
 8001c18:	785b      	ldrb	r3, [r3, #1]
 8001c1a:	2b46      	cmp	r3, #70	; 0x46
 8001c1c:	d10c      	bne.n	8001c38 <EXTI9_5_IRQHandler+0x6c>
			if (F==1){
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d109      	bne.n	8001c38 <EXTI9_5_IRQHandler+0x6c>

			wref1 = 0 + 64;
 8001c24:	4b59      	ldr	r3, [pc, #356]	; (8001d8c <EXTI9_5_IRQHandler+0x1c0>)
 8001c26:	2240      	movs	r2, #64	; 0x40
 8001c28:	701a      	strb	r2, [r3, #0]
			wref2 = 0  + 64;
 8001c2a:	4b59      	ldr	r3, [pc, #356]	; (8001d90 <EXTI9_5_IRQHandler+0x1c4>)
 8001c2c:	2240      	movs	r2, #64	; 0x40
 8001c2e:	701a      	strb	r2, [r3, #0]
			htim3.Instance->CNT=1;
 8001c30:	4b58      	ldr	r3, [pc, #352]	; (8001d94 <EXTI9_5_IRQHandler+0x1c8>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2201      	movs	r2, #1
 8001c36:	625a      	str	r2, [r3, #36]	; 0x24
			}
		}

		if (direction[1]=='R'){		// if the robot is moving forward right and an obstacle is seen in front or on the right then stop
 8001c38:	4b53      	ldr	r3, [pc, #332]	; (8001d88 <EXTI9_5_IRQHandler+0x1bc>)
 8001c3a:	785b      	ldrb	r3, [r3, #1]
 8001c3c:	2b52      	cmp	r3, #82	; 0x52
 8001c3e:	d10f      	bne.n	8001c60 <EXTI9_5_IRQHandler+0x94>
			if (F==1 || R==1 ){
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d002      	beq.n	8001c4c <EXTI9_5_IRQHandler+0x80>
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d109      	bne.n	8001c60 <EXTI9_5_IRQHandler+0x94>
			wref1 = 0 + 64;
 8001c4c:	4b4f      	ldr	r3, [pc, #316]	; (8001d8c <EXTI9_5_IRQHandler+0x1c0>)
 8001c4e:	2240      	movs	r2, #64	; 0x40
 8001c50:	701a      	strb	r2, [r3, #0]
			wref2 = 0  + 64;
 8001c52:	4b4f      	ldr	r3, [pc, #316]	; (8001d90 <EXTI9_5_IRQHandler+0x1c4>)
 8001c54:	2240      	movs	r2, #64	; 0x40
 8001c56:	701a      	strb	r2, [r3, #0]
			htim3.Instance->CNT=1;
 8001c58:	4b4e      	ldr	r3, [pc, #312]	; (8001d94 <EXTI9_5_IRQHandler+0x1c8>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	625a      	str	r2, [r3, #36]	; 0x24
			}
		}

		if (direction[1]=='L'){
 8001c60:	4b49      	ldr	r3, [pc, #292]	; (8001d88 <EXTI9_5_IRQHandler+0x1bc>)
 8001c62:	785b      	ldrb	r3, [r3, #1]
 8001c64:	2b4c      	cmp	r3, #76	; 0x4c
 8001c66:	d179      	bne.n	8001d5c <EXTI9_5_IRQHandler+0x190>
			if (F==1 || L==1 ){
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d002      	beq.n	8001c74 <EXTI9_5_IRQHandler+0xa8>
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d173      	bne.n	8001d5c <EXTI9_5_IRQHandler+0x190>
			wref1 = 0 + 64;
 8001c74:	4b45      	ldr	r3, [pc, #276]	; (8001d8c <EXTI9_5_IRQHandler+0x1c0>)
 8001c76:	2240      	movs	r2, #64	; 0x40
 8001c78:	701a      	strb	r2, [r3, #0]
			wref2 = 0  + 64;
 8001c7a:	4b45      	ldr	r3, [pc, #276]	; (8001d90 <EXTI9_5_IRQHandler+0x1c4>)
 8001c7c:	2240      	movs	r2, #64	; 0x40
 8001c7e:	701a      	strb	r2, [r3, #0]
			htim3.Instance->CNT=1;
 8001c80:	4b44      	ldr	r3, [pc, #272]	; (8001d94 <EXTI9_5_IRQHandler+0x1c8>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2201      	movs	r2, #1
 8001c86:	625a      	str	r2, [r3, #36]	; 0x24
 8001c88:	e068      	b.n	8001d5c <EXTI9_5_IRQHandler+0x190>
			}
		}

	}

	else if( direction[0]=='L' && direction[1]=='L'){
 8001c8a:	4b3f      	ldr	r3, [pc, #252]	; (8001d88 <EXTI9_5_IRQHandler+0x1bc>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b4c      	cmp	r3, #76	; 0x4c
 8001c90:	d111      	bne.n	8001cb6 <EXTI9_5_IRQHandler+0xea>
 8001c92:	4b3d      	ldr	r3, [pc, #244]	; (8001d88 <EXTI9_5_IRQHandler+0x1bc>)
 8001c94:	785b      	ldrb	r3, [r3, #1]
 8001c96:	2b4c      	cmp	r3, #76	; 0x4c
 8001c98:	d10d      	bne.n	8001cb6 <EXTI9_5_IRQHandler+0xea>
		if (L==1){
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d15d      	bne.n	8001d5c <EXTI9_5_IRQHandler+0x190>
			wref1 = 0 + 64;
 8001ca0:	4b3a      	ldr	r3, [pc, #232]	; (8001d8c <EXTI9_5_IRQHandler+0x1c0>)
 8001ca2:	2240      	movs	r2, #64	; 0x40
 8001ca4:	701a      	strb	r2, [r3, #0]
			wref2 = 0  + 64;
 8001ca6:	4b3a      	ldr	r3, [pc, #232]	; (8001d90 <EXTI9_5_IRQHandler+0x1c4>)
 8001ca8:	2240      	movs	r2, #64	; 0x40
 8001caa:	701a      	strb	r2, [r3, #0]
			htim3.Instance->CNT=1;
 8001cac:	4b39      	ldr	r3, [pc, #228]	; (8001d94 <EXTI9_5_IRQHandler+0x1c8>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	625a      	str	r2, [r3, #36]	; 0x24
		if (L==1){
 8001cb4:	e052      	b.n	8001d5c <EXTI9_5_IRQHandler+0x190>
		}
	}

	else if( direction[0]=='R' && direction[1]=='R'){
 8001cb6:	4b34      	ldr	r3, [pc, #208]	; (8001d88 <EXTI9_5_IRQHandler+0x1bc>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b52      	cmp	r3, #82	; 0x52
 8001cbc:	d111      	bne.n	8001ce2 <EXTI9_5_IRQHandler+0x116>
 8001cbe:	4b32      	ldr	r3, [pc, #200]	; (8001d88 <EXTI9_5_IRQHandler+0x1bc>)
 8001cc0:	785b      	ldrb	r3, [r3, #1]
 8001cc2:	2b52      	cmp	r3, #82	; 0x52
 8001cc4:	d10d      	bne.n	8001ce2 <EXTI9_5_IRQHandler+0x116>
		if (R==1){
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d147      	bne.n	8001d5c <EXTI9_5_IRQHandler+0x190>
			wref1 = 0 + 64;
 8001ccc:	4b2f      	ldr	r3, [pc, #188]	; (8001d8c <EXTI9_5_IRQHandler+0x1c0>)
 8001cce:	2240      	movs	r2, #64	; 0x40
 8001cd0:	701a      	strb	r2, [r3, #0]
			wref2 = 0  + 64;
 8001cd2:	4b2f      	ldr	r3, [pc, #188]	; (8001d90 <EXTI9_5_IRQHandler+0x1c4>)
 8001cd4:	2240      	movs	r2, #64	; 0x40
 8001cd6:	701a      	strb	r2, [r3, #0]
			htim3.Instance->CNT=1;
 8001cd8:	4b2e      	ldr	r3, [pc, #184]	; (8001d94 <EXTI9_5_IRQHandler+0x1c8>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	625a      	str	r2, [r3, #36]	; 0x24
		if (R==1){
 8001ce0:	e03c      	b.n	8001d5c <EXTI9_5_IRQHandler+0x190>
		}
	}

	else if (direction[0]=='B'){
 8001ce2:	4b29      	ldr	r3, [pc, #164]	; (8001d88 <EXTI9_5_IRQHandler+0x1bc>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b42      	cmp	r3, #66	; 0x42
 8001ce8:	d138      	bne.n	8001d5c <EXTI9_5_IRQHandler+0x190>
		if (direction[1]=='B'){
 8001cea:	4b27      	ldr	r3, [pc, #156]	; (8001d88 <EXTI9_5_IRQHandler+0x1bc>)
 8001cec:	785b      	ldrb	r3, [r3, #1]
 8001cee:	2b42      	cmp	r3, #66	; 0x42
 8001cf0:	d10c      	bne.n	8001d0c <EXTI9_5_IRQHandler+0x140>
			if (B==1){
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d109      	bne.n	8001d0c <EXTI9_5_IRQHandler+0x140>

			wref1 = 0 + 64;
 8001cf8:	4b24      	ldr	r3, [pc, #144]	; (8001d8c <EXTI9_5_IRQHandler+0x1c0>)
 8001cfa:	2240      	movs	r2, #64	; 0x40
 8001cfc:	701a      	strb	r2, [r3, #0]
			wref2 = 0  + 64;
 8001cfe:	4b24      	ldr	r3, [pc, #144]	; (8001d90 <EXTI9_5_IRQHandler+0x1c4>)
 8001d00:	2240      	movs	r2, #64	; 0x40
 8001d02:	701a      	strb	r2, [r3, #0]
			htim3.Instance->CNT=1;
 8001d04:	4b23      	ldr	r3, [pc, #140]	; (8001d94 <EXTI9_5_IRQHandler+0x1c8>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	625a      	str	r2, [r3, #36]	; 0x24
			}
		}

		if (direction[1]=='R'){
 8001d0c:	4b1e      	ldr	r3, [pc, #120]	; (8001d88 <EXTI9_5_IRQHandler+0x1bc>)
 8001d0e:	785b      	ldrb	r3, [r3, #1]
 8001d10:	2b52      	cmp	r3, #82	; 0x52
 8001d12:	d10f      	bne.n	8001d34 <EXTI9_5_IRQHandler+0x168>
			if (B==1 || R==1 ){
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d002      	beq.n	8001d20 <EXTI9_5_IRQHandler+0x154>
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d109      	bne.n	8001d34 <EXTI9_5_IRQHandler+0x168>
			wref1 = 0 + 64;
 8001d20:	4b1a      	ldr	r3, [pc, #104]	; (8001d8c <EXTI9_5_IRQHandler+0x1c0>)
 8001d22:	2240      	movs	r2, #64	; 0x40
 8001d24:	701a      	strb	r2, [r3, #0]
			wref2 = 0  + 64;
 8001d26:	4b1a      	ldr	r3, [pc, #104]	; (8001d90 <EXTI9_5_IRQHandler+0x1c4>)
 8001d28:	2240      	movs	r2, #64	; 0x40
 8001d2a:	701a      	strb	r2, [r3, #0]
			htim3.Instance->CNT=1;
 8001d2c:	4b19      	ldr	r3, [pc, #100]	; (8001d94 <EXTI9_5_IRQHandler+0x1c8>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2201      	movs	r2, #1
 8001d32:	625a      	str	r2, [r3, #36]	; 0x24
			}
		}

		if (direction[1]=='L'){
 8001d34:	4b14      	ldr	r3, [pc, #80]	; (8001d88 <EXTI9_5_IRQHandler+0x1bc>)
 8001d36:	785b      	ldrb	r3, [r3, #1]
 8001d38:	2b4c      	cmp	r3, #76	; 0x4c
 8001d3a:	d10f      	bne.n	8001d5c <EXTI9_5_IRQHandler+0x190>
			if (B==1 || L==1 ){
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d002      	beq.n	8001d48 <EXTI9_5_IRQHandler+0x17c>
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d109      	bne.n	8001d5c <EXTI9_5_IRQHandler+0x190>
			wref1 = 0 + 64;
 8001d48:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <EXTI9_5_IRQHandler+0x1c0>)
 8001d4a:	2240      	movs	r2, #64	; 0x40
 8001d4c:	701a      	strb	r2, [r3, #0]
			wref2 = 0  + 64;
 8001d4e:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <EXTI9_5_IRQHandler+0x1c4>)
 8001d50:	2240      	movs	r2, #64	; 0x40
 8001d52:	701a      	strb	r2, [r3, #0]
			htim3.Instance->CNT=1;
 8001d54:	4b0f      	ldr	r3, [pc, #60]	; (8001d94 <EXTI9_5_IRQHandler+0x1c8>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	625a      	str	r2, [r3, #36]	; 0x24

	}
};

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001d5c:	2020      	movs	r0, #32
 8001d5e:	f000 fcef 	bl	8002740 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001d62:	2040      	movs	r0, #64	; 0x40
 8001d64:	f000 fcec 	bl	8002740 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001d68:	2080      	movs	r0, #128	; 0x80
 8001d6a:	f000 fce9 	bl	8002740 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001d6e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001d72:	f000 fce5 	bl	8002740 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40010800 	.word	0x40010800
 8001d84:	20000304 	.word	0x20000304
 8001d88:	20000308 	.word	0x20000308
 8001d8c:	20000000 	.word	0x20000000
 8001d90:	20000001 	.word	0x20000001
 8001d94:	2000017c 	.word	0x2000017c

08001d98 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	TransmitWref();
 8001d9c:	f7fe ff66 	bl	8000c6c <TransmitWref>
	LEDFCN();									// every time timer 1 interrupts these functions are executed
 8001da0:	f7fe fc58 	bl	8000654 <LEDFCN>
	PumpFCN();
 8001da4:	f7fe fcf0 	bl	8000788 <PumpFCN>
	ActivateArm();
 8001da8:	f7ff f894 	bl	8000ed4 <ActivateArm>

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001dac:	4802      	ldr	r0, [pc, #8]	; (8001db8 <TIM1_UP_IRQHandler+0x20>)
 8001dae:	f001 fa4d 	bl	800324c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	200000ec 	.word	0x200000ec

08001dbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	cnt++;
 8001dc0:	4b04      	ldr	r3, [pc, #16]	; (8001dd4 <TIM2_IRQHandler+0x18>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	4a03      	ldr	r2, [pc, #12]	; (8001dd4 <TIM2_IRQHandler+0x18>)
 8001dc8:	6013      	str	r3, [r2, #0]


  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001dca:	4803      	ldr	r0, [pc, #12]	; (8001dd8 <TIM2_IRQHandler+0x1c>)
 8001dcc:	f001 fa3e 	bl	800324c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001dd0:	bf00      	nop
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20000300 	.word	0x20000300
 8001dd8:	20000134 	.word	0x20000134

08001ddc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

	wref1 = 0 + 64;								// after 5 seconds of moving the speed of the motor returns to 0
 8001de0:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <TIM3_IRQHandler+0x1c>)
 8001de2:	2240      	movs	r2, #64	; 0x40
 8001de4:	701a      	strb	r2, [r3, #0]
	wref2 = 0  + 64;
 8001de6:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <TIM3_IRQHandler+0x20>)
 8001de8:	2240      	movs	r2, #64	; 0x40
 8001dea:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001dec:	4804      	ldr	r0, [pc, #16]	; (8001e00 <TIM3_IRQHandler+0x24>)
 8001dee:	f001 fa2d 	bl	800324c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20000000 	.word	0x20000000
 8001dfc:	20000001 	.word	0x20000001
 8001e00:	2000017c 	.word	0x2000017c

08001e04 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e08:	4802      	ldr	r0, [pc, #8]	; (8001e14 <TIM4_IRQHandler+0x10>)
 8001e0a:	f001 fa1f 	bl	800324c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	200001c4 	.word	0x200001c4

08001e18 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	ReceiveWref();
 8001e1c:	f7fe fcc8 	bl	80007b0 <ReceiveWref>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e20:	4802      	ldr	r0, [pc, #8]	; (8001e2c <USART1_IRQHandler+0x14>)
 8001e22:	f002 f961 	bl	80040e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	2000020c 	.word	0x2000020c

08001e30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e34:	4802      	ldr	r0, [pc, #8]	; (8001e40 <USART2_IRQHandler+0x10>)
 8001e36:	f002 f957 	bl	80040e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000250 	.word	0x20000250

08001e44 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	ReceiveTablet();
 8001e48:	f7fe fffc 	bl	8000e44 <ReceiveTablet>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e4c:	4802      	ldr	r0, [pc, #8]	; (8001e58 <USART3_IRQHandler+0x14>)
 8001e4e:	f002 f94b 	bl	80040e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000294 	.word	0x20000294

08001e5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e64:	4a14      	ldr	r2, [pc, #80]	; (8001eb8 <_sbrk+0x5c>)
 8001e66:	4b15      	ldr	r3, [pc, #84]	; (8001ebc <_sbrk+0x60>)
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e70:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <_sbrk+0x64>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d102      	bne.n	8001e7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e78:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <_sbrk+0x64>)
 8001e7a:	4a12      	ldr	r2, [pc, #72]	; (8001ec4 <_sbrk+0x68>)
 8001e7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e7e:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <_sbrk+0x64>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d207      	bcs.n	8001e9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e8c:	f002 fd4c 	bl	8004928 <__errno>
 8001e90:	4603      	mov	r3, r0
 8001e92:	220c      	movs	r2, #12
 8001e94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e96:	f04f 33ff 	mov.w	r3, #4294967295
 8001e9a:	e009      	b.n	8001eb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e9c:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <_sbrk+0x64>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ea2:	4b07      	ldr	r3, [pc, #28]	; (8001ec0 <_sbrk+0x64>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	4a05      	ldr	r2, [pc, #20]	; (8001ec0 <_sbrk+0x64>)
 8001eac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eae:	68fb      	ldr	r3, [r7, #12]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	20005000 	.word	0x20005000
 8001ebc:	00000400 	.word	0x00000400
 8001ec0:	2000030c 	.word	0x2000030c
 8001ec4:	20000460 	.word	0x20000460

08001ec8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr

08001ed4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ed4:	480c      	ldr	r0, [pc, #48]	; (8001f08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ed6:	490d      	ldr	r1, [pc, #52]	; (8001f0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ed8:	4a0d      	ldr	r2, [pc, #52]	; (8001f10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001eda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001edc:	e002      	b.n	8001ee4 <LoopCopyDataInit>

08001ede <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ede:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ee0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ee2:	3304      	adds	r3, #4

08001ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ee4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ee6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee8:	d3f9      	bcc.n	8001ede <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eea:	4a0a      	ldr	r2, [pc, #40]	; (8001f14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001eec:	4c0a      	ldr	r4, [pc, #40]	; (8001f18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001eee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ef0:	e001      	b.n	8001ef6 <LoopFillZerobss>

08001ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ef2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ef4:	3204      	adds	r2, #4

08001ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ef6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef8:	d3fb      	bcc.n	8001ef2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001efa:	f7ff ffe5 	bl	8001ec8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001efe:	f002 fd19 	bl	8004934 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f02:	f7ff f803 	bl	8000f0c <main>
  bx lr
 8001f06:	4770      	bx	lr
  ldr r0, =_sdata
 8001f08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f0c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001f10:	080052c0 	.word	0x080052c0
  ldr r2, =_sbss
 8001f14:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001f18:	2000045c 	.word	0x2000045c

08001f1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f1c:	e7fe      	b.n	8001f1c <ADC1_2_IRQHandler>
	...

08001f20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f24:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <HAL_Init+0x28>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a07      	ldr	r2, [pc, #28]	; (8001f48 <HAL_Init+0x28>)
 8001f2a:	f043 0310 	orr.w	r3, r3, #16
 8001f2e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f30:	2003      	movs	r0, #3
 8001f32:	f000 f947 	bl	80021c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f36:	200f      	movs	r0, #15
 8001f38:	f000 f808 	bl	8001f4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f3c:	f7ff fc48 	bl	80017d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40022000 	.word	0x40022000

08001f4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f54:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <HAL_InitTick+0x54>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <HAL_InitTick+0x58>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 f95f 	bl	800222e <HAL_SYSTICK_Config>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e00e      	b.n	8001f98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b0f      	cmp	r3, #15
 8001f7e:	d80a      	bhi.n	8001f96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f80:	2200      	movs	r2, #0
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	f04f 30ff 	mov.w	r0, #4294967295
 8001f88:	f000 f927 	bl	80021da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f8c:	4a06      	ldr	r2, [pc, #24]	; (8001fa8 <HAL_InitTick+0x5c>)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
 8001f94:	e000      	b.n	8001f98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	2000000c 	.word	0x2000000c
 8001fa4:	20000014 	.word	0x20000014
 8001fa8:	20000010 	.word	0x20000010

08001fac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fb0:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <HAL_IncTick+0x1c>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <HAL_IncTick+0x20>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4413      	add	r3, r2
 8001fbc:	4a03      	ldr	r2, [pc, #12]	; (8001fcc <HAL_IncTick+0x20>)
 8001fbe:	6013      	str	r3, [r2, #0]
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr
 8001fc8:	20000014 	.word	0x20000014
 8001fcc:	20000310 	.word	0x20000310

08001fd0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd4:	4b02      	ldr	r3, [pc, #8]	; (8001fe0 <HAL_GetTick+0x10>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr
 8001fe0:	20000310 	.word	0x20000310

08001fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fec:	f7ff fff0 	bl	8001fd0 <HAL_GetTick>
 8001ff0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ffc:	d005      	beq.n	800200a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ffe:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <HAL_Delay+0x44>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	461a      	mov	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4413      	add	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800200a:	bf00      	nop
 800200c:	f7ff ffe0 	bl	8001fd0 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	429a      	cmp	r2, r3
 800201a:	d8f7      	bhi.n	800200c <HAL_Delay+0x28>
  {
  }
}
 800201c:	bf00      	nop
 800201e:	bf00      	nop
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000014 	.word	0x20000014

0800202c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800203c:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <__NVIC_SetPriorityGrouping+0x44>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002048:	4013      	ands	r3, r2
 800204a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800205c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800205e:	4a04      	ldr	r2, [pc, #16]	; (8002070 <__NVIC_SetPriorityGrouping+0x44>)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	60d3      	str	r3, [r2, #12]
}
 8002064:	bf00      	nop
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002078:	4b04      	ldr	r3, [pc, #16]	; (800208c <__NVIC_GetPriorityGrouping+0x18>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	0a1b      	lsrs	r3, r3, #8
 800207e:	f003 0307 	and.w	r3, r3, #7
}
 8002082:	4618      	mov	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	db0b      	blt.n	80020ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020a2:	79fb      	ldrb	r3, [r7, #7]
 80020a4:	f003 021f 	and.w	r2, r3, #31
 80020a8:	4906      	ldr	r1, [pc, #24]	; (80020c4 <__NVIC_EnableIRQ+0x34>)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	095b      	lsrs	r3, r3, #5
 80020b0:	2001      	movs	r0, #1
 80020b2:	fa00 f202 	lsl.w	r2, r0, r2
 80020b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr
 80020c4:	e000e100 	.word	0xe000e100

080020c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	6039      	str	r1, [r7, #0]
 80020d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	db0a      	blt.n	80020f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	490c      	ldr	r1, [pc, #48]	; (8002114 <__NVIC_SetPriority+0x4c>)
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	0112      	lsls	r2, r2, #4
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	440b      	add	r3, r1
 80020ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020f0:	e00a      	b.n	8002108 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	4908      	ldr	r1, [pc, #32]	; (8002118 <__NVIC_SetPriority+0x50>)
 80020f8:	79fb      	ldrb	r3, [r7, #7]
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	3b04      	subs	r3, #4
 8002100:	0112      	lsls	r2, r2, #4
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	440b      	add	r3, r1
 8002106:	761a      	strb	r2, [r3, #24]
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	e000e100 	.word	0xe000e100
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800211c:	b480      	push	{r7}
 800211e:	b089      	sub	sp, #36	; 0x24
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f1c3 0307 	rsb	r3, r3, #7
 8002136:	2b04      	cmp	r3, #4
 8002138:	bf28      	it	cs
 800213a:	2304      	movcs	r3, #4
 800213c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3304      	adds	r3, #4
 8002142:	2b06      	cmp	r3, #6
 8002144:	d902      	bls.n	800214c <NVIC_EncodePriority+0x30>
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	3b03      	subs	r3, #3
 800214a:	e000      	b.n	800214e <NVIC_EncodePriority+0x32>
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002150:	f04f 32ff 	mov.w	r2, #4294967295
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43da      	mvns	r2, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	401a      	ands	r2, r3
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002164:	f04f 31ff 	mov.w	r1, #4294967295
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	fa01 f303 	lsl.w	r3, r1, r3
 800216e:	43d9      	mvns	r1, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002174:	4313      	orrs	r3, r2
         );
}
 8002176:	4618      	mov	r0, r3
 8002178:	3724      	adds	r7, #36	; 0x24
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr

08002180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3b01      	subs	r3, #1
 800218c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002190:	d301      	bcc.n	8002196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002192:	2301      	movs	r3, #1
 8002194:	e00f      	b.n	80021b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002196:	4a0a      	ldr	r2, [pc, #40]	; (80021c0 <SysTick_Config+0x40>)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3b01      	subs	r3, #1
 800219c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800219e:	210f      	movs	r1, #15
 80021a0:	f04f 30ff 	mov.w	r0, #4294967295
 80021a4:	f7ff ff90 	bl	80020c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021a8:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <SysTick_Config+0x40>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ae:	4b04      	ldr	r3, [pc, #16]	; (80021c0 <SysTick_Config+0x40>)
 80021b0:	2207      	movs	r2, #7
 80021b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	e000e010 	.word	0xe000e010

080021c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7ff ff2d 	bl	800202c <__NVIC_SetPriorityGrouping>
}
 80021d2:	bf00      	nop
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021da:	b580      	push	{r7, lr}
 80021dc:	b086      	sub	sp, #24
 80021de:	af00      	add	r7, sp, #0
 80021e0:	4603      	mov	r3, r0
 80021e2:	60b9      	str	r1, [r7, #8]
 80021e4:	607a      	str	r2, [r7, #4]
 80021e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021ec:	f7ff ff42 	bl	8002074 <__NVIC_GetPriorityGrouping>
 80021f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	68b9      	ldr	r1, [r7, #8]
 80021f6:	6978      	ldr	r0, [r7, #20]
 80021f8:	f7ff ff90 	bl	800211c <NVIC_EncodePriority>
 80021fc:	4602      	mov	r2, r0
 80021fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002202:	4611      	mov	r1, r2
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff ff5f 	bl	80020c8 <__NVIC_SetPriority>
}
 800220a:	bf00      	nop
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	4603      	mov	r3, r0
 800221a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800221c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff ff35 	bl	8002090 <__NVIC_EnableIRQ>
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b082      	sub	sp, #8
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7ff ffa2 	bl	8002180 <SysTick_Config>
 800223c:	4603      	mov	r3, r0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002246:	b480      	push	{r7}
 8002248:	b085      	sub	sp, #20
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800224e:	2300      	movs	r3, #0
 8002250:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002258:	2b02      	cmp	r3, #2
 800225a:	d008      	beq.n	800226e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2204      	movs	r2, #4
 8002260:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e020      	b.n	80022b0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 020e 	bic.w	r2, r2, #14
 800227c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0201 	bic.w	r2, r2, #1
 800228c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002296:	2101      	movs	r1, #1
 8002298:	fa01 f202 	lsl.w	r2, r1, r2
 800229c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bc80      	pop	{r7}
 80022b8:	4770      	bx	lr
	...

080022bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022c4:	2300      	movs	r3, #0
 80022c6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d005      	beq.n	80022de <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2204      	movs	r2, #4
 80022d6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	73fb      	strb	r3, [r7, #15]
 80022dc:	e051      	b.n	8002382 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 020e 	bic.w	r2, r2, #14
 80022ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 0201 	bic.w	r2, r2, #1
 80022fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a22      	ldr	r2, [pc, #136]	; (800238c <HAL_DMA_Abort_IT+0xd0>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d029      	beq.n	800235c <HAL_DMA_Abort_IT+0xa0>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a20      	ldr	r2, [pc, #128]	; (8002390 <HAL_DMA_Abort_IT+0xd4>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d022      	beq.n	8002358 <HAL_DMA_Abort_IT+0x9c>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a1f      	ldr	r2, [pc, #124]	; (8002394 <HAL_DMA_Abort_IT+0xd8>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d01a      	beq.n	8002352 <HAL_DMA_Abort_IT+0x96>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a1d      	ldr	r2, [pc, #116]	; (8002398 <HAL_DMA_Abort_IT+0xdc>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d012      	beq.n	800234c <HAL_DMA_Abort_IT+0x90>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a1c      	ldr	r2, [pc, #112]	; (800239c <HAL_DMA_Abort_IT+0xe0>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d00a      	beq.n	8002346 <HAL_DMA_Abort_IT+0x8a>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a1a      	ldr	r2, [pc, #104]	; (80023a0 <HAL_DMA_Abort_IT+0xe4>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d102      	bne.n	8002340 <HAL_DMA_Abort_IT+0x84>
 800233a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800233e:	e00e      	b.n	800235e <HAL_DMA_Abort_IT+0xa2>
 8002340:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002344:	e00b      	b.n	800235e <HAL_DMA_Abort_IT+0xa2>
 8002346:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800234a:	e008      	b.n	800235e <HAL_DMA_Abort_IT+0xa2>
 800234c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002350:	e005      	b.n	800235e <HAL_DMA_Abort_IT+0xa2>
 8002352:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002356:	e002      	b.n	800235e <HAL_DMA_Abort_IT+0xa2>
 8002358:	2310      	movs	r3, #16
 800235a:	e000      	b.n	800235e <HAL_DMA_Abort_IT+0xa2>
 800235c:	2301      	movs	r3, #1
 800235e:	4a11      	ldr	r2, [pc, #68]	; (80023a4 <HAL_DMA_Abort_IT+0xe8>)
 8002360:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	4798      	blx	r3
    } 
  }
  return status;
 8002382:	7bfb      	ldrb	r3, [r7, #15]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40020008 	.word	0x40020008
 8002390:	4002001c 	.word	0x4002001c
 8002394:	40020030 	.word	0x40020030
 8002398:	40020044 	.word	0x40020044
 800239c:	40020058 	.word	0x40020058
 80023a0:	4002006c 	.word	0x4002006c
 80023a4:	40020000 	.word	0x40020000

080023a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b08b      	sub	sp, #44	; 0x2c
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023b2:	2300      	movs	r3, #0
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80023b6:	2300      	movs	r3, #0
 80023b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ba:	e169      	b.n	8002690 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80023bc:	2201      	movs	r2, #1
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	69fa      	ldr	r2, [r7, #28]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	f040 8158 	bne.w	800268a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	4a9a      	ldr	r2, [pc, #616]	; (8002648 <HAL_GPIO_Init+0x2a0>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d05e      	beq.n	80024a2 <HAL_GPIO_Init+0xfa>
 80023e4:	4a98      	ldr	r2, [pc, #608]	; (8002648 <HAL_GPIO_Init+0x2a0>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d875      	bhi.n	80024d6 <HAL_GPIO_Init+0x12e>
 80023ea:	4a98      	ldr	r2, [pc, #608]	; (800264c <HAL_GPIO_Init+0x2a4>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d058      	beq.n	80024a2 <HAL_GPIO_Init+0xfa>
 80023f0:	4a96      	ldr	r2, [pc, #600]	; (800264c <HAL_GPIO_Init+0x2a4>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d86f      	bhi.n	80024d6 <HAL_GPIO_Init+0x12e>
 80023f6:	4a96      	ldr	r2, [pc, #600]	; (8002650 <HAL_GPIO_Init+0x2a8>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d052      	beq.n	80024a2 <HAL_GPIO_Init+0xfa>
 80023fc:	4a94      	ldr	r2, [pc, #592]	; (8002650 <HAL_GPIO_Init+0x2a8>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d869      	bhi.n	80024d6 <HAL_GPIO_Init+0x12e>
 8002402:	4a94      	ldr	r2, [pc, #592]	; (8002654 <HAL_GPIO_Init+0x2ac>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d04c      	beq.n	80024a2 <HAL_GPIO_Init+0xfa>
 8002408:	4a92      	ldr	r2, [pc, #584]	; (8002654 <HAL_GPIO_Init+0x2ac>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d863      	bhi.n	80024d6 <HAL_GPIO_Init+0x12e>
 800240e:	4a92      	ldr	r2, [pc, #584]	; (8002658 <HAL_GPIO_Init+0x2b0>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d046      	beq.n	80024a2 <HAL_GPIO_Init+0xfa>
 8002414:	4a90      	ldr	r2, [pc, #576]	; (8002658 <HAL_GPIO_Init+0x2b0>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d85d      	bhi.n	80024d6 <HAL_GPIO_Init+0x12e>
 800241a:	2b12      	cmp	r3, #18
 800241c:	d82a      	bhi.n	8002474 <HAL_GPIO_Init+0xcc>
 800241e:	2b12      	cmp	r3, #18
 8002420:	d859      	bhi.n	80024d6 <HAL_GPIO_Init+0x12e>
 8002422:	a201      	add	r2, pc, #4	; (adr r2, 8002428 <HAL_GPIO_Init+0x80>)
 8002424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002428:	080024a3 	.word	0x080024a3
 800242c:	0800247d 	.word	0x0800247d
 8002430:	0800248f 	.word	0x0800248f
 8002434:	080024d1 	.word	0x080024d1
 8002438:	080024d7 	.word	0x080024d7
 800243c:	080024d7 	.word	0x080024d7
 8002440:	080024d7 	.word	0x080024d7
 8002444:	080024d7 	.word	0x080024d7
 8002448:	080024d7 	.word	0x080024d7
 800244c:	080024d7 	.word	0x080024d7
 8002450:	080024d7 	.word	0x080024d7
 8002454:	080024d7 	.word	0x080024d7
 8002458:	080024d7 	.word	0x080024d7
 800245c:	080024d7 	.word	0x080024d7
 8002460:	080024d7 	.word	0x080024d7
 8002464:	080024d7 	.word	0x080024d7
 8002468:	080024d7 	.word	0x080024d7
 800246c:	08002485 	.word	0x08002485
 8002470:	08002499 	.word	0x08002499
 8002474:	4a79      	ldr	r2, [pc, #484]	; (800265c <HAL_GPIO_Init+0x2b4>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d013      	beq.n	80024a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800247a:	e02c      	b.n	80024d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	623b      	str	r3, [r7, #32]
          break;
 8002482:	e029      	b.n	80024d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	3304      	adds	r3, #4
 800248a:	623b      	str	r3, [r7, #32]
          break;
 800248c:	e024      	b.n	80024d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	3308      	adds	r3, #8
 8002494:	623b      	str	r3, [r7, #32]
          break;
 8002496:	e01f      	b.n	80024d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	330c      	adds	r3, #12
 800249e:	623b      	str	r3, [r7, #32]
          break;
 80024a0:	e01a      	b.n	80024d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d102      	bne.n	80024b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80024aa:	2304      	movs	r3, #4
 80024ac:	623b      	str	r3, [r7, #32]
          break;
 80024ae:	e013      	b.n	80024d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d105      	bne.n	80024c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024b8:	2308      	movs	r3, #8
 80024ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69fa      	ldr	r2, [r7, #28]
 80024c0:	611a      	str	r2, [r3, #16]
          break;
 80024c2:	e009      	b.n	80024d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024c4:	2308      	movs	r3, #8
 80024c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	69fa      	ldr	r2, [r7, #28]
 80024cc:	615a      	str	r2, [r3, #20]
          break;
 80024ce:	e003      	b.n	80024d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024d0:	2300      	movs	r3, #0
 80024d2:	623b      	str	r3, [r7, #32]
          break;
 80024d4:	e000      	b.n	80024d8 <HAL_GPIO_Init+0x130>
          break;
 80024d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	2bff      	cmp	r3, #255	; 0xff
 80024dc:	d801      	bhi.n	80024e2 <HAL_GPIO_Init+0x13a>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	e001      	b.n	80024e6 <HAL_GPIO_Init+0x13e>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3304      	adds	r3, #4
 80024e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	2bff      	cmp	r3, #255	; 0xff
 80024ec:	d802      	bhi.n	80024f4 <HAL_GPIO_Init+0x14c>
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	e002      	b.n	80024fa <HAL_GPIO_Init+0x152>
 80024f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f6:	3b08      	subs	r3, #8
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	210f      	movs	r1, #15
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	fa01 f303 	lsl.w	r3, r1, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	401a      	ands	r2, r3
 800250c:	6a39      	ldr	r1, [r7, #32]
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	fa01 f303 	lsl.w	r3, r1, r3
 8002514:	431a      	orrs	r2, r3
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 80b1 	beq.w	800268a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002528:	4b4d      	ldr	r3, [pc, #308]	; (8002660 <HAL_GPIO_Init+0x2b8>)
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	4a4c      	ldr	r2, [pc, #304]	; (8002660 <HAL_GPIO_Init+0x2b8>)
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	6193      	str	r3, [r2, #24]
 8002534:	4b4a      	ldr	r3, [pc, #296]	; (8002660 <HAL_GPIO_Init+0x2b8>)
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	60bb      	str	r3, [r7, #8]
 800253e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002540:	4a48      	ldr	r2, [pc, #288]	; (8002664 <HAL_GPIO_Init+0x2bc>)
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	089b      	lsrs	r3, r3, #2
 8002546:	3302      	adds	r3, #2
 8002548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800254c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	f003 0303 	and.w	r3, r3, #3
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	220f      	movs	r2, #15
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	4013      	ands	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a40      	ldr	r2, [pc, #256]	; (8002668 <HAL_GPIO_Init+0x2c0>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d013      	beq.n	8002594 <HAL_GPIO_Init+0x1ec>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a3f      	ldr	r2, [pc, #252]	; (800266c <HAL_GPIO_Init+0x2c4>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d00d      	beq.n	8002590 <HAL_GPIO_Init+0x1e8>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a3e      	ldr	r2, [pc, #248]	; (8002670 <HAL_GPIO_Init+0x2c8>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d007      	beq.n	800258c <HAL_GPIO_Init+0x1e4>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a3d      	ldr	r2, [pc, #244]	; (8002674 <HAL_GPIO_Init+0x2cc>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d101      	bne.n	8002588 <HAL_GPIO_Init+0x1e0>
 8002584:	2303      	movs	r3, #3
 8002586:	e006      	b.n	8002596 <HAL_GPIO_Init+0x1ee>
 8002588:	2304      	movs	r3, #4
 800258a:	e004      	b.n	8002596 <HAL_GPIO_Init+0x1ee>
 800258c:	2302      	movs	r3, #2
 800258e:	e002      	b.n	8002596 <HAL_GPIO_Init+0x1ee>
 8002590:	2301      	movs	r3, #1
 8002592:	e000      	b.n	8002596 <HAL_GPIO_Init+0x1ee>
 8002594:	2300      	movs	r3, #0
 8002596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002598:	f002 0203 	and.w	r2, r2, #3
 800259c:	0092      	lsls	r2, r2, #2
 800259e:	4093      	lsls	r3, r2
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80025a6:	492f      	ldr	r1, [pc, #188]	; (8002664 <HAL_GPIO_Init+0x2bc>)
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	089b      	lsrs	r3, r3, #2
 80025ac:	3302      	adds	r3, #2
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d006      	beq.n	80025ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025c0:	4b2d      	ldr	r3, [pc, #180]	; (8002678 <HAL_GPIO_Init+0x2d0>)
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	492c      	ldr	r1, [pc, #176]	; (8002678 <HAL_GPIO_Init+0x2d0>)
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	600b      	str	r3, [r1, #0]
 80025cc:	e006      	b.n	80025dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025ce:	4b2a      	ldr	r3, [pc, #168]	; (8002678 <HAL_GPIO_Init+0x2d0>)
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	43db      	mvns	r3, r3
 80025d6:	4928      	ldr	r1, [pc, #160]	; (8002678 <HAL_GPIO_Init+0x2d0>)
 80025d8:	4013      	ands	r3, r2
 80025da:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d006      	beq.n	80025f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025e8:	4b23      	ldr	r3, [pc, #140]	; (8002678 <HAL_GPIO_Init+0x2d0>)
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	4922      	ldr	r1, [pc, #136]	; (8002678 <HAL_GPIO_Init+0x2d0>)
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	604b      	str	r3, [r1, #4]
 80025f4:	e006      	b.n	8002604 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025f6:	4b20      	ldr	r3, [pc, #128]	; (8002678 <HAL_GPIO_Init+0x2d0>)
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	43db      	mvns	r3, r3
 80025fe:	491e      	ldr	r1, [pc, #120]	; (8002678 <HAL_GPIO_Init+0x2d0>)
 8002600:	4013      	ands	r3, r2
 8002602:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d006      	beq.n	800261e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002610:	4b19      	ldr	r3, [pc, #100]	; (8002678 <HAL_GPIO_Init+0x2d0>)
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	4918      	ldr	r1, [pc, #96]	; (8002678 <HAL_GPIO_Init+0x2d0>)
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	4313      	orrs	r3, r2
 800261a:	608b      	str	r3, [r1, #8]
 800261c:	e006      	b.n	800262c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800261e:	4b16      	ldr	r3, [pc, #88]	; (8002678 <HAL_GPIO_Init+0x2d0>)
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	43db      	mvns	r3, r3
 8002626:	4914      	ldr	r1, [pc, #80]	; (8002678 <HAL_GPIO_Init+0x2d0>)
 8002628:	4013      	ands	r3, r2
 800262a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d021      	beq.n	800267c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002638:	4b0f      	ldr	r3, [pc, #60]	; (8002678 <HAL_GPIO_Init+0x2d0>)
 800263a:	68da      	ldr	r2, [r3, #12]
 800263c:	490e      	ldr	r1, [pc, #56]	; (8002678 <HAL_GPIO_Init+0x2d0>)
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	4313      	orrs	r3, r2
 8002642:	60cb      	str	r3, [r1, #12]
 8002644:	e021      	b.n	800268a <HAL_GPIO_Init+0x2e2>
 8002646:	bf00      	nop
 8002648:	10320000 	.word	0x10320000
 800264c:	10310000 	.word	0x10310000
 8002650:	10220000 	.word	0x10220000
 8002654:	10210000 	.word	0x10210000
 8002658:	10120000 	.word	0x10120000
 800265c:	10110000 	.word	0x10110000
 8002660:	40021000 	.word	0x40021000
 8002664:	40010000 	.word	0x40010000
 8002668:	40010800 	.word	0x40010800
 800266c:	40010c00 	.word	0x40010c00
 8002670:	40011000 	.word	0x40011000
 8002674:	40011400 	.word	0x40011400
 8002678:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800267c:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <HAL_GPIO_Init+0x304>)
 800267e:	68da      	ldr	r2, [r3, #12]
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	43db      	mvns	r3, r3
 8002684:	4909      	ldr	r1, [pc, #36]	; (80026ac <HAL_GPIO_Init+0x304>)
 8002686:	4013      	ands	r3, r2
 8002688:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	3301      	adds	r3, #1
 800268e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	fa22 f303 	lsr.w	r3, r2, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	f47f ae8e 	bne.w	80023bc <HAL_GPIO_Init+0x14>
  }
}
 80026a0:	bf00      	nop
 80026a2:	bf00      	nop
 80026a4:	372c      	adds	r7, #44	; 0x2c
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr
 80026ac:	40010400 	.word	0x40010400

080026b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	460b      	mov	r3, r1
 80026ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	887b      	ldrh	r3, [r7, #2]
 80026c2:	4013      	ands	r3, r2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d002      	beq.n	80026ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026c8:	2301      	movs	r3, #1
 80026ca:	73fb      	strb	r3, [r7, #15]
 80026cc:	e001      	b.n	80026d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026ce:	2300      	movs	r3, #0
 80026d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr

080026de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	460b      	mov	r3, r1
 80026e8:	807b      	strh	r3, [r7, #2]
 80026ea:	4613      	mov	r3, r2
 80026ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026ee:	787b      	ldrb	r3, [r7, #1]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d003      	beq.n	80026fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026f4:	887a      	ldrh	r2, [r7, #2]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026fa:	e003      	b.n	8002704 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026fc:	887b      	ldrh	r3, [r7, #2]
 80026fe:	041a      	lsls	r2, r3, #16
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	611a      	str	r2, [r3, #16]
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr

0800270e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800270e:	b480      	push	{r7}
 8002710:	b085      	sub	sp, #20
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	460b      	mov	r3, r1
 8002718:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002720:	887a      	ldrh	r2, [r7, #2]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	4013      	ands	r3, r2
 8002726:	041a      	lsls	r2, r3, #16
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	43d9      	mvns	r1, r3
 800272c:	887b      	ldrh	r3, [r7, #2]
 800272e:	400b      	ands	r3, r1
 8002730:	431a      	orrs	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	611a      	str	r2, [r3, #16]
}
 8002736:	bf00      	nop
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr

08002740 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800274a:	4b08      	ldr	r3, [pc, #32]	; (800276c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800274c:	695a      	ldr	r2, [r3, #20]
 800274e:	88fb      	ldrh	r3, [r7, #6]
 8002750:	4013      	ands	r3, r2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d006      	beq.n	8002764 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002756:	4a05      	ldr	r2, [pc, #20]	; (800276c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002758:	88fb      	ldrh	r3, [r7, #6]
 800275a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800275c:	88fb      	ldrh	r3, [r7, #6]
 800275e:	4618      	mov	r0, r3
 8002760:	f000 f806 	bl	8002770 <HAL_GPIO_EXTI_Callback>
  }
}
 8002764:	bf00      	nop
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40010400 	.word	0x40010400

08002770 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr

08002784 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e272      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 8087 	beq.w	80028b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027a4:	4b92      	ldr	r3, [pc, #584]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 030c 	and.w	r3, r3, #12
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	d00c      	beq.n	80027ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027b0:	4b8f      	ldr	r3, [pc, #572]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 030c 	and.w	r3, r3, #12
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	d112      	bne.n	80027e2 <HAL_RCC_OscConfig+0x5e>
 80027bc:	4b8c      	ldr	r3, [pc, #560]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027c8:	d10b      	bne.n	80027e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ca:	4b89      	ldr	r3, [pc, #548]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d06c      	beq.n	80028b0 <HAL_RCC_OscConfig+0x12c>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d168      	bne.n	80028b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e24c      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ea:	d106      	bne.n	80027fa <HAL_RCC_OscConfig+0x76>
 80027ec:	4b80      	ldr	r3, [pc, #512]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a7f      	ldr	r2, [pc, #508]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80027f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f6:	6013      	str	r3, [r2, #0]
 80027f8:	e02e      	b.n	8002858 <HAL_RCC_OscConfig+0xd4>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10c      	bne.n	800281c <HAL_RCC_OscConfig+0x98>
 8002802:	4b7b      	ldr	r3, [pc, #492]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a7a      	ldr	r2, [pc, #488]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002808:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800280c:	6013      	str	r3, [r2, #0]
 800280e:	4b78      	ldr	r3, [pc, #480]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a77      	ldr	r2, [pc, #476]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002814:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	e01d      	b.n	8002858 <HAL_RCC_OscConfig+0xd4>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002824:	d10c      	bne.n	8002840 <HAL_RCC_OscConfig+0xbc>
 8002826:	4b72      	ldr	r3, [pc, #456]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a71      	ldr	r2, [pc, #452]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 800282c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	4b6f      	ldr	r3, [pc, #444]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a6e      	ldr	r2, [pc, #440]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800283c:	6013      	str	r3, [r2, #0]
 800283e:	e00b      	b.n	8002858 <HAL_RCC_OscConfig+0xd4>
 8002840:	4b6b      	ldr	r3, [pc, #428]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a6a      	ldr	r2, [pc, #424]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	4b68      	ldr	r3, [pc, #416]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a67      	ldr	r2, [pc, #412]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002856:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d013      	beq.n	8002888 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002860:	f7ff fbb6 	bl	8001fd0 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002868:	f7ff fbb2 	bl	8001fd0 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b64      	cmp	r3, #100	; 0x64
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e200      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287a:	4b5d      	ldr	r3, [pc, #372]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f0      	beq.n	8002868 <HAL_RCC_OscConfig+0xe4>
 8002886:	e014      	b.n	80028b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002888:	f7ff fba2 	bl	8001fd0 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002890:	f7ff fb9e 	bl	8001fd0 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b64      	cmp	r3, #100	; 0x64
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e1ec      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a2:	4b53      	ldr	r3, [pc, #332]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f0      	bne.n	8002890 <HAL_RCC_OscConfig+0x10c>
 80028ae:	e000      	b.n	80028b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d063      	beq.n	8002986 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028be:	4b4c      	ldr	r3, [pc, #304]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00b      	beq.n	80028e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028ca:	4b49      	ldr	r3, [pc, #292]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f003 030c 	and.w	r3, r3, #12
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d11c      	bne.n	8002910 <HAL_RCC_OscConfig+0x18c>
 80028d6:	4b46      	ldr	r3, [pc, #280]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d116      	bne.n	8002910 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028e2:	4b43      	ldr	r3, [pc, #268]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d005      	beq.n	80028fa <HAL_RCC_OscConfig+0x176>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d001      	beq.n	80028fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e1c0      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028fa:	4b3d      	ldr	r3, [pc, #244]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4939      	ldr	r1, [pc, #228]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 800290a:	4313      	orrs	r3, r2
 800290c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290e:	e03a      	b.n	8002986 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d020      	beq.n	800295a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002918:	4b36      	ldr	r3, [pc, #216]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 800291a:	2201      	movs	r2, #1
 800291c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291e:	f7ff fb57 	bl	8001fd0 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002926:	f7ff fb53 	bl	8001fd0 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e1a1      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002938:	4b2d      	ldr	r3, [pc, #180]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0f0      	beq.n	8002926 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002944:	4b2a      	ldr	r3, [pc, #168]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	4927      	ldr	r1, [pc, #156]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002954:	4313      	orrs	r3, r2
 8002956:	600b      	str	r3, [r1, #0]
 8002958:	e015      	b.n	8002986 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800295a:	4b26      	ldr	r3, [pc, #152]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002960:	f7ff fb36 	bl	8001fd0 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002968:	f7ff fb32 	bl	8001fd0 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e180      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800297a:	4b1d      	ldr	r3, [pc, #116]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f0      	bne.n	8002968 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	2b00      	cmp	r3, #0
 8002990:	d03a      	beq.n	8002a08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d019      	beq.n	80029ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800299a:	4b17      	ldr	r3, [pc, #92]	; (80029f8 <HAL_RCC_OscConfig+0x274>)
 800299c:	2201      	movs	r2, #1
 800299e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a0:	f7ff fb16 	bl	8001fd0 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029a8:	f7ff fb12 	bl	8001fd0 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e160      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ba:	4b0d      	ldr	r3, [pc, #52]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0f0      	beq.n	80029a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029c6:	2001      	movs	r0, #1
 80029c8:	f000 fad8 	bl	8002f7c <RCC_Delay>
 80029cc:	e01c      	b.n	8002a08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ce:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <HAL_RCC_OscConfig+0x274>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d4:	f7ff fafc 	bl	8001fd0 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029da:	e00f      	b.n	80029fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029dc:	f7ff faf8 	bl	8001fd0 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d908      	bls.n	80029fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e146      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
 80029ee:	bf00      	nop
 80029f0:	40021000 	.word	0x40021000
 80029f4:	42420000 	.word	0x42420000
 80029f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029fc:	4b92      	ldr	r3, [pc, #584]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1e9      	bne.n	80029dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 80a6 	beq.w	8002b62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a16:	2300      	movs	r3, #0
 8002a18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a1a:	4b8b      	ldr	r3, [pc, #556]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10d      	bne.n	8002a42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a26:	4b88      	ldr	r3, [pc, #544]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	4a87      	ldr	r2, [pc, #540]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a30:	61d3      	str	r3, [r2, #28]
 8002a32:	4b85      	ldr	r3, [pc, #532]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3a:	60bb      	str	r3, [r7, #8]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a42:	4b82      	ldr	r3, [pc, #520]	; (8002c4c <HAL_RCC_OscConfig+0x4c8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d118      	bne.n	8002a80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a4e:	4b7f      	ldr	r3, [pc, #508]	; (8002c4c <HAL_RCC_OscConfig+0x4c8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a7e      	ldr	r2, [pc, #504]	; (8002c4c <HAL_RCC_OscConfig+0x4c8>)
 8002a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a5a:	f7ff fab9 	bl	8001fd0 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a62:	f7ff fab5 	bl	8001fd0 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b64      	cmp	r3, #100	; 0x64
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e103      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a74:	4b75      	ldr	r3, [pc, #468]	; (8002c4c <HAL_RCC_OscConfig+0x4c8>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0f0      	beq.n	8002a62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d106      	bne.n	8002a96 <HAL_RCC_OscConfig+0x312>
 8002a88:	4b6f      	ldr	r3, [pc, #444]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	4a6e      	ldr	r2, [pc, #440]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002a8e:	f043 0301 	orr.w	r3, r3, #1
 8002a92:	6213      	str	r3, [r2, #32]
 8002a94:	e02d      	b.n	8002af2 <HAL_RCC_OscConfig+0x36e>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10c      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x334>
 8002a9e:	4b6a      	ldr	r3, [pc, #424]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	4a69      	ldr	r2, [pc, #420]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002aa4:	f023 0301 	bic.w	r3, r3, #1
 8002aa8:	6213      	str	r3, [r2, #32]
 8002aaa:	4b67      	ldr	r3, [pc, #412]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	4a66      	ldr	r2, [pc, #408]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002ab0:	f023 0304 	bic.w	r3, r3, #4
 8002ab4:	6213      	str	r3, [r2, #32]
 8002ab6:	e01c      	b.n	8002af2 <HAL_RCC_OscConfig+0x36e>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	2b05      	cmp	r3, #5
 8002abe:	d10c      	bne.n	8002ada <HAL_RCC_OscConfig+0x356>
 8002ac0:	4b61      	ldr	r3, [pc, #388]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	4a60      	ldr	r2, [pc, #384]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002ac6:	f043 0304 	orr.w	r3, r3, #4
 8002aca:	6213      	str	r3, [r2, #32]
 8002acc:	4b5e      	ldr	r3, [pc, #376]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	4a5d      	ldr	r2, [pc, #372]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	6213      	str	r3, [r2, #32]
 8002ad8:	e00b      	b.n	8002af2 <HAL_RCC_OscConfig+0x36e>
 8002ada:	4b5b      	ldr	r3, [pc, #364]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	4a5a      	ldr	r2, [pc, #360]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002ae0:	f023 0301 	bic.w	r3, r3, #1
 8002ae4:	6213      	str	r3, [r2, #32]
 8002ae6:	4b58      	ldr	r3, [pc, #352]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	4a57      	ldr	r2, [pc, #348]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002aec:	f023 0304 	bic.w	r3, r3, #4
 8002af0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d015      	beq.n	8002b26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002afa:	f7ff fa69 	bl	8001fd0 <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b00:	e00a      	b.n	8002b18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b02:	f7ff fa65 	bl	8001fd0 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e0b1      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b18:	4b4b      	ldr	r3, [pc, #300]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0ee      	beq.n	8002b02 <HAL_RCC_OscConfig+0x37e>
 8002b24:	e014      	b.n	8002b50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b26:	f7ff fa53 	bl	8001fd0 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b2c:	e00a      	b.n	8002b44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2e:	f7ff fa4f 	bl	8001fd0 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e09b      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b44:	4b40      	ldr	r3, [pc, #256]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1ee      	bne.n	8002b2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b50:	7dfb      	ldrb	r3, [r7, #23]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d105      	bne.n	8002b62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b56:	4b3c      	ldr	r3, [pc, #240]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	4a3b      	ldr	r2, [pc, #236]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002b5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 8087 	beq.w	8002c7a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b6c:	4b36      	ldr	r3, [pc, #216]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 030c 	and.w	r3, r3, #12
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d061      	beq.n	8002c3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d146      	bne.n	8002c0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b80:	4b33      	ldr	r3, [pc, #204]	; (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b86:	f7ff fa23 	bl	8001fd0 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b8e:	f7ff fa1f 	bl	8001fd0 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e06d      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ba0:	4b29      	ldr	r3, [pc, #164]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1f0      	bne.n	8002b8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb4:	d108      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002bb6:	4b24      	ldr	r3, [pc, #144]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	4921      	ldr	r1, [pc, #132]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bc8:	4b1f      	ldr	r3, [pc, #124]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a19      	ldr	r1, [r3, #32]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	430b      	orrs	r3, r1
 8002bda:	491b      	ldr	r1, [pc, #108]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002be0:	4b1b      	ldr	r3, [pc, #108]	; (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002be2:	2201      	movs	r2, #1
 8002be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be6:	f7ff f9f3 	bl	8001fd0 <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bee:	f7ff f9ef 	bl	8001fd0 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e03d      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c00:	4b11      	ldr	r3, [pc, #68]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0f0      	beq.n	8002bee <HAL_RCC_OscConfig+0x46a>
 8002c0c:	e035      	b.n	8002c7a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c0e:	4b10      	ldr	r3, [pc, #64]	; (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7ff f9dc 	bl	8001fd0 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c1c:	f7ff f9d8 	bl	8001fd0 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e026      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c2e:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCC_OscConfig+0x498>
 8002c3a:	e01e      	b.n	8002c7a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	69db      	ldr	r3, [r3, #28]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d107      	bne.n	8002c54 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e019      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	40007000 	.word	0x40007000
 8002c50:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c54:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <HAL_RCC_OscConfig+0x500>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d106      	bne.n	8002c76 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d001      	beq.n	8002c7a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e000      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3718      	adds	r7, #24
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40021000 	.word	0x40021000

08002c88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e0d0      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c9c:	4b6a      	ldr	r3, [pc, #424]	; (8002e48 <HAL_RCC_ClockConfig+0x1c0>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d910      	bls.n	8002ccc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002caa:	4b67      	ldr	r3, [pc, #412]	; (8002e48 <HAL_RCC_ClockConfig+0x1c0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f023 0207 	bic.w	r2, r3, #7
 8002cb2:	4965      	ldr	r1, [pc, #404]	; (8002e48 <HAL_RCC_ClockConfig+0x1c0>)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cba:	4b63      	ldr	r3, [pc, #396]	; (8002e48 <HAL_RCC_ClockConfig+0x1c0>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d001      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e0b8      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d020      	beq.n	8002d1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d005      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ce4:	4b59      	ldr	r3, [pc, #356]	; (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	4a58      	ldr	r2, [pc, #352]	; (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002cea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0308 	and.w	r3, r3, #8
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d005      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cfc:	4b53      	ldr	r3, [pc, #332]	; (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	4a52      	ldr	r2, [pc, #328]	; (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d08:	4b50      	ldr	r3, [pc, #320]	; (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	494d      	ldr	r1, [pc, #308]	; (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d040      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d107      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2e:	4b47      	ldr	r3, [pc, #284]	; (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d115      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e07f      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d107      	bne.n	8002d56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d46:	4b41      	ldr	r3, [pc, #260]	; (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d109      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e073      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d56:	4b3d      	ldr	r3, [pc, #244]	; (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e06b      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d66:	4b39      	ldr	r3, [pc, #228]	; (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f023 0203 	bic.w	r2, r3, #3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	4936      	ldr	r1, [pc, #216]	; (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d78:	f7ff f92a 	bl	8001fd0 <HAL_GetTick>
 8002d7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7e:	e00a      	b.n	8002d96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d80:	f7ff f926 	bl	8001fd0 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e053      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d96:	4b2d      	ldr	r3, [pc, #180]	; (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f003 020c 	and.w	r2, r3, #12
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d1eb      	bne.n	8002d80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002da8:	4b27      	ldr	r3, [pc, #156]	; (8002e48 <HAL_RCC_ClockConfig+0x1c0>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d210      	bcs.n	8002dd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db6:	4b24      	ldr	r3, [pc, #144]	; (8002e48 <HAL_RCC_ClockConfig+0x1c0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f023 0207 	bic.w	r2, r3, #7
 8002dbe:	4922      	ldr	r1, [pc, #136]	; (8002e48 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc6:	4b20      	ldr	r3, [pc, #128]	; (8002e48 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d001      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e032      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d008      	beq.n	8002df6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002de4:	4b19      	ldr	r3, [pc, #100]	; (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	4916      	ldr	r1, [pc, #88]	; (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d009      	beq.n	8002e16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e02:	4b12      	ldr	r3, [pc, #72]	; (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	490e      	ldr	r1, [pc, #56]	; (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e16:	f000 f821 	bl	8002e5c <HAL_RCC_GetSysClockFreq>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	4b0b      	ldr	r3, [pc, #44]	; (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	091b      	lsrs	r3, r3, #4
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	490a      	ldr	r1, [pc, #40]	; (8002e50 <HAL_RCC_ClockConfig+0x1c8>)
 8002e28:	5ccb      	ldrb	r3, [r1, r3]
 8002e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e2e:	4a09      	ldr	r2, [pc, #36]	; (8002e54 <HAL_RCC_ClockConfig+0x1cc>)
 8002e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e32:	4b09      	ldr	r3, [pc, #36]	; (8002e58 <HAL_RCC_ClockConfig+0x1d0>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff f888 	bl	8001f4c <HAL_InitTick>

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40022000 	.word	0x40022000
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	0800526c 	.word	0x0800526c
 8002e54:	2000000c 	.word	0x2000000c
 8002e58:	20000010 	.word	0x20000010

08002e5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e5c:	b490      	push	{r4, r7}
 8002e5e:	b08a      	sub	sp, #40	; 0x28
 8002e60:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002e62:	4b29      	ldr	r3, [pc, #164]	; (8002f08 <HAL_RCC_GetSysClockFreq+0xac>)
 8002e64:	1d3c      	adds	r4, r7, #4
 8002e66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002e6c:	f240 2301 	movw	r3, #513	; 0x201
 8002e70:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e72:	2300      	movs	r3, #0
 8002e74:	61fb      	str	r3, [r7, #28]
 8002e76:	2300      	movs	r3, #0
 8002e78:	61bb      	str	r3, [r7, #24]
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e86:	4b21      	ldr	r3, [pc, #132]	; (8002f0c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	f003 030c 	and.w	r3, r3, #12
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d002      	beq.n	8002e9c <HAL_RCC_GetSysClockFreq+0x40>
 8002e96:	2b08      	cmp	r3, #8
 8002e98:	d003      	beq.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x46>
 8002e9a:	e02b      	b.n	8002ef4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e9c:	4b1c      	ldr	r3, [pc, #112]	; (8002f10 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e9e:	623b      	str	r3, [r7, #32]
      break;
 8002ea0:	e02b      	b.n	8002efa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	0c9b      	lsrs	r3, r3, #18
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	3328      	adds	r3, #40	; 0x28
 8002eac:	443b      	add	r3, r7
 8002eae:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002eb2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d012      	beq.n	8002ee4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ebe:	4b13      	ldr	r3, [pc, #76]	; (8002f0c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	0c5b      	lsrs	r3, r3, #17
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	3328      	adds	r3, #40	; 0x28
 8002eca:	443b      	add	r3, r7
 8002ecc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ed0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	4a0e      	ldr	r2, [pc, #56]	; (8002f10 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ed6:	fb03 f202 	mul.w	r2, r3, r2
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ee2:	e004      	b.n	8002eee <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	4a0b      	ldr	r2, [pc, #44]	; (8002f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ee8:	fb02 f303 	mul.w	r3, r2, r3
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	623b      	str	r3, [r7, #32]
      break;
 8002ef2:	e002      	b.n	8002efa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ef4:	4b06      	ldr	r3, [pc, #24]	; (8002f10 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ef6:	623b      	str	r3, [r7, #32]
      break;
 8002ef8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002efa:	6a3b      	ldr	r3, [r7, #32]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3728      	adds	r7, #40	; 0x28
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bc90      	pop	{r4, r7}
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	0800525c 	.word	0x0800525c
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	007a1200 	.word	0x007a1200
 8002f14:	003d0900 	.word	0x003d0900

08002f18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f1c:	4b02      	ldr	r3, [pc, #8]	; (8002f28 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr
 8002f28:	2000000c 	.word	0x2000000c

08002f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f30:	f7ff fff2 	bl	8002f18 <HAL_RCC_GetHCLKFreq>
 8002f34:	4602      	mov	r2, r0
 8002f36:	4b05      	ldr	r3, [pc, #20]	; (8002f4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	0a1b      	lsrs	r3, r3, #8
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	4903      	ldr	r1, [pc, #12]	; (8002f50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f42:	5ccb      	ldrb	r3, [r1, r3]
 8002f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	0800527c 	.word	0x0800527c

08002f54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f58:	f7ff ffde 	bl	8002f18 <HAL_RCC_GetHCLKFreq>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	0adb      	lsrs	r3, r3, #11
 8002f64:	f003 0307 	and.w	r3, r3, #7
 8002f68:	4903      	ldr	r1, [pc, #12]	; (8002f78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f6a:	5ccb      	ldrb	r3, [r1, r3]
 8002f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40021000 	.word	0x40021000
 8002f78:	0800527c 	.word	0x0800527c

08002f7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f84:	4b0a      	ldr	r3, [pc, #40]	; (8002fb0 <RCC_Delay+0x34>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a0a      	ldr	r2, [pc, #40]	; (8002fb4 <RCC_Delay+0x38>)
 8002f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8e:	0a5b      	lsrs	r3, r3, #9
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	fb02 f303 	mul.w	r3, r2, r3
 8002f96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f98:	bf00      	nop
  }
  while (Delay --);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	1e5a      	subs	r2, r3, #1
 8002f9e:	60fa      	str	r2, [r7, #12]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1f9      	bne.n	8002f98 <RCC_Delay+0x1c>
}
 8002fa4:	bf00      	nop
 8002fa6:	bf00      	nop
 8002fa8:	3714      	adds	r7, #20
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bc80      	pop	{r7}
 8002fae:	4770      	bx	lr
 8002fb0:	2000000c 	.word	0x2000000c
 8002fb4:	10624dd3 	.word	0x10624dd3

08002fb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e041      	b.n	800304e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d106      	bne.n	8002fe4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7fe fc28 	bl	8001834 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3304      	adds	r3, #4
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	4610      	mov	r0, r2
 8002ff8:	f000 fbe0 	bl	80037bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e041      	b.n	80030ec <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b00      	cmp	r3, #0
 8003072:	d106      	bne.n	8003082 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 f839 	bl	80030f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2202      	movs	r2, #2
 8003086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3304      	adds	r3, #4
 8003092:	4619      	mov	r1, r3
 8003094:	4610      	mov	r0, r2
 8003096:	f000 fb91 	bl	80037bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	bc80      	pop	{r7}
 8003104:	4770      	bx	lr
	...

08003108 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d109      	bne.n	800312c <HAL_TIM_PWM_Start+0x24>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b01      	cmp	r3, #1
 8003122:	bf14      	ite	ne
 8003124:	2301      	movne	r3, #1
 8003126:	2300      	moveq	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	e022      	b.n	8003172 <HAL_TIM_PWM_Start+0x6a>
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	2b04      	cmp	r3, #4
 8003130:	d109      	bne.n	8003146 <HAL_TIM_PWM_Start+0x3e>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b01      	cmp	r3, #1
 800313c:	bf14      	ite	ne
 800313e:	2301      	movne	r3, #1
 8003140:	2300      	moveq	r3, #0
 8003142:	b2db      	uxtb	r3, r3
 8003144:	e015      	b.n	8003172 <HAL_TIM_PWM_Start+0x6a>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b08      	cmp	r3, #8
 800314a:	d109      	bne.n	8003160 <HAL_TIM_PWM_Start+0x58>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b01      	cmp	r3, #1
 8003156:	bf14      	ite	ne
 8003158:	2301      	movne	r3, #1
 800315a:	2300      	moveq	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	e008      	b.n	8003172 <HAL_TIM_PWM_Start+0x6a>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b01      	cmp	r3, #1
 800316a:	bf14      	ite	ne
 800316c:	2301      	movne	r3, #1
 800316e:	2300      	moveq	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e05e      	b.n	8003238 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d104      	bne.n	800318a <HAL_TIM_PWM_Start+0x82>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2202      	movs	r2, #2
 8003184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003188:	e013      	b.n	80031b2 <HAL_TIM_PWM_Start+0xaa>
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	2b04      	cmp	r3, #4
 800318e:	d104      	bne.n	800319a <HAL_TIM_PWM_Start+0x92>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2202      	movs	r2, #2
 8003194:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003198:	e00b      	b.n	80031b2 <HAL_TIM_PWM_Start+0xaa>
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	2b08      	cmp	r3, #8
 800319e:	d104      	bne.n	80031aa <HAL_TIM_PWM_Start+0xa2>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2202      	movs	r2, #2
 80031a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031a8:	e003      	b.n	80031b2 <HAL_TIM_PWM_Start+0xaa>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2202      	movs	r2, #2
 80031ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2201      	movs	r2, #1
 80031b8:	6839      	ldr	r1, [r7, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 fd7e 	bl	8003cbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a1e      	ldr	r2, [pc, #120]	; (8003240 <HAL_TIM_PWM_Start+0x138>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d107      	bne.n	80031da <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a18      	ldr	r2, [pc, #96]	; (8003240 <HAL_TIM_PWM_Start+0x138>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d00e      	beq.n	8003202 <HAL_TIM_PWM_Start+0xfa>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ec:	d009      	beq.n	8003202 <HAL_TIM_PWM_Start+0xfa>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a14      	ldr	r2, [pc, #80]	; (8003244 <HAL_TIM_PWM_Start+0x13c>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d004      	beq.n	8003202 <HAL_TIM_PWM_Start+0xfa>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a12      	ldr	r2, [pc, #72]	; (8003248 <HAL_TIM_PWM_Start+0x140>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d111      	bne.n	8003226 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2b06      	cmp	r3, #6
 8003212:	d010      	beq.n	8003236 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0201 	orr.w	r2, r2, #1
 8003222:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003224:	e007      	b.n	8003236 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f042 0201 	orr.w	r2, r2, #1
 8003234:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40012c00 	.word	0x40012c00
 8003244:	40000400 	.word	0x40000400
 8003248:	40000800 	.word	0x40000800

0800324c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b02      	cmp	r3, #2
 8003260:	d122      	bne.n	80032a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b02      	cmp	r3, #2
 800326e:	d11b      	bne.n	80032a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f06f 0202 	mvn.w	r2, #2
 8003278:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2201      	movs	r2, #1
 800327e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 fa78 	bl	8003784 <HAL_TIM_IC_CaptureCallback>
 8003294:	e005      	b.n	80032a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 fa6b 	bl	8003772 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 fa7a 	bl	8003796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d122      	bne.n	80032fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	2b04      	cmp	r3, #4
 80032c2:	d11b      	bne.n	80032fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f06f 0204 	mvn.w	r2, #4
 80032cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2202      	movs	r2, #2
 80032d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 fa4e 	bl	8003784 <HAL_TIM_IC_CaptureCallback>
 80032e8:	e005      	b.n	80032f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 fa41 	bl	8003772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 fa50 	bl	8003796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b08      	cmp	r3, #8
 8003308:	d122      	bne.n	8003350 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	f003 0308 	and.w	r3, r3, #8
 8003314:	2b08      	cmp	r3, #8
 8003316:	d11b      	bne.n	8003350 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f06f 0208 	mvn.w	r2, #8
 8003320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2204      	movs	r2, #4
 8003326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	f003 0303 	and.w	r3, r3, #3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 fa24 	bl	8003784 <HAL_TIM_IC_CaptureCallback>
 800333c:	e005      	b.n	800334a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 fa17 	bl	8003772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 fa26 	bl	8003796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	f003 0310 	and.w	r3, r3, #16
 800335a:	2b10      	cmp	r3, #16
 800335c:	d122      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	f003 0310 	and.w	r3, r3, #16
 8003368:	2b10      	cmp	r3, #16
 800336a:	d11b      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f06f 0210 	mvn.w	r2, #16
 8003374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2208      	movs	r2, #8
 800337a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f9fa 	bl	8003784 <HAL_TIM_IC_CaptureCallback>
 8003390:	e005      	b.n	800339e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f9ed 	bl	8003772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f9fc 	bl	8003796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d10e      	bne.n	80033d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d107      	bne.n	80033d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f06f 0201 	mvn.w	r2, #1
 80033c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f9c8 	bl	8003760 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033da:	2b80      	cmp	r3, #128	; 0x80
 80033dc:	d10e      	bne.n	80033fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e8:	2b80      	cmp	r3, #128	; 0x80
 80033ea:	d107      	bne.n	80033fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 fceb 	bl	8003dd2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003406:	2b40      	cmp	r3, #64	; 0x40
 8003408:	d10e      	bne.n	8003428 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003414:	2b40      	cmp	r3, #64	; 0x40
 8003416:	d107      	bne.n	8003428 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f9c0 	bl	80037a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	f003 0320 	and.w	r3, r3, #32
 8003432:	2b20      	cmp	r3, #32
 8003434:	d10e      	bne.n	8003454 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	f003 0320 	and.w	r3, r3, #32
 8003440:	2b20      	cmp	r3, #32
 8003442:	d107      	bne.n	8003454 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f06f 0220 	mvn.w	r2, #32
 800344c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 fcb6 	bl	8003dc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003454:	bf00      	nop
 8003456:	3708      	adds	r7, #8
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800346e:	2b01      	cmp	r3, #1
 8003470:	d101      	bne.n	8003476 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003472:	2302      	movs	r3, #2
 8003474:	e0ac      	b.n	80035d0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b0c      	cmp	r3, #12
 8003482:	f200 809f 	bhi.w	80035c4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003486:	a201      	add	r2, pc, #4	; (adr r2, 800348c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800348c:	080034c1 	.word	0x080034c1
 8003490:	080035c5 	.word	0x080035c5
 8003494:	080035c5 	.word	0x080035c5
 8003498:	080035c5 	.word	0x080035c5
 800349c:	08003501 	.word	0x08003501
 80034a0:	080035c5 	.word	0x080035c5
 80034a4:	080035c5 	.word	0x080035c5
 80034a8:	080035c5 	.word	0x080035c5
 80034ac:	08003543 	.word	0x08003543
 80034b0:	080035c5 	.word	0x080035c5
 80034b4:	080035c5 	.word	0x080035c5
 80034b8:	080035c5 	.word	0x080035c5
 80034bc:	08003583 	.word	0x08003583
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68b9      	ldr	r1, [r7, #8]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 f9da 	bl	8003880 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	699a      	ldr	r2, [r3, #24]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0208 	orr.w	r2, r2, #8
 80034da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	699a      	ldr	r2, [r3, #24]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 0204 	bic.w	r2, r2, #4
 80034ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6999      	ldr	r1, [r3, #24]
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	691a      	ldr	r2, [r3, #16]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	619a      	str	r2, [r3, #24]
      break;
 80034fe:	e062      	b.n	80035c6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68b9      	ldr	r1, [r7, #8]
 8003506:	4618      	mov	r0, r3
 8003508:	f000 fa20 	bl	800394c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699a      	ldr	r2, [r3, #24]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800351a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	699a      	ldr	r2, [r3, #24]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800352a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6999      	ldr	r1, [r3, #24]
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	021a      	lsls	r2, r3, #8
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	430a      	orrs	r2, r1
 800353e:	619a      	str	r2, [r3, #24]
      break;
 8003540:	e041      	b.n	80035c6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68b9      	ldr	r1, [r7, #8]
 8003548:	4618      	mov	r0, r3
 800354a:	f000 fa69 	bl	8003a20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	69da      	ldr	r2, [r3, #28]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f042 0208 	orr.w	r2, r2, #8
 800355c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	69da      	ldr	r2, [r3, #28]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0204 	bic.w	r2, r2, #4
 800356c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	69d9      	ldr	r1, [r3, #28]
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	691a      	ldr	r2, [r3, #16]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	61da      	str	r2, [r3, #28]
      break;
 8003580:	e021      	b.n	80035c6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68b9      	ldr	r1, [r7, #8]
 8003588:	4618      	mov	r0, r3
 800358a:	f000 fab3 	bl	8003af4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	69da      	ldr	r2, [r3, #28]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800359c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	69da      	ldr	r2, [r3, #28]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	69d9      	ldr	r1, [r3, #28]
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	021a      	lsls	r2, r3, #8
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	61da      	str	r2, [r3, #28]
      break;
 80035c2:	e000      	b.n	80035c6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80035c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d101      	bne.n	80035f0 <HAL_TIM_ConfigClockSource+0x18>
 80035ec:	2302      	movs	r3, #2
 80035ee:	e0b3      	b.n	8003758 <HAL_TIM_ConfigClockSource+0x180>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2202      	movs	r2, #2
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800360e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003616:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003628:	d03e      	beq.n	80036a8 <HAL_TIM_ConfigClockSource+0xd0>
 800362a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800362e:	f200 8087 	bhi.w	8003740 <HAL_TIM_ConfigClockSource+0x168>
 8003632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003636:	f000 8085 	beq.w	8003744 <HAL_TIM_ConfigClockSource+0x16c>
 800363a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800363e:	d87f      	bhi.n	8003740 <HAL_TIM_ConfigClockSource+0x168>
 8003640:	2b70      	cmp	r3, #112	; 0x70
 8003642:	d01a      	beq.n	800367a <HAL_TIM_ConfigClockSource+0xa2>
 8003644:	2b70      	cmp	r3, #112	; 0x70
 8003646:	d87b      	bhi.n	8003740 <HAL_TIM_ConfigClockSource+0x168>
 8003648:	2b60      	cmp	r3, #96	; 0x60
 800364a:	d050      	beq.n	80036ee <HAL_TIM_ConfigClockSource+0x116>
 800364c:	2b60      	cmp	r3, #96	; 0x60
 800364e:	d877      	bhi.n	8003740 <HAL_TIM_ConfigClockSource+0x168>
 8003650:	2b50      	cmp	r3, #80	; 0x50
 8003652:	d03c      	beq.n	80036ce <HAL_TIM_ConfigClockSource+0xf6>
 8003654:	2b50      	cmp	r3, #80	; 0x50
 8003656:	d873      	bhi.n	8003740 <HAL_TIM_ConfigClockSource+0x168>
 8003658:	2b40      	cmp	r3, #64	; 0x40
 800365a:	d058      	beq.n	800370e <HAL_TIM_ConfigClockSource+0x136>
 800365c:	2b40      	cmp	r3, #64	; 0x40
 800365e:	d86f      	bhi.n	8003740 <HAL_TIM_ConfigClockSource+0x168>
 8003660:	2b30      	cmp	r3, #48	; 0x30
 8003662:	d064      	beq.n	800372e <HAL_TIM_ConfigClockSource+0x156>
 8003664:	2b30      	cmp	r3, #48	; 0x30
 8003666:	d86b      	bhi.n	8003740 <HAL_TIM_ConfigClockSource+0x168>
 8003668:	2b20      	cmp	r3, #32
 800366a:	d060      	beq.n	800372e <HAL_TIM_ConfigClockSource+0x156>
 800366c:	2b20      	cmp	r3, #32
 800366e:	d867      	bhi.n	8003740 <HAL_TIM_ConfigClockSource+0x168>
 8003670:	2b00      	cmp	r3, #0
 8003672:	d05c      	beq.n	800372e <HAL_TIM_ConfigClockSource+0x156>
 8003674:	2b10      	cmp	r3, #16
 8003676:	d05a      	beq.n	800372e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003678:	e062      	b.n	8003740 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6818      	ldr	r0, [r3, #0]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	6899      	ldr	r1, [r3, #8]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f000 faf8 	bl	8003c7e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800369c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	609a      	str	r2, [r3, #8]
      break;
 80036a6:	e04e      	b.n	8003746 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6818      	ldr	r0, [r3, #0]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	6899      	ldr	r1, [r3, #8]
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f000 fae1 	bl	8003c7e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689a      	ldr	r2, [r3, #8]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036ca:	609a      	str	r2, [r3, #8]
      break;
 80036cc:	e03b      	b.n	8003746 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6818      	ldr	r0, [r3, #0]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	6859      	ldr	r1, [r3, #4]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	461a      	mov	r2, r3
 80036dc:	f000 fa58 	bl	8003b90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2150      	movs	r1, #80	; 0x50
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 faaf 	bl	8003c4a <TIM_ITRx_SetConfig>
      break;
 80036ec:	e02b      	b.n	8003746 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6818      	ldr	r0, [r3, #0]
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	6859      	ldr	r1, [r3, #4]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	461a      	mov	r2, r3
 80036fc:	f000 fa76 	bl	8003bec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2160      	movs	r1, #96	; 0x60
 8003706:	4618      	mov	r0, r3
 8003708:	f000 fa9f 	bl	8003c4a <TIM_ITRx_SetConfig>
      break;
 800370c:	e01b      	b.n	8003746 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6818      	ldr	r0, [r3, #0]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	6859      	ldr	r1, [r3, #4]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	461a      	mov	r2, r3
 800371c:	f000 fa38 	bl	8003b90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2140      	movs	r1, #64	; 0x40
 8003726:	4618      	mov	r0, r3
 8003728:	f000 fa8f 	bl	8003c4a <TIM_ITRx_SetConfig>
      break;
 800372c:	e00b      	b.n	8003746 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4619      	mov	r1, r3
 8003738:	4610      	mov	r0, r2
 800373a:	f000 fa86 	bl	8003c4a <TIM_ITRx_SetConfig>
        break;
 800373e:	e002      	b.n	8003746 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003740:	bf00      	nop
 8003742:	e000      	b.n	8003746 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003744:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	bc80      	pop	{r7}
 8003770:	4770      	bx	lr

08003772 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003772:	b480      	push	{r7}
 8003774:	b083      	sub	sp, #12
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	bc80      	pop	{r7}
 8003782:	4770      	bx	lr

08003784 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	bc80      	pop	{r7}
 8003794:	4770      	bx	lr

08003796 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bc80      	pop	{r7}
 80037a6:	4770      	bx	lr

080037a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bc80      	pop	{r7}
 80037b8:	4770      	bx	lr
	...

080037bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a29      	ldr	r2, [pc, #164]	; (8003874 <TIM_Base_SetConfig+0xb8>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d00b      	beq.n	80037ec <TIM_Base_SetConfig+0x30>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037da:	d007      	beq.n	80037ec <TIM_Base_SetConfig+0x30>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a26      	ldr	r2, [pc, #152]	; (8003878 <TIM_Base_SetConfig+0xbc>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d003      	beq.n	80037ec <TIM_Base_SetConfig+0x30>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a25      	ldr	r2, [pc, #148]	; (800387c <TIM_Base_SetConfig+0xc0>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d108      	bne.n	80037fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a1c      	ldr	r2, [pc, #112]	; (8003874 <TIM_Base_SetConfig+0xb8>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d00b      	beq.n	800381e <TIM_Base_SetConfig+0x62>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800380c:	d007      	beq.n	800381e <TIM_Base_SetConfig+0x62>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a19      	ldr	r2, [pc, #100]	; (8003878 <TIM_Base_SetConfig+0xbc>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d003      	beq.n	800381e <TIM_Base_SetConfig+0x62>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a18      	ldr	r2, [pc, #96]	; (800387c <TIM_Base_SetConfig+0xc0>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d108      	bne.n	8003830 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003824:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	4313      	orrs	r3, r2
 800382e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	4313      	orrs	r3, r2
 800383c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a07      	ldr	r2, [pc, #28]	; (8003874 <TIM_Base_SetConfig+0xb8>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d103      	bne.n	8003864 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	691a      	ldr	r2, [r3, #16]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	615a      	str	r2, [r3, #20]
}
 800386a:	bf00      	nop
 800386c:	3714      	adds	r7, #20
 800386e:	46bd      	mov	sp, r7
 8003870:	bc80      	pop	{r7}
 8003872:	4770      	bx	lr
 8003874:	40012c00 	.word	0x40012c00
 8003878:	40000400 	.word	0x40000400
 800387c:	40000800 	.word	0x40000800

08003880 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003880:	b480      	push	{r7}
 8003882:	b087      	sub	sp, #28
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	f023 0201 	bic.w	r2, r3, #1
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f023 0303 	bic.w	r3, r3, #3
 80038b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	4313      	orrs	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f023 0302 	bic.w	r3, r3, #2
 80038c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a1c      	ldr	r2, [pc, #112]	; (8003948 <TIM_OC1_SetConfig+0xc8>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d10c      	bne.n	80038f6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	f023 0308 	bic.w	r3, r3, #8
 80038e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f023 0304 	bic.w	r3, r3, #4
 80038f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a13      	ldr	r2, [pc, #76]	; (8003948 <TIM_OC1_SetConfig+0xc8>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d111      	bne.n	8003922 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003904:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800390c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	4313      	orrs	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685a      	ldr	r2, [r3, #4]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	621a      	str	r2, [r3, #32]
}
 800393c:	bf00      	nop
 800393e:	371c      	adds	r7, #28
 8003940:	46bd      	mov	sp, r7
 8003942:	bc80      	pop	{r7}
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40012c00 	.word	0x40012c00

0800394c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800394c:	b480      	push	{r7}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	f023 0210 	bic.w	r2, r3, #16
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800397a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003982:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	021b      	lsls	r3, r3, #8
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	4313      	orrs	r3, r2
 800398e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f023 0320 	bic.w	r3, r3, #32
 8003996:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	011b      	lsls	r3, r3, #4
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a1d      	ldr	r2, [pc, #116]	; (8003a1c <TIM_OC2_SetConfig+0xd0>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d10d      	bne.n	80039c8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	011b      	lsls	r3, r3, #4
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	4313      	orrs	r3, r2
 80039be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a14      	ldr	r2, [pc, #80]	; (8003a1c <TIM_OC2_SetConfig+0xd0>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d113      	bne.n	80039f8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	621a      	str	r2, [r3, #32]
}
 8003a12:	bf00      	nop
 8003a14:	371c      	adds	r7, #28
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bc80      	pop	{r7}
 8003a1a:	4770      	bx	lr
 8003a1c:	40012c00 	.word	0x40012c00

08003a20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b087      	sub	sp, #28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f023 0303 	bic.w	r3, r3, #3
 8003a56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	021b      	lsls	r3, r3, #8
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a1d      	ldr	r2, [pc, #116]	; (8003af0 <TIM_OC3_SetConfig+0xd0>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d10d      	bne.n	8003a9a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	021b      	lsls	r3, r3, #8
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a14      	ldr	r2, [pc, #80]	; (8003af0 <TIM_OC3_SetConfig+0xd0>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d113      	bne.n	8003aca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003aa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	011b      	lsls	r3, r3, #4
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	621a      	str	r2, [r3, #32]
}
 8003ae4:	bf00      	nop
 8003ae6:	371c      	adds	r7, #28
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bc80      	pop	{r7}
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	40012c00 	.word	0x40012c00

08003af4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b087      	sub	sp, #28
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	021b      	lsls	r3, r3, #8
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	031b      	lsls	r3, r3, #12
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a0f      	ldr	r2, [pc, #60]	; (8003b8c <TIM_OC4_SetConfig+0x98>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d109      	bne.n	8003b68 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	019b      	lsls	r3, r3, #6
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	621a      	str	r2, [r3, #32]
}
 8003b82:	bf00      	nop
 8003b84:	371c      	adds	r7, #28
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bc80      	pop	{r7}
 8003b8a:	4770      	bx	lr
 8003b8c:	40012c00 	.word	0x40012c00

08003b90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	f023 0201 	bic.w	r2, r3, #1
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f023 030a 	bic.w	r3, r3, #10
 8003bcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	621a      	str	r2, [r3, #32]
}
 8003be2:	bf00      	nop
 8003be4:	371c      	adds	r7, #28
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bc80      	pop	{r7}
 8003bea:	4770      	bx	lr

08003bec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	f023 0210 	bic.w	r2, r3, #16
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c16:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	031b      	lsls	r3, r3, #12
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c28:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	621a      	str	r2, [r3, #32]
}
 8003c40:	bf00      	nop
 8003c42:	371c      	adds	r7, #28
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bc80      	pop	{r7}
 8003c48:	4770      	bx	lr

08003c4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b085      	sub	sp, #20
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
 8003c52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	f043 0307 	orr.w	r3, r3, #7
 8003c6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	609a      	str	r2, [r3, #8]
}
 8003c74:	bf00      	nop
 8003c76:	3714      	adds	r7, #20
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bc80      	pop	{r7}
 8003c7c:	4770      	bx	lr

08003c7e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b087      	sub	sp, #28
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	60f8      	str	r0, [r7, #12]
 8003c86:	60b9      	str	r1, [r7, #8]
 8003c88:	607a      	str	r2, [r7, #4]
 8003c8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c98:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	021a      	lsls	r2, r3, #8
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	609a      	str	r2, [r3, #8]
}
 8003cb2:	bf00      	nop
 8003cb4:	371c      	adds	r7, #28
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bc80      	pop	{r7}
 8003cba:	4770      	bx	lr

08003cbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b087      	sub	sp, #28
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	f003 031f 	and.w	r3, r3, #31
 8003cce:	2201      	movs	r2, #1
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6a1a      	ldr	r2, [r3, #32]
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	43db      	mvns	r3, r3
 8003cde:	401a      	ands	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6a1a      	ldr	r2, [r3, #32]
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	f003 031f 	and.w	r3, r3, #31
 8003cee:	6879      	ldr	r1, [r7, #4]
 8003cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	621a      	str	r2, [r3, #32]
}
 8003cfa:	bf00      	nop
 8003cfc:	371c      	adds	r7, #28
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bc80      	pop	{r7}
 8003d02:	4770      	bx	lr

08003d04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d101      	bne.n	8003d1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d18:	2302      	movs	r3, #2
 8003d1a:	e046      	b.n	8003daa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2202      	movs	r2, #2
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a16      	ldr	r2, [pc, #88]	; (8003db4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d00e      	beq.n	8003d7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d68:	d009      	beq.n	8003d7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a12      	ldr	r2, [pc, #72]	; (8003db8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d004      	beq.n	8003d7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a10      	ldr	r2, [pc, #64]	; (8003dbc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d10c      	bne.n	8003d98 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3714      	adds	r7, #20
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bc80      	pop	{r7}
 8003db2:	4770      	bx	lr
 8003db4:	40012c00 	.word	0x40012c00
 8003db8:	40000400 	.word	0x40000400
 8003dbc:	40000800 	.word	0x40000800

08003dc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bc80      	pop	{r7}
 8003dd0:	4770      	bx	lr

08003dd2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003dda:	bf00      	nop
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bc80      	pop	{r7}
 8003de2:	4770      	bx	lr

08003de4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e03f      	b.n	8003e76 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d106      	bne.n	8003e10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7fd fdde 	bl	80019cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2224      	movs	r2, #36	; 0x24
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68da      	ldr	r2, [r3, #12]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 fcc7 	bl	80047bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	691a      	ldr	r2, [r3, #16]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	695a      	ldr	r2, [r3, #20]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68da      	ldr	r2, [r3, #12]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2220      	movs	r2, #32
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b08a      	sub	sp, #40	; 0x28
 8003e82:	af02      	add	r7, sp, #8
 8003e84:	60f8      	str	r0, [r7, #12]
 8003e86:	60b9      	str	r1, [r7, #8]
 8003e88:	603b      	str	r3, [r7, #0]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b20      	cmp	r3, #32
 8003e9c:	d17c      	bne.n	8003f98 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d002      	beq.n	8003eaa <HAL_UART_Transmit+0x2c>
 8003ea4:	88fb      	ldrh	r3, [r7, #6]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e075      	b.n	8003f9a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d101      	bne.n	8003ebc <HAL_UART_Transmit+0x3e>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	e06e      	b.n	8003f9a <HAL_UART_Transmit+0x11c>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2221      	movs	r2, #33	; 0x21
 8003ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ed2:	f7fe f87d 	bl	8001fd0 <HAL_GetTick>
 8003ed6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	88fa      	ldrh	r2, [r7, #6]
 8003edc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	88fa      	ldrh	r2, [r7, #6]
 8003ee2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eec:	d108      	bne.n	8003f00 <HAL_UART_Transmit+0x82>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d104      	bne.n	8003f00 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	61bb      	str	r3, [r7, #24]
 8003efe:	e003      	b.n	8003f08 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f04:	2300      	movs	r3, #0
 8003f06:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003f10:	e02a      	b.n	8003f68 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	2180      	movs	r1, #128	; 0x80
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f000 fab3 	bl	8004488 <UART_WaitOnFlagUntilTimeout>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e036      	b.n	8003f9a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10b      	bne.n	8003f4a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	881b      	ldrh	r3, [r3, #0]
 8003f36:	461a      	mov	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	3302      	adds	r3, #2
 8003f46:	61bb      	str	r3, [r7, #24]
 8003f48:	e007      	b.n	8003f5a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	781a      	ldrb	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	3301      	adds	r3, #1
 8003f58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	3b01      	subs	r3, #1
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1cf      	bne.n	8003f12 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	2140      	movs	r1, #64	; 0x40
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f000 fa83 	bl	8004488 <UART_WaitOnFlagUntilTimeout>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e006      	b.n	8003f9a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f94:	2300      	movs	r3, #0
 8003f96:	e000      	b.n	8003f9a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003f98:	2302      	movs	r3, #2
  }
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3720      	adds	r7, #32
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b08a      	sub	sp, #40	; 0x28
 8003fa6:	af02      	add	r7, sp, #8
 8003fa8:	60f8      	str	r0, [r7, #12]
 8003faa:	60b9      	str	r1, [r7, #8]
 8003fac:	603b      	str	r3, [r7, #0]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b20      	cmp	r3, #32
 8003fc0:	f040 808c 	bne.w	80040dc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d002      	beq.n	8003fd0 <HAL_UART_Receive+0x2e>
 8003fca:	88fb      	ldrh	r3, [r7, #6]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e084      	b.n	80040de <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d101      	bne.n	8003fe2 <HAL_UART_Receive+0x40>
 8003fde:	2302      	movs	r3, #2
 8003fe0:	e07d      	b.n	80040de <HAL_UART_Receive+0x13c>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2222      	movs	r2, #34	; 0x22
 8003ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ffe:	f7fd ffe7 	bl	8001fd0 <HAL_GetTick>
 8004002:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	88fa      	ldrh	r2, [r7, #6]
 8004008:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	88fa      	ldrh	r2, [r7, #6]
 800400e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004018:	d108      	bne.n	800402c <HAL_UART_Receive+0x8a>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d104      	bne.n	800402c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004022:	2300      	movs	r3, #0
 8004024:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	61bb      	str	r3, [r7, #24]
 800402a:	e003      	b.n	8004034 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004030:	2300      	movs	r3, #0
 8004032:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800403c:	e043      	b.n	80040c6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	2200      	movs	r2, #0
 8004046:	2120      	movs	r1, #32
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f000 fa1d 	bl	8004488 <UART_WaitOnFlagUntilTimeout>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e042      	b.n	80040de <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10c      	bne.n	8004078 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	b29b      	uxth	r3, r3
 8004066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800406a:	b29a      	uxth	r2, r3
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	3302      	adds	r3, #2
 8004074:	61bb      	str	r3, [r7, #24]
 8004076:	e01f      	b.n	80040b8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004080:	d007      	beq.n	8004092 <HAL_UART_Receive+0xf0>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10a      	bne.n	80040a0 <HAL_UART_Receive+0xfe>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d106      	bne.n	80040a0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	b2da      	uxtb	r2, r3
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	701a      	strb	r2, [r3, #0]
 800409e:	e008      	b.n	80040b2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	3301      	adds	r3, #1
 80040b6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040bc:	b29b      	uxth	r3, r3
 80040be:	3b01      	subs	r3, #1
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1b6      	bne.n	800403e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2220      	movs	r2, #32
 80040d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80040d8:	2300      	movs	r3, #0
 80040da:	e000      	b.n	80040de <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80040dc:	2302      	movs	r3, #2
  }
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3720      	adds	r7, #32
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
	...

080040e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b08a      	sub	sp, #40	; 0x28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004108:	2300      	movs	r3, #0
 800410a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800410c:	2300      	movs	r3, #0
 800410e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	f003 030f 	and.w	r3, r3, #15
 8004116:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10d      	bne.n	800413a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800411e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004120:	f003 0320 	and.w	r3, r3, #32
 8004124:	2b00      	cmp	r3, #0
 8004126:	d008      	beq.n	800413a <HAL_UART_IRQHandler+0x52>
 8004128:	6a3b      	ldr	r3, [r7, #32]
 800412a:	f003 0320 	and.w	r3, r3, #32
 800412e:	2b00      	cmp	r3, #0
 8004130:	d003      	beq.n	800413a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 fa99 	bl	800466a <UART_Receive_IT>
      return;
 8004138:	e17b      	b.n	8004432 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 80b1 	beq.w	80042a4 <HAL_UART_IRQHandler+0x1bc>
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b00      	cmp	r3, #0
 800414a:	d105      	bne.n	8004158 <HAL_UART_IRQHandler+0x70>
 800414c:	6a3b      	ldr	r3, [r7, #32]
 800414e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004152:	2b00      	cmp	r3, #0
 8004154:	f000 80a6 	beq.w	80042a4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <HAL_UART_IRQHandler+0x90>
 8004162:	6a3b      	ldr	r3, [r7, #32]
 8004164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004168:	2b00      	cmp	r3, #0
 800416a:	d005      	beq.n	8004178 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004170:	f043 0201 	orr.w	r2, r3, #1
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	f003 0304 	and.w	r3, r3, #4
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00a      	beq.n	8004198 <HAL_UART_IRQHandler+0xb0>
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	2b00      	cmp	r3, #0
 800418a:	d005      	beq.n	8004198 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004190:	f043 0202 	orr.w	r2, r3, #2
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00a      	beq.n	80041b8 <HAL_UART_IRQHandler+0xd0>
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d005      	beq.n	80041b8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b0:	f043 0204 	orr.w	r2, r3, #4
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80041b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ba:	f003 0308 	and.w	r3, r3, #8
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00f      	beq.n	80041e2 <HAL_UART_IRQHandler+0xfa>
 80041c2:	6a3b      	ldr	r3, [r7, #32]
 80041c4:	f003 0320 	and.w	r3, r3, #32
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d104      	bne.n	80041d6 <HAL_UART_IRQHandler+0xee>
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d005      	beq.n	80041e2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	f043 0208 	orr.w	r2, r3, #8
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 811e 	beq.w	8004428 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ee:	f003 0320 	and.w	r3, r3, #32
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d007      	beq.n	8004206 <HAL_UART_IRQHandler+0x11e>
 80041f6:	6a3b      	ldr	r3, [r7, #32]
 80041f8:	f003 0320 	and.w	r3, r3, #32
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d002      	beq.n	8004206 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 fa32 	bl	800466a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004210:	2b00      	cmp	r3, #0
 8004212:	bf14      	ite	ne
 8004214:	2301      	movne	r3, #1
 8004216:	2300      	moveq	r3, #0
 8004218:	b2db      	uxtb	r3, r3
 800421a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004220:	f003 0308 	and.w	r3, r3, #8
 8004224:	2b00      	cmp	r3, #0
 8004226:	d102      	bne.n	800422e <HAL_UART_IRQHandler+0x146>
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d031      	beq.n	8004292 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f974 	bl	800451c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423e:	2b00      	cmp	r3, #0
 8004240:	d023      	beq.n	800428a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	695a      	ldr	r2, [r3, #20]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004250:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004256:	2b00      	cmp	r3, #0
 8004258:	d013      	beq.n	8004282 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425e:	4a76      	ldr	r2, [pc, #472]	; (8004438 <HAL_UART_IRQHandler+0x350>)
 8004260:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004266:	4618      	mov	r0, r3
 8004268:	f7fe f828 	bl	80022bc <HAL_DMA_Abort_IT>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d016      	beq.n	80042a0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800427c:	4610      	mov	r0, r2
 800427e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004280:	e00e      	b.n	80042a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f8ec 	bl	8004460 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004288:	e00a      	b.n	80042a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f8e8 	bl	8004460 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004290:	e006      	b.n	80042a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f8e4 	bl	8004460 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800429e:	e0c3      	b.n	8004428 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042a0:	bf00      	nop
    return;
 80042a2:	e0c1      	b.n	8004428 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	f040 80a1 	bne.w	80043f0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	f003 0310 	and.w	r3, r3, #16
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f000 809b 	beq.w	80043f0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80042ba:	6a3b      	ldr	r3, [r7, #32]
 80042bc:	f003 0310 	and.w	r3, r3, #16
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 8095 	beq.w	80043f0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042c6:	2300      	movs	r3, #0
 80042c8:	60fb      	str	r3, [r7, #12]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	60fb      	str	r3, [r7, #12]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	60fb      	str	r3, [r7, #12]
 80042da:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d04e      	beq.n	8004388 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80042f4:	8a3b      	ldrh	r3, [r7, #16]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f000 8098 	beq.w	800442c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004300:	8a3a      	ldrh	r2, [r7, #16]
 8004302:	429a      	cmp	r2, r3
 8004304:	f080 8092 	bcs.w	800442c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	8a3a      	ldrh	r2, [r7, #16]
 800430c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	2b20      	cmp	r3, #32
 8004316:	d02b      	beq.n	8004370 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68da      	ldr	r2, [r3, #12]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004326:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	695a      	ldr	r2, [r3, #20]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 0201 	bic.w	r2, r2, #1
 8004336:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	695a      	ldr	r2, [r3, #20]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004346:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2220      	movs	r2, #32
 800434c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68da      	ldr	r2, [r3, #12]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 0210 	bic.w	r2, r2, #16
 8004364:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436a:	4618      	mov	r0, r3
 800436c:	f7fd ff6b 	bl	8002246 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004378:	b29b      	uxth	r3, r3
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	b29b      	uxth	r3, r3
 800437e:	4619      	mov	r1, r3
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 f876 	bl	8004472 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004386:	e051      	b.n	800442c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004390:	b29b      	uxth	r3, r3
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800439a:	b29b      	uxth	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	d047      	beq.n	8004430 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80043a0:	8a7b      	ldrh	r3, [r7, #18]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d044      	beq.n	8004430 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68da      	ldr	r2, [r3, #12]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80043b4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	695a      	ldr	r2, [r3, #20]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 0201 	bic.w	r2, r2, #1
 80043c4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2220      	movs	r2, #32
 80043ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f022 0210 	bic.w	r2, r2, #16
 80043e2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043e4:	8a7b      	ldrh	r3, [r7, #18]
 80043e6:	4619      	mov	r1, r3
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 f842 	bl	8004472 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80043ee:	e01f      	b.n	8004430 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80043f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d008      	beq.n	800440c <HAL_UART_IRQHandler+0x324>
 80043fa:	6a3b      	ldr	r3, [r7, #32]
 80043fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 f8c9 	bl	800459c <UART_Transmit_IT>
    return;
 800440a:	e012      	b.n	8004432 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800440c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00d      	beq.n	8004432 <HAL_UART_IRQHandler+0x34a>
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800441c:	2b00      	cmp	r3, #0
 800441e:	d008      	beq.n	8004432 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 f90a 	bl	800463a <UART_EndTransmit_IT>
    return;
 8004426:	e004      	b.n	8004432 <HAL_UART_IRQHandler+0x34a>
    return;
 8004428:	bf00      	nop
 800442a:	e002      	b.n	8004432 <HAL_UART_IRQHandler+0x34a>
      return;
 800442c:	bf00      	nop
 800442e:	e000      	b.n	8004432 <HAL_UART_IRQHandler+0x34a>
      return;
 8004430:	bf00      	nop
  }
}
 8004432:	3728      	adds	r7, #40	; 0x28
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	08004575 	.word	0x08004575

0800443c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	bc80      	pop	{r7}
 800444c:	4770      	bx	lr

0800444e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	bc80      	pop	{r7}
 800445e:	4770      	bx	lr

08004460 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	bc80      	pop	{r7}
 8004470:	4770      	bx	lr

08004472 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004472:	b480      	push	{r7}
 8004474:	b083      	sub	sp, #12
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
 800447a:	460b      	mov	r3, r1
 800447c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800447e:	bf00      	nop
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	bc80      	pop	{r7}
 8004486:	4770      	bx	lr

08004488 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	603b      	str	r3, [r7, #0]
 8004494:	4613      	mov	r3, r2
 8004496:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004498:	e02c      	b.n	80044f4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a0:	d028      	beq.n	80044f4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d007      	beq.n	80044b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80044a8:	f7fd fd92 	bl	8001fd0 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	69ba      	ldr	r2, [r7, #24]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d21d      	bcs.n	80044f4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68da      	ldr	r2, [r3, #12]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80044c6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	695a      	ldr	r2, [r3, #20]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 0201 	bic.w	r2, r2, #1
 80044d6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2220      	movs	r2, #32
 80044dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2220      	movs	r2, #32
 80044e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e00f      	b.n	8004514 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	4013      	ands	r3, r2
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	429a      	cmp	r2, r3
 8004502:	bf0c      	ite	eq
 8004504:	2301      	moveq	r3, #1
 8004506:	2300      	movne	r3, #0
 8004508:	b2db      	uxtb	r3, r3
 800450a:	461a      	mov	r2, r3
 800450c:	79fb      	ldrb	r3, [r7, #7]
 800450e:	429a      	cmp	r2, r3
 8004510:	d0c3      	beq.n	800449a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68da      	ldr	r2, [r3, #12]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004532:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	695a      	ldr	r2, [r3, #20]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 0201 	bic.w	r2, r2, #1
 8004542:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004548:	2b01      	cmp	r3, #1
 800454a:	d107      	bne.n	800455c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68da      	ldr	r2, [r3, #12]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f022 0210 	bic.w	r2, r2, #16
 800455a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2220      	movs	r2, #32
 8004560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	631a      	str	r2, [r3, #48]	; 0x30
}
 800456a:	bf00      	nop
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	bc80      	pop	{r7}
 8004572:	4770      	bx	lr

08004574 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f7ff ff66 	bl	8004460 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004594:	bf00      	nop
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	2b21      	cmp	r3, #33	; 0x21
 80045ae:	d13e      	bne.n	800462e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045b8:	d114      	bne.n	80045e4 <UART_Transmit_IT+0x48>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d110      	bne.n	80045e4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	881b      	ldrh	r3, [r3, #0]
 80045cc:	461a      	mov	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045d6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	1c9a      	adds	r2, r3, #2
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	621a      	str	r2, [r3, #32]
 80045e2:	e008      	b.n	80045f6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	1c59      	adds	r1, r3, #1
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	6211      	str	r1, [r2, #32]
 80045ee:	781a      	ldrb	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	3b01      	subs	r3, #1
 80045fe:	b29b      	uxth	r3, r3
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	4619      	mov	r1, r3
 8004604:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10f      	bne.n	800462a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68da      	ldr	r2, [r3, #12]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004618:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004628:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800462a:	2300      	movs	r3, #0
 800462c:	e000      	b.n	8004630 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800462e:	2302      	movs	r3, #2
  }
}
 8004630:	4618      	mov	r0, r3
 8004632:	3714      	adds	r7, #20
 8004634:	46bd      	mov	sp, r7
 8004636:	bc80      	pop	{r7}
 8004638:	4770      	bx	lr

0800463a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b082      	sub	sp, #8
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68da      	ldr	r2, [r3, #12]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004650:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2220      	movs	r2, #32
 8004656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7ff feee 	bl	800443c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b086      	sub	sp, #24
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b22      	cmp	r3, #34	; 0x22
 800467c:	f040 8099 	bne.w	80047b2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004688:	d117      	bne.n	80046ba <UART_Receive_IT+0x50>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d113      	bne.n	80046ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004692:	2300      	movs	r3, #0
 8004694:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b2:	1c9a      	adds	r2, r3, #2
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	629a      	str	r2, [r3, #40]	; 0x28
 80046b8:	e026      	b.n	8004708 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046be:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80046c0:	2300      	movs	r3, #0
 80046c2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046cc:	d007      	beq.n	80046de <UART_Receive_IT+0x74>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10a      	bne.n	80046ec <UART_Receive_IT+0x82>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d106      	bne.n	80046ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	701a      	strb	r2, [r3, #0]
 80046ea:	e008      	b.n	80046fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046f8:	b2da      	uxtb	r2, r3
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004702:	1c5a      	adds	r2, r3, #1
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800470c:	b29b      	uxth	r3, r3
 800470e:	3b01      	subs	r3, #1
 8004710:	b29b      	uxth	r3, r3
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	4619      	mov	r1, r3
 8004716:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004718:	2b00      	cmp	r3, #0
 800471a:	d148      	bne.n	80047ae <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0220 	bic.w	r2, r2, #32
 800472a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800473a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	695a      	ldr	r2, [r3, #20]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0201 	bic.w	r2, r2, #1
 800474a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2220      	movs	r2, #32
 8004750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004758:	2b01      	cmp	r3, #1
 800475a:	d123      	bne.n	80047a4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68da      	ldr	r2, [r3, #12]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 0210 	bic.w	r2, r2, #16
 8004770:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0310 	and.w	r3, r3, #16
 800477c:	2b10      	cmp	r3, #16
 800477e:	d10a      	bne.n	8004796 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004780:	2300      	movs	r3, #0
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	60fb      	str	r3, [r7, #12]
 8004794:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800479a:	4619      	mov	r1, r3
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f7ff fe68 	bl	8004472 <HAL_UARTEx_RxEventCallback>
 80047a2:	e002      	b.n	80047aa <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f7ff fe52 	bl	800444e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80047aa:	2300      	movs	r3, #0
 80047ac:	e002      	b.n	80047b4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80047ae:	2300      	movs	r3, #0
 80047b0:	e000      	b.n	80047b4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80047b2:	2302      	movs	r3, #2
  }
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3718      	adds	r7, #24
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68da      	ldr	r2, [r3, #12]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689a      	ldr	r2, [r3, #8]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80047f6:	f023 030c 	bic.w	r3, r3, #12
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6812      	ldr	r2, [r2, #0]
 80047fe:	68b9      	ldr	r1, [r7, #8]
 8004800:	430b      	orrs	r3, r1
 8004802:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	699a      	ldr	r2, [r3, #24]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a2c      	ldr	r2, [pc, #176]	; (80048d0 <UART_SetConfig+0x114>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d103      	bne.n	800482c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004824:	f7fe fb96 	bl	8002f54 <HAL_RCC_GetPCLK2Freq>
 8004828:	60f8      	str	r0, [r7, #12]
 800482a:	e002      	b.n	8004832 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800482c:	f7fe fb7e 	bl	8002f2c <HAL_RCC_GetPCLK1Freq>
 8004830:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	4613      	mov	r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	009a      	lsls	r2, r3, #2
 800483c:	441a      	add	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	fbb2 f3f3 	udiv	r3, r2, r3
 8004848:	4a22      	ldr	r2, [pc, #136]	; (80048d4 <UART_SetConfig+0x118>)
 800484a:	fba2 2303 	umull	r2, r3, r2, r3
 800484e:	095b      	lsrs	r3, r3, #5
 8004850:	0119      	lsls	r1, r3, #4
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	4613      	mov	r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	4413      	add	r3, r2
 800485a:	009a      	lsls	r2, r3, #2
 800485c:	441a      	add	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	fbb2 f2f3 	udiv	r2, r2, r3
 8004868:	4b1a      	ldr	r3, [pc, #104]	; (80048d4 <UART_SetConfig+0x118>)
 800486a:	fba3 0302 	umull	r0, r3, r3, r2
 800486e:	095b      	lsrs	r3, r3, #5
 8004870:	2064      	movs	r0, #100	; 0x64
 8004872:	fb00 f303 	mul.w	r3, r0, r3
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	011b      	lsls	r3, r3, #4
 800487a:	3332      	adds	r3, #50	; 0x32
 800487c:	4a15      	ldr	r2, [pc, #84]	; (80048d4 <UART_SetConfig+0x118>)
 800487e:	fba2 2303 	umull	r2, r3, r2, r3
 8004882:	095b      	lsrs	r3, r3, #5
 8004884:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004888:	4419      	add	r1, r3
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	4613      	mov	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4413      	add	r3, r2
 8004892:	009a      	lsls	r2, r3, #2
 8004894:	441a      	add	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	fbb2 f2f3 	udiv	r2, r2, r3
 80048a0:	4b0c      	ldr	r3, [pc, #48]	; (80048d4 <UART_SetConfig+0x118>)
 80048a2:	fba3 0302 	umull	r0, r3, r3, r2
 80048a6:	095b      	lsrs	r3, r3, #5
 80048a8:	2064      	movs	r0, #100	; 0x64
 80048aa:	fb00 f303 	mul.w	r3, r0, r3
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	011b      	lsls	r3, r3, #4
 80048b2:	3332      	adds	r3, #50	; 0x32
 80048b4:	4a07      	ldr	r2, [pc, #28]	; (80048d4 <UART_SetConfig+0x118>)
 80048b6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ba:	095b      	lsrs	r3, r3, #5
 80048bc:	f003 020f 	and.w	r2, r3, #15
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	440a      	add	r2, r1
 80048c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80048c8:	bf00      	nop
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	40013800 	.word	0x40013800
 80048d4:	51eb851f 	.word	0x51eb851f

080048d8 <siprintf>:
 80048d8:	b40e      	push	{r1, r2, r3}
 80048da:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80048de:	b500      	push	{lr}
 80048e0:	b09c      	sub	sp, #112	; 0x70
 80048e2:	ab1d      	add	r3, sp, #116	; 0x74
 80048e4:	9002      	str	r0, [sp, #8]
 80048e6:	9006      	str	r0, [sp, #24]
 80048e8:	9107      	str	r1, [sp, #28]
 80048ea:	9104      	str	r1, [sp, #16]
 80048ec:	4808      	ldr	r0, [pc, #32]	; (8004910 <siprintf+0x38>)
 80048ee:	4909      	ldr	r1, [pc, #36]	; (8004914 <siprintf+0x3c>)
 80048f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80048f4:	9105      	str	r1, [sp, #20]
 80048f6:	6800      	ldr	r0, [r0, #0]
 80048f8:	a902      	add	r1, sp, #8
 80048fa:	9301      	str	r3, [sp, #4]
 80048fc:	f000 f98e 	bl	8004c1c <_svfiprintf_r>
 8004900:	2200      	movs	r2, #0
 8004902:	9b02      	ldr	r3, [sp, #8]
 8004904:	701a      	strb	r2, [r3, #0]
 8004906:	b01c      	add	sp, #112	; 0x70
 8004908:	f85d eb04 	ldr.w	lr, [sp], #4
 800490c:	b003      	add	sp, #12
 800490e:	4770      	bx	lr
 8004910:	20000064 	.word	0x20000064
 8004914:	ffff0208 	.word	0xffff0208

08004918 <memset>:
 8004918:	4603      	mov	r3, r0
 800491a:	4402      	add	r2, r0
 800491c:	4293      	cmp	r3, r2
 800491e:	d100      	bne.n	8004922 <memset+0xa>
 8004920:	4770      	bx	lr
 8004922:	f803 1b01 	strb.w	r1, [r3], #1
 8004926:	e7f9      	b.n	800491c <memset+0x4>

08004928 <__errno>:
 8004928:	4b01      	ldr	r3, [pc, #4]	; (8004930 <__errno+0x8>)
 800492a:	6818      	ldr	r0, [r3, #0]
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	20000064 	.word	0x20000064

08004934 <__libc_init_array>:
 8004934:	b570      	push	{r4, r5, r6, lr}
 8004936:	2600      	movs	r6, #0
 8004938:	4d0c      	ldr	r5, [pc, #48]	; (800496c <__libc_init_array+0x38>)
 800493a:	4c0d      	ldr	r4, [pc, #52]	; (8004970 <__libc_init_array+0x3c>)
 800493c:	1b64      	subs	r4, r4, r5
 800493e:	10a4      	asrs	r4, r4, #2
 8004940:	42a6      	cmp	r6, r4
 8004942:	d109      	bne.n	8004958 <__libc_init_array+0x24>
 8004944:	f000 fc7a 	bl	800523c <_init>
 8004948:	2600      	movs	r6, #0
 800494a:	4d0a      	ldr	r5, [pc, #40]	; (8004974 <__libc_init_array+0x40>)
 800494c:	4c0a      	ldr	r4, [pc, #40]	; (8004978 <__libc_init_array+0x44>)
 800494e:	1b64      	subs	r4, r4, r5
 8004950:	10a4      	asrs	r4, r4, #2
 8004952:	42a6      	cmp	r6, r4
 8004954:	d105      	bne.n	8004962 <__libc_init_array+0x2e>
 8004956:	bd70      	pop	{r4, r5, r6, pc}
 8004958:	f855 3b04 	ldr.w	r3, [r5], #4
 800495c:	4798      	blx	r3
 800495e:	3601      	adds	r6, #1
 8004960:	e7ee      	b.n	8004940 <__libc_init_array+0xc>
 8004962:	f855 3b04 	ldr.w	r3, [r5], #4
 8004966:	4798      	blx	r3
 8004968:	3601      	adds	r6, #1
 800496a:	e7f2      	b.n	8004952 <__libc_init_array+0x1e>
 800496c:	080052b8 	.word	0x080052b8
 8004970:	080052b8 	.word	0x080052b8
 8004974:	080052b8 	.word	0x080052b8
 8004978:	080052bc 	.word	0x080052bc

0800497c <__retarget_lock_acquire_recursive>:
 800497c:	4770      	bx	lr

0800497e <__retarget_lock_release_recursive>:
 800497e:	4770      	bx	lr

08004980 <_free_r>:
 8004980:	b538      	push	{r3, r4, r5, lr}
 8004982:	4605      	mov	r5, r0
 8004984:	2900      	cmp	r1, #0
 8004986:	d040      	beq.n	8004a0a <_free_r+0x8a>
 8004988:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800498c:	1f0c      	subs	r4, r1, #4
 800498e:	2b00      	cmp	r3, #0
 8004990:	bfb8      	it	lt
 8004992:	18e4      	addlt	r4, r4, r3
 8004994:	f000 f8dc 	bl	8004b50 <__malloc_lock>
 8004998:	4a1c      	ldr	r2, [pc, #112]	; (8004a0c <_free_r+0x8c>)
 800499a:	6813      	ldr	r3, [r2, #0]
 800499c:	b933      	cbnz	r3, 80049ac <_free_r+0x2c>
 800499e:	6063      	str	r3, [r4, #4]
 80049a0:	6014      	str	r4, [r2, #0]
 80049a2:	4628      	mov	r0, r5
 80049a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049a8:	f000 b8d8 	b.w	8004b5c <__malloc_unlock>
 80049ac:	42a3      	cmp	r3, r4
 80049ae:	d908      	bls.n	80049c2 <_free_r+0x42>
 80049b0:	6820      	ldr	r0, [r4, #0]
 80049b2:	1821      	adds	r1, r4, r0
 80049b4:	428b      	cmp	r3, r1
 80049b6:	bf01      	itttt	eq
 80049b8:	6819      	ldreq	r1, [r3, #0]
 80049ba:	685b      	ldreq	r3, [r3, #4]
 80049bc:	1809      	addeq	r1, r1, r0
 80049be:	6021      	streq	r1, [r4, #0]
 80049c0:	e7ed      	b.n	800499e <_free_r+0x1e>
 80049c2:	461a      	mov	r2, r3
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	b10b      	cbz	r3, 80049cc <_free_r+0x4c>
 80049c8:	42a3      	cmp	r3, r4
 80049ca:	d9fa      	bls.n	80049c2 <_free_r+0x42>
 80049cc:	6811      	ldr	r1, [r2, #0]
 80049ce:	1850      	adds	r0, r2, r1
 80049d0:	42a0      	cmp	r0, r4
 80049d2:	d10b      	bne.n	80049ec <_free_r+0x6c>
 80049d4:	6820      	ldr	r0, [r4, #0]
 80049d6:	4401      	add	r1, r0
 80049d8:	1850      	adds	r0, r2, r1
 80049da:	4283      	cmp	r3, r0
 80049dc:	6011      	str	r1, [r2, #0]
 80049de:	d1e0      	bne.n	80049a2 <_free_r+0x22>
 80049e0:	6818      	ldr	r0, [r3, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	4408      	add	r0, r1
 80049e6:	6010      	str	r0, [r2, #0]
 80049e8:	6053      	str	r3, [r2, #4]
 80049ea:	e7da      	b.n	80049a2 <_free_r+0x22>
 80049ec:	d902      	bls.n	80049f4 <_free_r+0x74>
 80049ee:	230c      	movs	r3, #12
 80049f0:	602b      	str	r3, [r5, #0]
 80049f2:	e7d6      	b.n	80049a2 <_free_r+0x22>
 80049f4:	6820      	ldr	r0, [r4, #0]
 80049f6:	1821      	adds	r1, r4, r0
 80049f8:	428b      	cmp	r3, r1
 80049fa:	bf01      	itttt	eq
 80049fc:	6819      	ldreq	r1, [r3, #0]
 80049fe:	685b      	ldreq	r3, [r3, #4]
 8004a00:	1809      	addeq	r1, r1, r0
 8004a02:	6021      	streq	r1, [r4, #0]
 8004a04:	6063      	str	r3, [r4, #4]
 8004a06:	6054      	str	r4, [r2, #4]
 8004a08:	e7cb      	b.n	80049a2 <_free_r+0x22>
 8004a0a:	bd38      	pop	{r3, r4, r5, pc}
 8004a0c:	20000454 	.word	0x20000454

08004a10 <sbrk_aligned>:
 8004a10:	b570      	push	{r4, r5, r6, lr}
 8004a12:	4e0e      	ldr	r6, [pc, #56]	; (8004a4c <sbrk_aligned+0x3c>)
 8004a14:	460c      	mov	r4, r1
 8004a16:	6831      	ldr	r1, [r6, #0]
 8004a18:	4605      	mov	r5, r0
 8004a1a:	b911      	cbnz	r1, 8004a22 <sbrk_aligned+0x12>
 8004a1c:	f000 fbaa 	bl	8005174 <_sbrk_r>
 8004a20:	6030      	str	r0, [r6, #0]
 8004a22:	4621      	mov	r1, r4
 8004a24:	4628      	mov	r0, r5
 8004a26:	f000 fba5 	bl	8005174 <_sbrk_r>
 8004a2a:	1c43      	adds	r3, r0, #1
 8004a2c:	d00a      	beq.n	8004a44 <sbrk_aligned+0x34>
 8004a2e:	1cc4      	adds	r4, r0, #3
 8004a30:	f024 0403 	bic.w	r4, r4, #3
 8004a34:	42a0      	cmp	r0, r4
 8004a36:	d007      	beq.n	8004a48 <sbrk_aligned+0x38>
 8004a38:	1a21      	subs	r1, r4, r0
 8004a3a:	4628      	mov	r0, r5
 8004a3c:	f000 fb9a 	bl	8005174 <_sbrk_r>
 8004a40:	3001      	adds	r0, #1
 8004a42:	d101      	bne.n	8004a48 <sbrk_aligned+0x38>
 8004a44:	f04f 34ff 	mov.w	r4, #4294967295
 8004a48:	4620      	mov	r0, r4
 8004a4a:	bd70      	pop	{r4, r5, r6, pc}
 8004a4c:	20000458 	.word	0x20000458

08004a50 <_malloc_r>:
 8004a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a54:	1ccd      	adds	r5, r1, #3
 8004a56:	f025 0503 	bic.w	r5, r5, #3
 8004a5a:	3508      	adds	r5, #8
 8004a5c:	2d0c      	cmp	r5, #12
 8004a5e:	bf38      	it	cc
 8004a60:	250c      	movcc	r5, #12
 8004a62:	2d00      	cmp	r5, #0
 8004a64:	4607      	mov	r7, r0
 8004a66:	db01      	blt.n	8004a6c <_malloc_r+0x1c>
 8004a68:	42a9      	cmp	r1, r5
 8004a6a:	d905      	bls.n	8004a78 <_malloc_r+0x28>
 8004a6c:	230c      	movs	r3, #12
 8004a6e:	2600      	movs	r6, #0
 8004a70:	603b      	str	r3, [r7, #0]
 8004a72:	4630      	mov	r0, r6
 8004a74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a78:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004b4c <_malloc_r+0xfc>
 8004a7c:	f000 f868 	bl	8004b50 <__malloc_lock>
 8004a80:	f8d8 3000 	ldr.w	r3, [r8]
 8004a84:	461c      	mov	r4, r3
 8004a86:	bb5c      	cbnz	r4, 8004ae0 <_malloc_r+0x90>
 8004a88:	4629      	mov	r1, r5
 8004a8a:	4638      	mov	r0, r7
 8004a8c:	f7ff ffc0 	bl	8004a10 <sbrk_aligned>
 8004a90:	1c43      	adds	r3, r0, #1
 8004a92:	4604      	mov	r4, r0
 8004a94:	d155      	bne.n	8004b42 <_malloc_r+0xf2>
 8004a96:	f8d8 4000 	ldr.w	r4, [r8]
 8004a9a:	4626      	mov	r6, r4
 8004a9c:	2e00      	cmp	r6, #0
 8004a9e:	d145      	bne.n	8004b2c <_malloc_r+0xdc>
 8004aa0:	2c00      	cmp	r4, #0
 8004aa2:	d048      	beq.n	8004b36 <_malloc_r+0xe6>
 8004aa4:	6823      	ldr	r3, [r4, #0]
 8004aa6:	4631      	mov	r1, r6
 8004aa8:	4638      	mov	r0, r7
 8004aaa:	eb04 0903 	add.w	r9, r4, r3
 8004aae:	f000 fb61 	bl	8005174 <_sbrk_r>
 8004ab2:	4581      	cmp	r9, r0
 8004ab4:	d13f      	bne.n	8004b36 <_malloc_r+0xe6>
 8004ab6:	6821      	ldr	r1, [r4, #0]
 8004ab8:	4638      	mov	r0, r7
 8004aba:	1a6d      	subs	r5, r5, r1
 8004abc:	4629      	mov	r1, r5
 8004abe:	f7ff ffa7 	bl	8004a10 <sbrk_aligned>
 8004ac2:	3001      	adds	r0, #1
 8004ac4:	d037      	beq.n	8004b36 <_malloc_r+0xe6>
 8004ac6:	6823      	ldr	r3, [r4, #0]
 8004ac8:	442b      	add	r3, r5
 8004aca:	6023      	str	r3, [r4, #0]
 8004acc:	f8d8 3000 	ldr.w	r3, [r8]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d038      	beq.n	8004b46 <_malloc_r+0xf6>
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	42a2      	cmp	r2, r4
 8004ad8:	d12b      	bne.n	8004b32 <_malloc_r+0xe2>
 8004ada:	2200      	movs	r2, #0
 8004adc:	605a      	str	r2, [r3, #4]
 8004ade:	e00f      	b.n	8004b00 <_malloc_r+0xb0>
 8004ae0:	6822      	ldr	r2, [r4, #0]
 8004ae2:	1b52      	subs	r2, r2, r5
 8004ae4:	d41f      	bmi.n	8004b26 <_malloc_r+0xd6>
 8004ae6:	2a0b      	cmp	r2, #11
 8004ae8:	d917      	bls.n	8004b1a <_malloc_r+0xca>
 8004aea:	1961      	adds	r1, r4, r5
 8004aec:	42a3      	cmp	r3, r4
 8004aee:	6025      	str	r5, [r4, #0]
 8004af0:	bf18      	it	ne
 8004af2:	6059      	strne	r1, [r3, #4]
 8004af4:	6863      	ldr	r3, [r4, #4]
 8004af6:	bf08      	it	eq
 8004af8:	f8c8 1000 	streq.w	r1, [r8]
 8004afc:	5162      	str	r2, [r4, r5]
 8004afe:	604b      	str	r3, [r1, #4]
 8004b00:	4638      	mov	r0, r7
 8004b02:	f104 060b 	add.w	r6, r4, #11
 8004b06:	f000 f829 	bl	8004b5c <__malloc_unlock>
 8004b0a:	f026 0607 	bic.w	r6, r6, #7
 8004b0e:	1d23      	adds	r3, r4, #4
 8004b10:	1af2      	subs	r2, r6, r3
 8004b12:	d0ae      	beq.n	8004a72 <_malloc_r+0x22>
 8004b14:	1b9b      	subs	r3, r3, r6
 8004b16:	50a3      	str	r3, [r4, r2]
 8004b18:	e7ab      	b.n	8004a72 <_malloc_r+0x22>
 8004b1a:	42a3      	cmp	r3, r4
 8004b1c:	6862      	ldr	r2, [r4, #4]
 8004b1e:	d1dd      	bne.n	8004adc <_malloc_r+0x8c>
 8004b20:	f8c8 2000 	str.w	r2, [r8]
 8004b24:	e7ec      	b.n	8004b00 <_malloc_r+0xb0>
 8004b26:	4623      	mov	r3, r4
 8004b28:	6864      	ldr	r4, [r4, #4]
 8004b2a:	e7ac      	b.n	8004a86 <_malloc_r+0x36>
 8004b2c:	4634      	mov	r4, r6
 8004b2e:	6876      	ldr	r6, [r6, #4]
 8004b30:	e7b4      	b.n	8004a9c <_malloc_r+0x4c>
 8004b32:	4613      	mov	r3, r2
 8004b34:	e7cc      	b.n	8004ad0 <_malloc_r+0x80>
 8004b36:	230c      	movs	r3, #12
 8004b38:	4638      	mov	r0, r7
 8004b3a:	603b      	str	r3, [r7, #0]
 8004b3c:	f000 f80e 	bl	8004b5c <__malloc_unlock>
 8004b40:	e797      	b.n	8004a72 <_malloc_r+0x22>
 8004b42:	6025      	str	r5, [r4, #0]
 8004b44:	e7dc      	b.n	8004b00 <_malloc_r+0xb0>
 8004b46:	605b      	str	r3, [r3, #4]
 8004b48:	deff      	udf	#255	; 0xff
 8004b4a:	bf00      	nop
 8004b4c:	20000454 	.word	0x20000454

08004b50 <__malloc_lock>:
 8004b50:	4801      	ldr	r0, [pc, #4]	; (8004b58 <__malloc_lock+0x8>)
 8004b52:	f7ff bf13 	b.w	800497c <__retarget_lock_acquire_recursive>
 8004b56:	bf00      	nop
 8004b58:	20000450 	.word	0x20000450

08004b5c <__malloc_unlock>:
 8004b5c:	4801      	ldr	r0, [pc, #4]	; (8004b64 <__malloc_unlock+0x8>)
 8004b5e:	f7ff bf0e 	b.w	800497e <__retarget_lock_release_recursive>
 8004b62:	bf00      	nop
 8004b64:	20000450 	.word	0x20000450

08004b68 <__ssputs_r>:
 8004b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b6c:	461f      	mov	r7, r3
 8004b6e:	688e      	ldr	r6, [r1, #8]
 8004b70:	4682      	mov	sl, r0
 8004b72:	42be      	cmp	r6, r7
 8004b74:	460c      	mov	r4, r1
 8004b76:	4690      	mov	r8, r2
 8004b78:	680b      	ldr	r3, [r1, #0]
 8004b7a:	d82c      	bhi.n	8004bd6 <__ssputs_r+0x6e>
 8004b7c:	898a      	ldrh	r2, [r1, #12]
 8004b7e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004b82:	d026      	beq.n	8004bd2 <__ssputs_r+0x6a>
 8004b84:	6965      	ldr	r5, [r4, #20]
 8004b86:	6909      	ldr	r1, [r1, #16]
 8004b88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b8c:	eba3 0901 	sub.w	r9, r3, r1
 8004b90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b94:	1c7b      	adds	r3, r7, #1
 8004b96:	444b      	add	r3, r9
 8004b98:	106d      	asrs	r5, r5, #1
 8004b9a:	429d      	cmp	r5, r3
 8004b9c:	bf38      	it	cc
 8004b9e:	461d      	movcc	r5, r3
 8004ba0:	0553      	lsls	r3, r2, #21
 8004ba2:	d527      	bpl.n	8004bf4 <__ssputs_r+0x8c>
 8004ba4:	4629      	mov	r1, r5
 8004ba6:	f7ff ff53 	bl	8004a50 <_malloc_r>
 8004baa:	4606      	mov	r6, r0
 8004bac:	b360      	cbz	r0, 8004c08 <__ssputs_r+0xa0>
 8004bae:	464a      	mov	r2, r9
 8004bb0:	6921      	ldr	r1, [r4, #16]
 8004bb2:	f000 fafd 	bl	80051b0 <memcpy>
 8004bb6:	89a3      	ldrh	r3, [r4, #12]
 8004bb8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bc0:	81a3      	strh	r3, [r4, #12]
 8004bc2:	6126      	str	r6, [r4, #16]
 8004bc4:	444e      	add	r6, r9
 8004bc6:	6026      	str	r6, [r4, #0]
 8004bc8:	463e      	mov	r6, r7
 8004bca:	6165      	str	r5, [r4, #20]
 8004bcc:	eba5 0509 	sub.w	r5, r5, r9
 8004bd0:	60a5      	str	r5, [r4, #8]
 8004bd2:	42be      	cmp	r6, r7
 8004bd4:	d900      	bls.n	8004bd8 <__ssputs_r+0x70>
 8004bd6:	463e      	mov	r6, r7
 8004bd8:	4632      	mov	r2, r6
 8004bda:	4641      	mov	r1, r8
 8004bdc:	6820      	ldr	r0, [r4, #0]
 8004bde:	f000 faaf 	bl	8005140 <memmove>
 8004be2:	2000      	movs	r0, #0
 8004be4:	68a3      	ldr	r3, [r4, #8]
 8004be6:	1b9b      	subs	r3, r3, r6
 8004be8:	60a3      	str	r3, [r4, #8]
 8004bea:	6823      	ldr	r3, [r4, #0]
 8004bec:	4433      	add	r3, r6
 8004bee:	6023      	str	r3, [r4, #0]
 8004bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bf4:	462a      	mov	r2, r5
 8004bf6:	f000 fae9 	bl	80051cc <_realloc_r>
 8004bfa:	4606      	mov	r6, r0
 8004bfc:	2800      	cmp	r0, #0
 8004bfe:	d1e0      	bne.n	8004bc2 <__ssputs_r+0x5a>
 8004c00:	4650      	mov	r0, sl
 8004c02:	6921      	ldr	r1, [r4, #16]
 8004c04:	f7ff febc 	bl	8004980 <_free_r>
 8004c08:	230c      	movs	r3, #12
 8004c0a:	f8ca 3000 	str.w	r3, [sl]
 8004c0e:	89a3      	ldrh	r3, [r4, #12]
 8004c10:	f04f 30ff 	mov.w	r0, #4294967295
 8004c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c18:	81a3      	strh	r3, [r4, #12]
 8004c1a:	e7e9      	b.n	8004bf0 <__ssputs_r+0x88>

08004c1c <_svfiprintf_r>:
 8004c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c20:	4698      	mov	r8, r3
 8004c22:	898b      	ldrh	r3, [r1, #12]
 8004c24:	4607      	mov	r7, r0
 8004c26:	061b      	lsls	r3, r3, #24
 8004c28:	460d      	mov	r5, r1
 8004c2a:	4614      	mov	r4, r2
 8004c2c:	b09d      	sub	sp, #116	; 0x74
 8004c2e:	d50e      	bpl.n	8004c4e <_svfiprintf_r+0x32>
 8004c30:	690b      	ldr	r3, [r1, #16]
 8004c32:	b963      	cbnz	r3, 8004c4e <_svfiprintf_r+0x32>
 8004c34:	2140      	movs	r1, #64	; 0x40
 8004c36:	f7ff ff0b 	bl	8004a50 <_malloc_r>
 8004c3a:	6028      	str	r0, [r5, #0]
 8004c3c:	6128      	str	r0, [r5, #16]
 8004c3e:	b920      	cbnz	r0, 8004c4a <_svfiprintf_r+0x2e>
 8004c40:	230c      	movs	r3, #12
 8004c42:	603b      	str	r3, [r7, #0]
 8004c44:	f04f 30ff 	mov.w	r0, #4294967295
 8004c48:	e0d0      	b.n	8004dec <_svfiprintf_r+0x1d0>
 8004c4a:	2340      	movs	r3, #64	; 0x40
 8004c4c:	616b      	str	r3, [r5, #20]
 8004c4e:	2300      	movs	r3, #0
 8004c50:	9309      	str	r3, [sp, #36]	; 0x24
 8004c52:	2320      	movs	r3, #32
 8004c54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c58:	2330      	movs	r3, #48	; 0x30
 8004c5a:	f04f 0901 	mov.w	r9, #1
 8004c5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c62:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8004e04 <_svfiprintf_r+0x1e8>
 8004c66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c6a:	4623      	mov	r3, r4
 8004c6c:	469a      	mov	sl, r3
 8004c6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c72:	b10a      	cbz	r2, 8004c78 <_svfiprintf_r+0x5c>
 8004c74:	2a25      	cmp	r2, #37	; 0x25
 8004c76:	d1f9      	bne.n	8004c6c <_svfiprintf_r+0x50>
 8004c78:	ebba 0b04 	subs.w	fp, sl, r4
 8004c7c:	d00b      	beq.n	8004c96 <_svfiprintf_r+0x7a>
 8004c7e:	465b      	mov	r3, fp
 8004c80:	4622      	mov	r2, r4
 8004c82:	4629      	mov	r1, r5
 8004c84:	4638      	mov	r0, r7
 8004c86:	f7ff ff6f 	bl	8004b68 <__ssputs_r>
 8004c8a:	3001      	adds	r0, #1
 8004c8c:	f000 80a9 	beq.w	8004de2 <_svfiprintf_r+0x1c6>
 8004c90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c92:	445a      	add	r2, fp
 8004c94:	9209      	str	r2, [sp, #36]	; 0x24
 8004c96:	f89a 3000 	ldrb.w	r3, [sl]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 80a1 	beq.w	8004de2 <_svfiprintf_r+0x1c6>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ca6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004caa:	f10a 0a01 	add.w	sl, sl, #1
 8004cae:	9304      	str	r3, [sp, #16]
 8004cb0:	9307      	str	r3, [sp, #28]
 8004cb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004cb6:	931a      	str	r3, [sp, #104]	; 0x68
 8004cb8:	4654      	mov	r4, sl
 8004cba:	2205      	movs	r2, #5
 8004cbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cc0:	4850      	ldr	r0, [pc, #320]	; (8004e04 <_svfiprintf_r+0x1e8>)
 8004cc2:	f000 fa67 	bl	8005194 <memchr>
 8004cc6:	9a04      	ldr	r2, [sp, #16]
 8004cc8:	b9d8      	cbnz	r0, 8004d02 <_svfiprintf_r+0xe6>
 8004cca:	06d0      	lsls	r0, r2, #27
 8004ccc:	bf44      	itt	mi
 8004cce:	2320      	movmi	r3, #32
 8004cd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cd4:	0711      	lsls	r1, r2, #28
 8004cd6:	bf44      	itt	mi
 8004cd8:	232b      	movmi	r3, #43	; 0x2b
 8004cda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cde:	f89a 3000 	ldrb.w	r3, [sl]
 8004ce2:	2b2a      	cmp	r3, #42	; 0x2a
 8004ce4:	d015      	beq.n	8004d12 <_svfiprintf_r+0xf6>
 8004ce6:	4654      	mov	r4, sl
 8004ce8:	2000      	movs	r0, #0
 8004cea:	f04f 0c0a 	mov.w	ip, #10
 8004cee:	9a07      	ldr	r2, [sp, #28]
 8004cf0:	4621      	mov	r1, r4
 8004cf2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cf6:	3b30      	subs	r3, #48	; 0x30
 8004cf8:	2b09      	cmp	r3, #9
 8004cfa:	d94d      	bls.n	8004d98 <_svfiprintf_r+0x17c>
 8004cfc:	b1b0      	cbz	r0, 8004d2c <_svfiprintf_r+0x110>
 8004cfe:	9207      	str	r2, [sp, #28]
 8004d00:	e014      	b.n	8004d2c <_svfiprintf_r+0x110>
 8004d02:	eba0 0308 	sub.w	r3, r0, r8
 8004d06:	fa09 f303 	lsl.w	r3, r9, r3
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	46a2      	mov	sl, r4
 8004d0e:	9304      	str	r3, [sp, #16]
 8004d10:	e7d2      	b.n	8004cb8 <_svfiprintf_r+0x9c>
 8004d12:	9b03      	ldr	r3, [sp, #12]
 8004d14:	1d19      	adds	r1, r3, #4
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	9103      	str	r1, [sp, #12]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	bfbb      	ittet	lt
 8004d1e:	425b      	neglt	r3, r3
 8004d20:	f042 0202 	orrlt.w	r2, r2, #2
 8004d24:	9307      	strge	r3, [sp, #28]
 8004d26:	9307      	strlt	r3, [sp, #28]
 8004d28:	bfb8      	it	lt
 8004d2a:	9204      	strlt	r2, [sp, #16]
 8004d2c:	7823      	ldrb	r3, [r4, #0]
 8004d2e:	2b2e      	cmp	r3, #46	; 0x2e
 8004d30:	d10c      	bne.n	8004d4c <_svfiprintf_r+0x130>
 8004d32:	7863      	ldrb	r3, [r4, #1]
 8004d34:	2b2a      	cmp	r3, #42	; 0x2a
 8004d36:	d134      	bne.n	8004da2 <_svfiprintf_r+0x186>
 8004d38:	9b03      	ldr	r3, [sp, #12]
 8004d3a:	3402      	adds	r4, #2
 8004d3c:	1d1a      	adds	r2, r3, #4
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	9203      	str	r2, [sp, #12]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	bfb8      	it	lt
 8004d46:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d4a:	9305      	str	r3, [sp, #20]
 8004d4c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004e08 <_svfiprintf_r+0x1ec>
 8004d50:	2203      	movs	r2, #3
 8004d52:	4650      	mov	r0, sl
 8004d54:	7821      	ldrb	r1, [r4, #0]
 8004d56:	f000 fa1d 	bl	8005194 <memchr>
 8004d5a:	b138      	cbz	r0, 8004d6c <_svfiprintf_r+0x150>
 8004d5c:	2240      	movs	r2, #64	; 0x40
 8004d5e:	9b04      	ldr	r3, [sp, #16]
 8004d60:	eba0 000a 	sub.w	r0, r0, sl
 8004d64:	4082      	lsls	r2, r0
 8004d66:	4313      	orrs	r3, r2
 8004d68:	3401      	adds	r4, #1
 8004d6a:	9304      	str	r3, [sp, #16]
 8004d6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d70:	2206      	movs	r2, #6
 8004d72:	4826      	ldr	r0, [pc, #152]	; (8004e0c <_svfiprintf_r+0x1f0>)
 8004d74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d78:	f000 fa0c 	bl	8005194 <memchr>
 8004d7c:	2800      	cmp	r0, #0
 8004d7e:	d038      	beq.n	8004df2 <_svfiprintf_r+0x1d6>
 8004d80:	4b23      	ldr	r3, [pc, #140]	; (8004e10 <_svfiprintf_r+0x1f4>)
 8004d82:	bb1b      	cbnz	r3, 8004dcc <_svfiprintf_r+0x1b0>
 8004d84:	9b03      	ldr	r3, [sp, #12]
 8004d86:	3307      	adds	r3, #7
 8004d88:	f023 0307 	bic.w	r3, r3, #7
 8004d8c:	3308      	adds	r3, #8
 8004d8e:	9303      	str	r3, [sp, #12]
 8004d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d92:	4433      	add	r3, r6
 8004d94:	9309      	str	r3, [sp, #36]	; 0x24
 8004d96:	e768      	b.n	8004c6a <_svfiprintf_r+0x4e>
 8004d98:	460c      	mov	r4, r1
 8004d9a:	2001      	movs	r0, #1
 8004d9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004da0:	e7a6      	b.n	8004cf0 <_svfiprintf_r+0xd4>
 8004da2:	2300      	movs	r3, #0
 8004da4:	f04f 0c0a 	mov.w	ip, #10
 8004da8:	4619      	mov	r1, r3
 8004daa:	3401      	adds	r4, #1
 8004dac:	9305      	str	r3, [sp, #20]
 8004dae:	4620      	mov	r0, r4
 8004db0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004db4:	3a30      	subs	r2, #48	; 0x30
 8004db6:	2a09      	cmp	r2, #9
 8004db8:	d903      	bls.n	8004dc2 <_svfiprintf_r+0x1a6>
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d0c6      	beq.n	8004d4c <_svfiprintf_r+0x130>
 8004dbe:	9105      	str	r1, [sp, #20]
 8004dc0:	e7c4      	b.n	8004d4c <_svfiprintf_r+0x130>
 8004dc2:	4604      	mov	r4, r0
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	fb0c 2101 	mla	r1, ip, r1, r2
 8004dca:	e7f0      	b.n	8004dae <_svfiprintf_r+0x192>
 8004dcc:	ab03      	add	r3, sp, #12
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	462a      	mov	r2, r5
 8004dd2:	4638      	mov	r0, r7
 8004dd4:	4b0f      	ldr	r3, [pc, #60]	; (8004e14 <_svfiprintf_r+0x1f8>)
 8004dd6:	a904      	add	r1, sp, #16
 8004dd8:	f3af 8000 	nop.w
 8004ddc:	1c42      	adds	r2, r0, #1
 8004dde:	4606      	mov	r6, r0
 8004de0:	d1d6      	bne.n	8004d90 <_svfiprintf_r+0x174>
 8004de2:	89ab      	ldrh	r3, [r5, #12]
 8004de4:	065b      	lsls	r3, r3, #25
 8004de6:	f53f af2d 	bmi.w	8004c44 <_svfiprintf_r+0x28>
 8004dea:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004dec:	b01d      	add	sp, #116	; 0x74
 8004dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004df2:	ab03      	add	r3, sp, #12
 8004df4:	9300      	str	r3, [sp, #0]
 8004df6:	462a      	mov	r2, r5
 8004df8:	4638      	mov	r0, r7
 8004dfa:	4b06      	ldr	r3, [pc, #24]	; (8004e14 <_svfiprintf_r+0x1f8>)
 8004dfc:	a904      	add	r1, sp, #16
 8004dfe:	f000 f87d 	bl	8004efc <_printf_i>
 8004e02:	e7eb      	b.n	8004ddc <_svfiprintf_r+0x1c0>
 8004e04:	08005284 	.word	0x08005284
 8004e08:	0800528a 	.word	0x0800528a
 8004e0c:	0800528e 	.word	0x0800528e
 8004e10:	00000000 	.word	0x00000000
 8004e14:	08004b69 	.word	0x08004b69

08004e18 <_printf_common>:
 8004e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e1c:	4616      	mov	r6, r2
 8004e1e:	4699      	mov	r9, r3
 8004e20:	688a      	ldr	r2, [r1, #8]
 8004e22:	690b      	ldr	r3, [r1, #16]
 8004e24:	4607      	mov	r7, r0
 8004e26:	4293      	cmp	r3, r2
 8004e28:	bfb8      	it	lt
 8004e2a:	4613      	movlt	r3, r2
 8004e2c:	6033      	str	r3, [r6, #0]
 8004e2e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e32:	460c      	mov	r4, r1
 8004e34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e38:	b10a      	cbz	r2, 8004e3e <_printf_common+0x26>
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	6033      	str	r3, [r6, #0]
 8004e3e:	6823      	ldr	r3, [r4, #0]
 8004e40:	0699      	lsls	r1, r3, #26
 8004e42:	bf42      	ittt	mi
 8004e44:	6833      	ldrmi	r3, [r6, #0]
 8004e46:	3302      	addmi	r3, #2
 8004e48:	6033      	strmi	r3, [r6, #0]
 8004e4a:	6825      	ldr	r5, [r4, #0]
 8004e4c:	f015 0506 	ands.w	r5, r5, #6
 8004e50:	d106      	bne.n	8004e60 <_printf_common+0x48>
 8004e52:	f104 0a19 	add.w	sl, r4, #25
 8004e56:	68e3      	ldr	r3, [r4, #12]
 8004e58:	6832      	ldr	r2, [r6, #0]
 8004e5a:	1a9b      	subs	r3, r3, r2
 8004e5c:	42ab      	cmp	r3, r5
 8004e5e:	dc2b      	bgt.n	8004eb8 <_printf_common+0xa0>
 8004e60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e64:	1e13      	subs	r3, r2, #0
 8004e66:	6822      	ldr	r2, [r4, #0]
 8004e68:	bf18      	it	ne
 8004e6a:	2301      	movne	r3, #1
 8004e6c:	0692      	lsls	r2, r2, #26
 8004e6e:	d430      	bmi.n	8004ed2 <_printf_common+0xba>
 8004e70:	4649      	mov	r1, r9
 8004e72:	4638      	mov	r0, r7
 8004e74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e78:	47c0      	blx	r8
 8004e7a:	3001      	adds	r0, #1
 8004e7c:	d023      	beq.n	8004ec6 <_printf_common+0xae>
 8004e7e:	6823      	ldr	r3, [r4, #0]
 8004e80:	6922      	ldr	r2, [r4, #16]
 8004e82:	f003 0306 	and.w	r3, r3, #6
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	bf14      	ite	ne
 8004e8a:	2500      	movne	r5, #0
 8004e8c:	6833      	ldreq	r3, [r6, #0]
 8004e8e:	f04f 0600 	mov.w	r6, #0
 8004e92:	bf08      	it	eq
 8004e94:	68e5      	ldreq	r5, [r4, #12]
 8004e96:	f104 041a 	add.w	r4, r4, #26
 8004e9a:	bf08      	it	eq
 8004e9c:	1aed      	subeq	r5, r5, r3
 8004e9e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004ea2:	bf08      	it	eq
 8004ea4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	bfc4      	itt	gt
 8004eac:	1a9b      	subgt	r3, r3, r2
 8004eae:	18ed      	addgt	r5, r5, r3
 8004eb0:	42b5      	cmp	r5, r6
 8004eb2:	d11a      	bne.n	8004eea <_printf_common+0xd2>
 8004eb4:	2000      	movs	r0, #0
 8004eb6:	e008      	b.n	8004eca <_printf_common+0xb2>
 8004eb8:	2301      	movs	r3, #1
 8004eba:	4652      	mov	r2, sl
 8004ebc:	4649      	mov	r1, r9
 8004ebe:	4638      	mov	r0, r7
 8004ec0:	47c0      	blx	r8
 8004ec2:	3001      	adds	r0, #1
 8004ec4:	d103      	bne.n	8004ece <_printf_common+0xb6>
 8004ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8004eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ece:	3501      	adds	r5, #1
 8004ed0:	e7c1      	b.n	8004e56 <_printf_common+0x3e>
 8004ed2:	2030      	movs	r0, #48	; 0x30
 8004ed4:	18e1      	adds	r1, r4, r3
 8004ed6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004eda:	1c5a      	adds	r2, r3, #1
 8004edc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ee0:	4422      	add	r2, r4
 8004ee2:	3302      	adds	r3, #2
 8004ee4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ee8:	e7c2      	b.n	8004e70 <_printf_common+0x58>
 8004eea:	2301      	movs	r3, #1
 8004eec:	4622      	mov	r2, r4
 8004eee:	4649      	mov	r1, r9
 8004ef0:	4638      	mov	r0, r7
 8004ef2:	47c0      	blx	r8
 8004ef4:	3001      	adds	r0, #1
 8004ef6:	d0e6      	beq.n	8004ec6 <_printf_common+0xae>
 8004ef8:	3601      	adds	r6, #1
 8004efa:	e7d9      	b.n	8004eb0 <_printf_common+0x98>

08004efc <_printf_i>:
 8004efc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f00:	7e0f      	ldrb	r7, [r1, #24]
 8004f02:	4691      	mov	r9, r2
 8004f04:	2f78      	cmp	r7, #120	; 0x78
 8004f06:	4680      	mov	r8, r0
 8004f08:	460c      	mov	r4, r1
 8004f0a:	469a      	mov	sl, r3
 8004f0c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f12:	d807      	bhi.n	8004f24 <_printf_i+0x28>
 8004f14:	2f62      	cmp	r7, #98	; 0x62
 8004f16:	d80a      	bhi.n	8004f2e <_printf_i+0x32>
 8004f18:	2f00      	cmp	r7, #0
 8004f1a:	f000 80d5 	beq.w	80050c8 <_printf_i+0x1cc>
 8004f1e:	2f58      	cmp	r7, #88	; 0x58
 8004f20:	f000 80c1 	beq.w	80050a6 <_printf_i+0x1aa>
 8004f24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f2c:	e03a      	b.n	8004fa4 <_printf_i+0xa8>
 8004f2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f32:	2b15      	cmp	r3, #21
 8004f34:	d8f6      	bhi.n	8004f24 <_printf_i+0x28>
 8004f36:	a101      	add	r1, pc, #4	; (adr r1, 8004f3c <_printf_i+0x40>)
 8004f38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f3c:	08004f95 	.word	0x08004f95
 8004f40:	08004fa9 	.word	0x08004fa9
 8004f44:	08004f25 	.word	0x08004f25
 8004f48:	08004f25 	.word	0x08004f25
 8004f4c:	08004f25 	.word	0x08004f25
 8004f50:	08004f25 	.word	0x08004f25
 8004f54:	08004fa9 	.word	0x08004fa9
 8004f58:	08004f25 	.word	0x08004f25
 8004f5c:	08004f25 	.word	0x08004f25
 8004f60:	08004f25 	.word	0x08004f25
 8004f64:	08004f25 	.word	0x08004f25
 8004f68:	080050af 	.word	0x080050af
 8004f6c:	08004fd5 	.word	0x08004fd5
 8004f70:	08005069 	.word	0x08005069
 8004f74:	08004f25 	.word	0x08004f25
 8004f78:	08004f25 	.word	0x08004f25
 8004f7c:	080050d1 	.word	0x080050d1
 8004f80:	08004f25 	.word	0x08004f25
 8004f84:	08004fd5 	.word	0x08004fd5
 8004f88:	08004f25 	.word	0x08004f25
 8004f8c:	08004f25 	.word	0x08004f25
 8004f90:	08005071 	.word	0x08005071
 8004f94:	682b      	ldr	r3, [r5, #0]
 8004f96:	1d1a      	adds	r2, r3, #4
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	602a      	str	r2, [r5, #0]
 8004f9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fa0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e0a0      	b.n	80050ea <_printf_i+0x1ee>
 8004fa8:	6820      	ldr	r0, [r4, #0]
 8004faa:	682b      	ldr	r3, [r5, #0]
 8004fac:	0607      	lsls	r7, r0, #24
 8004fae:	f103 0104 	add.w	r1, r3, #4
 8004fb2:	6029      	str	r1, [r5, #0]
 8004fb4:	d501      	bpl.n	8004fba <_printf_i+0xbe>
 8004fb6:	681e      	ldr	r6, [r3, #0]
 8004fb8:	e003      	b.n	8004fc2 <_printf_i+0xc6>
 8004fba:	0646      	lsls	r6, r0, #25
 8004fbc:	d5fb      	bpl.n	8004fb6 <_printf_i+0xba>
 8004fbe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004fc2:	2e00      	cmp	r6, #0
 8004fc4:	da03      	bge.n	8004fce <_printf_i+0xd2>
 8004fc6:	232d      	movs	r3, #45	; 0x2d
 8004fc8:	4276      	negs	r6, r6
 8004fca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fce:	230a      	movs	r3, #10
 8004fd0:	4859      	ldr	r0, [pc, #356]	; (8005138 <_printf_i+0x23c>)
 8004fd2:	e012      	b.n	8004ffa <_printf_i+0xfe>
 8004fd4:	682b      	ldr	r3, [r5, #0]
 8004fd6:	6820      	ldr	r0, [r4, #0]
 8004fd8:	1d19      	adds	r1, r3, #4
 8004fda:	6029      	str	r1, [r5, #0]
 8004fdc:	0605      	lsls	r5, r0, #24
 8004fde:	d501      	bpl.n	8004fe4 <_printf_i+0xe8>
 8004fe0:	681e      	ldr	r6, [r3, #0]
 8004fe2:	e002      	b.n	8004fea <_printf_i+0xee>
 8004fe4:	0641      	lsls	r1, r0, #25
 8004fe6:	d5fb      	bpl.n	8004fe0 <_printf_i+0xe4>
 8004fe8:	881e      	ldrh	r6, [r3, #0]
 8004fea:	2f6f      	cmp	r7, #111	; 0x6f
 8004fec:	bf0c      	ite	eq
 8004fee:	2308      	moveq	r3, #8
 8004ff0:	230a      	movne	r3, #10
 8004ff2:	4851      	ldr	r0, [pc, #324]	; (8005138 <_printf_i+0x23c>)
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ffa:	6865      	ldr	r5, [r4, #4]
 8004ffc:	2d00      	cmp	r5, #0
 8004ffe:	bfa8      	it	ge
 8005000:	6821      	ldrge	r1, [r4, #0]
 8005002:	60a5      	str	r5, [r4, #8]
 8005004:	bfa4      	itt	ge
 8005006:	f021 0104 	bicge.w	r1, r1, #4
 800500a:	6021      	strge	r1, [r4, #0]
 800500c:	b90e      	cbnz	r6, 8005012 <_printf_i+0x116>
 800500e:	2d00      	cmp	r5, #0
 8005010:	d04b      	beq.n	80050aa <_printf_i+0x1ae>
 8005012:	4615      	mov	r5, r2
 8005014:	fbb6 f1f3 	udiv	r1, r6, r3
 8005018:	fb03 6711 	mls	r7, r3, r1, r6
 800501c:	5dc7      	ldrb	r7, [r0, r7]
 800501e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005022:	4637      	mov	r7, r6
 8005024:	42bb      	cmp	r3, r7
 8005026:	460e      	mov	r6, r1
 8005028:	d9f4      	bls.n	8005014 <_printf_i+0x118>
 800502a:	2b08      	cmp	r3, #8
 800502c:	d10b      	bne.n	8005046 <_printf_i+0x14a>
 800502e:	6823      	ldr	r3, [r4, #0]
 8005030:	07de      	lsls	r6, r3, #31
 8005032:	d508      	bpl.n	8005046 <_printf_i+0x14a>
 8005034:	6923      	ldr	r3, [r4, #16]
 8005036:	6861      	ldr	r1, [r4, #4]
 8005038:	4299      	cmp	r1, r3
 800503a:	bfde      	ittt	le
 800503c:	2330      	movle	r3, #48	; 0x30
 800503e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005042:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005046:	1b52      	subs	r2, r2, r5
 8005048:	6122      	str	r2, [r4, #16]
 800504a:	464b      	mov	r3, r9
 800504c:	4621      	mov	r1, r4
 800504e:	4640      	mov	r0, r8
 8005050:	f8cd a000 	str.w	sl, [sp]
 8005054:	aa03      	add	r2, sp, #12
 8005056:	f7ff fedf 	bl	8004e18 <_printf_common>
 800505a:	3001      	adds	r0, #1
 800505c:	d14a      	bne.n	80050f4 <_printf_i+0x1f8>
 800505e:	f04f 30ff 	mov.w	r0, #4294967295
 8005062:	b004      	add	sp, #16
 8005064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005068:	6823      	ldr	r3, [r4, #0]
 800506a:	f043 0320 	orr.w	r3, r3, #32
 800506e:	6023      	str	r3, [r4, #0]
 8005070:	2778      	movs	r7, #120	; 0x78
 8005072:	4832      	ldr	r0, [pc, #200]	; (800513c <_printf_i+0x240>)
 8005074:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005078:	6823      	ldr	r3, [r4, #0]
 800507a:	6829      	ldr	r1, [r5, #0]
 800507c:	061f      	lsls	r7, r3, #24
 800507e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005082:	d402      	bmi.n	800508a <_printf_i+0x18e>
 8005084:	065f      	lsls	r7, r3, #25
 8005086:	bf48      	it	mi
 8005088:	b2b6      	uxthmi	r6, r6
 800508a:	07df      	lsls	r7, r3, #31
 800508c:	bf48      	it	mi
 800508e:	f043 0320 	orrmi.w	r3, r3, #32
 8005092:	6029      	str	r1, [r5, #0]
 8005094:	bf48      	it	mi
 8005096:	6023      	strmi	r3, [r4, #0]
 8005098:	b91e      	cbnz	r6, 80050a2 <_printf_i+0x1a6>
 800509a:	6823      	ldr	r3, [r4, #0]
 800509c:	f023 0320 	bic.w	r3, r3, #32
 80050a0:	6023      	str	r3, [r4, #0]
 80050a2:	2310      	movs	r3, #16
 80050a4:	e7a6      	b.n	8004ff4 <_printf_i+0xf8>
 80050a6:	4824      	ldr	r0, [pc, #144]	; (8005138 <_printf_i+0x23c>)
 80050a8:	e7e4      	b.n	8005074 <_printf_i+0x178>
 80050aa:	4615      	mov	r5, r2
 80050ac:	e7bd      	b.n	800502a <_printf_i+0x12e>
 80050ae:	682b      	ldr	r3, [r5, #0]
 80050b0:	6826      	ldr	r6, [r4, #0]
 80050b2:	1d18      	adds	r0, r3, #4
 80050b4:	6961      	ldr	r1, [r4, #20]
 80050b6:	6028      	str	r0, [r5, #0]
 80050b8:	0635      	lsls	r5, r6, #24
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	d501      	bpl.n	80050c2 <_printf_i+0x1c6>
 80050be:	6019      	str	r1, [r3, #0]
 80050c0:	e002      	b.n	80050c8 <_printf_i+0x1cc>
 80050c2:	0670      	lsls	r0, r6, #25
 80050c4:	d5fb      	bpl.n	80050be <_printf_i+0x1c2>
 80050c6:	8019      	strh	r1, [r3, #0]
 80050c8:	2300      	movs	r3, #0
 80050ca:	4615      	mov	r5, r2
 80050cc:	6123      	str	r3, [r4, #16]
 80050ce:	e7bc      	b.n	800504a <_printf_i+0x14e>
 80050d0:	682b      	ldr	r3, [r5, #0]
 80050d2:	2100      	movs	r1, #0
 80050d4:	1d1a      	adds	r2, r3, #4
 80050d6:	602a      	str	r2, [r5, #0]
 80050d8:	681d      	ldr	r5, [r3, #0]
 80050da:	6862      	ldr	r2, [r4, #4]
 80050dc:	4628      	mov	r0, r5
 80050de:	f000 f859 	bl	8005194 <memchr>
 80050e2:	b108      	cbz	r0, 80050e8 <_printf_i+0x1ec>
 80050e4:	1b40      	subs	r0, r0, r5
 80050e6:	6060      	str	r0, [r4, #4]
 80050e8:	6863      	ldr	r3, [r4, #4]
 80050ea:	6123      	str	r3, [r4, #16]
 80050ec:	2300      	movs	r3, #0
 80050ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050f2:	e7aa      	b.n	800504a <_printf_i+0x14e>
 80050f4:	462a      	mov	r2, r5
 80050f6:	4649      	mov	r1, r9
 80050f8:	4640      	mov	r0, r8
 80050fa:	6923      	ldr	r3, [r4, #16]
 80050fc:	47d0      	blx	sl
 80050fe:	3001      	adds	r0, #1
 8005100:	d0ad      	beq.n	800505e <_printf_i+0x162>
 8005102:	6823      	ldr	r3, [r4, #0]
 8005104:	079b      	lsls	r3, r3, #30
 8005106:	d413      	bmi.n	8005130 <_printf_i+0x234>
 8005108:	68e0      	ldr	r0, [r4, #12]
 800510a:	9b03      	ldr	r3, [sp, #12]
 800510c:	4298      	cmp	r0, r3
 800510e:	bfb8      	it	lt
 8005110:	4618      	movlt	r0, r3
 8005112:	e7a6      	b.n	8005062 <_printf_i+0x166>
 8005114:	2301      	movs	r3, #1
 8005116:	4632      	mov	r2, r6
 8005118:	4649      	mov	r1, r9
 800511a:	4640      	mov	r0, r8
 800511c:	47d0      	blx	sl
 800511e:	3001      	adds	r0, #1
 8005120:	d09d      	beq.n	800505e <_printf_i+0x162>
 8005122:	3501      	adds	r5, #1
 8005124:	68e3      	ldr	r3, [r4, #12]
 8005126:	9903      	ldr	r1, [sp, #12]
 8005128:	1a5b      	subs	r3, r3, r1
 800512a:	42ab      	cmp	r3, r5
 800512c:	dcf2      	bgt.n	8005114 <_printf_i+0x218>
 800512e:	e7eb      	b.n	8005108 <_printf_i+0x20c>
 8005130:	2500      	movs	r5, #0
 8005132:	f104 0619 	add.w	r6, r4, #25
 8005136:	e7f5      	b.n	8005124 <_printf_i+0x228>
 8005138:	08005295 	.word	0x08005295
 800513c:	080052a6 	.word	0x080052a6

08005140 <memmove>:
 8005140:	4288      	cmp	r0, r1
 8005142:	b510      	push	{r4, lr}
 8005144:	eb01 0402 	add.w	r4, r1, r2
 8005148:	d902      	bls.n	8005150 <memmove+0x10>
 800514a:	4284      	cmp	r4, r0
 800514c:	4623      	mov	r3, r4
 800514e:	d807      	bhi.n	8005160 <memmove+0x20>
 8005150:	1e43      	subs	r3, r0, #1
 8005152:	42a1      	cmp	r1, r4
 8005154:	d008      	beq.n	8005168 <memmove+0x28>
 8005156:	f811 2b01 	ldrb.w	r2, [r1], #1
 800515a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800515e:	e7f8      	b.n	8005152 <memmove+0x12>
 8005160:	4601      	mov	r1, r0
 8005162:	4402      	add	r2, r0
 8005164:	428a      	cmp	r2, r1
 8005166:	d100      	bne.n	800516a <memmove+0x2a>
 8005168:	bd10      	pop	{r4, pc}
 800516a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800516e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005172:	e7f7      	b.n	8005164 <memmove+0x24>

08005174 <_sbrk_r>:
 8005174:	b538      	push	{r3, r4, r5, lr}
 8005176:	2300      	movs	r3, #0
 8005178:	4d05      	ldr	r5, [pc, #20]	; (8005190 <_sbrk_r+0x1c>)
 800517a:	4604      	mov	r4, r0
 800517c:	4608      	mov	r0, r1
 800517e:	602b      	str	r3, [r5, #0]
 8005180:	f7fc fe6c 	bl	8001e5c <_sbrk>
 8005184:	1c43      	adds	r3, r0, #1
 8005186:	d102      	bne.n	800518e <_sbrk_r+0x1a>
 8005188:	682b      	ldr	r3, [r5, #0]
 800518a:	b103      	cbz	r3, 800518e <_sbrk_r+0x1a>
 800518c:	6023      	str	r3, [r4, #0]
 800518e:	bd38      	pop	{r3, r4, r5, pc}
 8005190:	2000044c 	.word	0x2000044c

08005194 <memchr>:
 8005194:	4603      	mov	r3, r0
 8005196:	b510      	push	{r4, lr}
 8005198:	b2c9      	uxtb	r1, r1
 800519a:	4402      	add	r2, r0
 800519c:	4293      	cmp	r3, r2
 800519e:	4618      	mov	r0, r3
 80051a0:	d101      	bne.n	80051a6 <memchr+0x12>
 80051a2:	2000      	movs	r0, #0
 80051a4:	e003      	b.n	80051ae <memchr+0x1a>
 80051a6:	7804      	ldrb	r4, [r0, #0]
 80051a8:	3301      	adds	r3, #1
 80051aa:	428c      	cmp	r4, r1
 80051ac:	d1f6      	bne.n	800519c <memchr+0x8>
 80051ae:	bd10      	pop	{r4, pc}

080051b0 <memcpy>:
 80051b0:	440a      	add	r2, r1
 80051b2:	4291      	cmp	r1, r2
 80051b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80051b8:	d100      	bne.n	80051bc <memcpy+0xc>
 80051ba:	4770      	bx	lr
 80051bc:	b510      	push	{r4, lr}
 80051be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051c2:	4291      	cmp	r1, r2
 80051c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051c8:	d1f9      	bne.n	80051be <memcpy+0xe>
 80051ca:	bd10      	pop	{r4, pc}

080051cc <_realloc_r>:
 80051cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051d0:	4680      	mov	r8, r0
 80051d2:	4614      	mov	r4, r2
 80051d4:	460e      	mov	r6, r1
 80051d6:	b921      	cbnz	r1, 80051e2 <_realloc_r+0x16>
 80051d8:	4611      	mov	r1, r2
 80051da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051de:	f7ff bc37 	b.w	8004a50 <_malloc_r>
 80051e2:	b92a      	cbnz	r2, 80051f0 <_realloc_r+0x24>
 80051e4:	f7ff fbcc 	bl	8004980 <_free_r>
 80051e8:	4625      	mov	r5, r4
 80051ea:	4628      	mov	r0, r5
 80051ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051f0:	f000 f81b 	bl	800522a <_malloc_usable_size_r>
 80051f4:	4284      	cmp	r4, r0
 80051f6:	4607      	mov	r7, r0
 80051f8:	d802      	bhi.n	8005200 <_realloc_r+0x34>
 80051fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80051fe:	d812      	bhi.n	8005226 <_realloc_r+0x5a>
 8005200:	4621      	mov	r1, r4
 8005202:	4640      	mov	r0, r8
 8005204:	f7ff fc24 	bl	8004a50 <_malloc_r>
 8005208:	4605      	mov	r5, r0
 800520a:	2800      	cmp	r0, #0
 800520c:	d0ed      	beq.n	80051ea <_realloc_r+0x1e>
 800520e:	42bc      	cmp	r4, r7
 8005210:	4622      	mov	r2, r4
 8005212:	4631      	mov	r1, r6
 8005214:	bf28      	it	cs
 8005216:	463a      	movcs	r2, r7
 8005218:	f7ff ffca 	bl	80051b0 <memcpy>
 800521c:	4631      	mov	r1, r6
 800521e:	4640      	mov	r0, r8
 8005220:	f7ff fbae 	bl	8004980 <_free_r>
 8005224:	e7e1      	b.n	80051ea <_realloc_r+0x1e>
 8005226:	4635      	mov	r5, r6
 8005228:	e7df      	b.n	80051ea <_realloc_r+0x1e>

0800522a <_malloc_usable_size_r>:
 800522a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800522e:	1f18      	subs	r0, r3, #4
 8005230:	2b00      	cmp	r3, #0
 8005232:	bfbc      	itt	lt
 8005234:	580b      	ldrlt	r3, [r1, r0]
 8005236:	18c0      	addlt	r0, r0, r3
 8005238:	4770      	bx	lr
	...

0800523c <_init>:
 800523c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800523e:	bf00      	nop
 8005240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005242:	bc08      	pop	{r3}
 8005244:	469e      	mov	lr, r3
 8005246:	4770      	bx	lr

08005248 <_fini>:
 8005248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800524a:	bf00      	nop
 800524c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800524e:	bc08      	pop	{r3}
 8005250:	469e      	mov	lr, r3
 8005252:	4770      	bx	lr
